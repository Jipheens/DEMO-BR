{"version":3,"file":"src_app_erp-hr_modules_hr-miscellaneous_hr-miscellaneous_module_ts.js","mappings":"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","sources":["./src/app/erp-hr/modules/hr-miscellaneous/bulk-uploads/bulk-uploads.component.ts","./src/app/erp-hr/modules/hr-miscellaneous/bulk-uploads/bulk-uploads.component.html","./src/app/erp-hr/modules/hr-miscellaneous/hr-miscellaneous-routing.module.ts","./src/app/erp-hr/modules/hr-miscellaneous/hr-miscellaneous.module.ts"],"sourcesContent":["import { SelectionModel } from \"@angular/cdk/collections\";\nimport { Component, OnInit, ViewChild } from \"@angular/core\";\nimport { FormGroup, FormBuilder } from \"@angular/forms\";\nimport { MatDialog, MatDialogConfig } from \"@angular/material/dialog\";\nimport { MatPaginator } from \"@angular/material/paginator\";\nimport { MatSort } from \"@angular/material/sort\";\nimport { MatTableDataSource } from \"@angular/material/table\";\nimport { Subject, takeUntil } from \"rxjs\";\nimport { NotificationServiceService } from \"src/@core/Models/Notification/notification-service.service\";\nimport { BranchService } from \"src/app/erp-hr/data/configuration-services/branch.service\";\nimport { SnackbarService } from \"src/app/shared/services/snackbar.service\";\nimport Swal from \"sweetalert2\";\nimport { ManageBranchesComponent } from \"../../configurations/branches/dialogs/manage-branches/manage-branches.component\";\nimport { environment } from \"src/environments/environment.prod\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { StaffLoanService } from \"src/app/erp-hr/data/payroll-services/staff-loan.service\";\nimport { CustomDeductionService } from \"src/app/erp-hr/data/payroll-services/custom-deduction.service\";\nimport { SalaryIncrementService } from \"src/app/erp-hr/data/payroll-services/salaryincrement.service\";\nimport { CustomAllowanceService } from \"src/app/erp-hr/data/payroll-services/custom-allowance.service\";\n\n@Component({\n  selector: \"app-bulk-uploads\",\n  templateUrl: \"./bulk-uploads.component.html\",\n  styleUrls: [\"./bulk-uploads.component.sass\"],\n})\nexport class BulkUploadsComponent implements OnInit {\n  displayedColumns: string[] = [\n    \"employeePfNo\",\n    \"allowanceType\",\n    \"amount\",\n    \"description\",\n    \"isTaxable\",\n    \"periodM\",\n    \"periodY\",\n    \"status\",\n  ];\n\n  loading: boolean = false;\n  data: any;\n  error: any;\n  dialogConfig: any;\n  destroy$: Subject<boolean> = new Subject<boolean>();\n\n  dataSource!: MatTableDataSource<any>;\n  @ViewChild(MatPaginator) paginator!: MatPaginator;\n  @ViewChild(MatSort) sort!: MatSort;\n\n  selection = new SelectionModel<any>(true, []);\n\n  downloadLoading: boolean = false;\n  posting: boolean = false;\n  showForm: boolean = false;\n\n  Form: FormGroup;\n\n  constructor(\n    private dialog: MatDialog,\n    private notificationAPI: NotificationServiceService,\n    private branchAPI: BranchService,\n    private snackbar: SnackbarService,\n    private fb: FormBuilder,\n    private http: HttpClient,\n    private staffLoanService: StaffLoanService,\n    private salaryIncrementService: SalaryIncrementService,\n    private customDeductionAPI: CustomDeductionService,\n\n    private customAllowanceAPI: CustomAllowanceService\n  ) {}\n\n  ngOnInit(): void {\n    this.Form = this.fb.group({\n      uploadType: [\"Allowance Upload\"],\n    });\n    this.Form.valueChanges.subscribe(() => {\n      this.resetDisplayColumns();\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next(true);\n    this.destroy$.complete();\n  }\n\n  resetDisplayColumns() {\n    const selectedUploadType = this.Form.get(\"uploadType\")?.value;\n\n    switch (selectedUploadType) {\n      case \"Employees Upload\":\n        this.displayedColumns = [];\n        break;\n      case \"Allowance Upload\":\n        this.displayedColumns = [\n          \"employeePfNo\",\n          \"allowanceType\",\n          \"amount\",\n          \"description\",\n          \"isTaxable\",\n          \"periodM\",\n          \"periodY\",\n          \"status\",\n        ];\n        break;\n      case \"Deductions Upload\":\n        this.displayedColumns = [\n          \"employeePfNo\",\n          \"amount\",\n          \"description\",\n          \"periodM\",\n          \"periodY\",\n          \"deductionType\",\n          \"deductionBeforeTax\",\n        ];\n        break;\n      case \"Salary Increment Upload\":\n        this.displayedColumns = [\"empPf\", \"newSalary\", \"status\"];\n        break;\n      case \"Staff Loans Upload\":\n        this.displayedColumns = [\n          \"empPf\",\n          \"loanAmount\",\n          \"interestRate\",\n          \"loanAccountNumber\",\n          \"fromDate\",\n          \"toDate\",\n          \"description\",\n        ];\n\n        break;\n      // default:\n      //   this.displayedColumns = []\n    }\n  }\n  //****************************************************************************************** */\n\n  refresh() {}\n\n  input: any;\n  applyFilter(event: Event) {\n    const filterValue = (event.target as HTMLInputElement).value;\n    this.input = filterValue;\n    this.dataSource.filter = filterValue.trim().toLowerCase();\n    if (this.dataSource.paginator) {\n      this.dataSource.paginator.firstPage();\n    }\n  }\n  // ****************************************************************************************************************************\n\n  handleFileInput(event: any) {}\n  // ****************************************************************************************************************************\n  uploadTypes: any[] = [\n    \"Employees Upload\",\n    \"Allowance Upload\",\n    \"Deductions Upload\",\n    \"Salary Increment Upload\",\n    \"Staff Loans Upload\",\n  ];\n  downloadTemplate() {\n    const selectedUploadType = this.Form.get(\"uploadType\")?.value;\n\n    switch (selectedUploadType) {\n      case \"Employees Upload\":\n        this.downloadEmployeeCreationTemplate();\n        break;\n      case \"Allowance Upload\":\n        this.downloadAllowanceTemplate();\n        break;\n      case \"Deductions Upload\":\n        this.downloadDeductionsTemplate();\n        break;\n      case \"Salary Increment Upload\":\n        this.downloadSalaryIncrementTemplate();\n        break;\n      case \"Staff Loans Upload\":\n        this.downloadStaffLoansTemplate();\n        break;\n      default:\n        console.error(\"Unknown upload type:\", selectedUploadType);\n    }\n  }\n\n  downloadEmployeeCreationTemplate(): void {\n    this.downloadFile(\n      \"../../../../../../assets/excel_templates/EmployeeCreationTemplate.xlsx\",\n      \"EmployeeCreationTemplate.xlsx\"\n    );\n  }\n\n  downloadAllowanceTemplate(): void {\n    this.downloadFile(\n      \"../../../../../../assets/excel_templates/Allowances_custom_upload_file.xlsx\",\n      \"Allowances_custom_upload_file.xlsx\"\n    );\n  }\n\n  downloadDeductionsTemplate(): void {\n    this.downloadFile(\n      \"../../../../../../assets/excel_templates/Deductions_custom_upload_file.xlsx\",\n      \"Deductions_custom_upload_file\" + new Date().toISOString() + \".xlsx\"\n    );\n  }\n\n  downloadSalaryIncrementTemplate(): void {\n    this.downloadFile(\n      \"../../../../../../assets/excel_templates/Salary_review_upload_file.xlsx\",\n      \"Salary_review_upload_file.xlsx\"\n    );\n  }\n\n  downloadStaffLoansTemplate(): void {\n    this.downloadFile(\n      \"../../../../../../assets/excel_templates/Staff_loans_upload_file.xlsx\",\n      \"Staff_loans_upload_file.xlsx\"\n    );\n  }\n\n  private downloadFile(templateUrl: string, filename: string): void {\n    const a = document.createElement(\"a\");\n    a.href = templateUrl;\n    a.download = filename;\n    a.click();\n  }\n\n  //*************************************************************************************************************************** */\n  selectedFile: any;\n  results: any;\n  dataRes: any;\n\n  onFileSelected(event: any) {\n    this.loading = true;\n    this.selectedFile = event.target.files[0];\n    let URL = `${environment.baseUrlHR}/api/v1/upload/extract/excel`;\n    if (this.selectedFile) {\n      const formData = new FormData();\n      formData.append(\"file\", this.selectedFile);\n      this.http.post(URL, formData).subscribe(\n        (response) => {\n          this.loading = false;\n          this.results = response;\n          this.dataRes = [];\n          for (let i = 0; i < this.results.length; i++) {\n            this.dataRes.push(this.results[i]);\n          }\n          this.dataSource = new MatTableDataSource(this.results);\n          this.dataSource.paginator = this.paginator;\n          this.dataSource.sort = this.sort;\n        },\n        (error) => {\n          this.loading = false;\n        }\n      );\n    }\n  }\n\n  //*************************************************************************************************************************** */\n\n  submit() {\n    if (this.dataSource && this.dataSource.data.length > 0) {\n      this.loading = true;\n      const selectedUploadType = this.Form.get(\"uploadType\")?.value;\n\n      switch (selectedUploadType) {\n        case \"Employees Upload\":\n          this.downloadEmployeeCreationTemplate();\n          break;\n        case \"Allowance Upload\":\n          this.customAllowanceAPI\n            .createMultile(this.dataSource.data)\n            .pipe(takeUntil(this.destroy$))\n            .subscribe({\n              next: (res) => {\n                if (res.statusCode === 302) {\n                  this.loading = false;\n                } else {\n                  this.loading = false;\n\n                  this.notificationAPI.alertWarning(res.message);\n                }\n              },\n              error: (err) => {\n                this.loading = false;\n                this.notificationAPI.alertWarning(\n                  \"Server Error: \" + err.message\n                );\n              },\n              complete: () => {},\n            });\n          break;\n        case \"Deductions Upload\":\n          this.customDeductionAPI\n            .createBulk(this.dataSource.data)\n            .pipe(takeUntil(this.destroy$))\n            .subscribe({\n              next: (res) => {\n                if (res.statusCode === 302) {\n                  this.loading = false;\n                } else {\n                  this.loading = false;\n\n                  this.notificationAPI.alertWarning(res.message);\n                }\n              },\n              error: (err) => {\n                this.loading = false;\n                this.notificationAPI.alertWarning(\n                  \"Server Error: \" + err.message\n                );\n              },\n              complete: () => {},\n            });\n          break;\n        case \"Salary Increment Upload\":\n          this.salaryIncrementService\n            .create(this.dataSource.data)\n            .pipe(takeUntil(this.destroy$))\n            .subscribe({\n              next: (res) => {\n                if (res.statusCode === 302) {\n                  this.loading = false;\n                } else {\n                  this.loading = false;\n\n                  this.notificationAPI.alertWarning(res.message);\n                }\n              },\n              error: (err) => {\n                this.loading = false;\n                this.notificationAPI.alertWarning(\n                  \"Server Error: \" + err.message\n                );\n              },\n              complete: () => {},\n            });\n          break;\n        case \"Staff Loans Upload\":\n          this.staffLoanService\n            .createBulk(this.dataSource.data)\n            .pipe(takeUntil(this.destroy$))\n            .subscribe({\n              next: (res) => {\n                if (res.statusCode === 302) {\n                  this.loading = false;\n                } else {\n                  this.loading = false;\n\n                  this.notificationAPI.alertWarning(res.message);\n                }\n              },\n              error: (err) => {\n                this.loading = false;\n                this.notificationAPI.alertWarning(\n                  \"Server Error: \" + err.message\n                );\n              },\n              complete: () => {},\n            });\n          break;\n        default:\n          console.error(\"Unknown upload type:\", selectedUploadType);\n      }\n    } else {\n      this.notificationAPI.alertWarning(\"No data found for upload!!\");\n    }\n  }\n}\n","<section class=\"content\">\n    <div class=\"content-block\">\n        <div class=\"block-header\">\n            <!-- breadcrumb -->\n            <app-breadcrumb [title]=\"'Bulk Uploads'\" [items]=\"['Uploads']\" [active_item]=\"'Bulk Uploads'\">\n            </app-breadcrumb>\n        </div>\n\n        <app-gen-widgets></app-gen-widgets>\n\n        <div class=\"row\">\n            <div class=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\">\n                <div class=\"card\">\n\n                    <div class=\"body\">\n                        <div class=\"table-responsive\">\n                            <div class=\"materialTableHeader\">\n                                <div class=\"row\">\n                                    <div class=\"col-6\">\n                                        <ul class=\"header-buttons-left ms-0\">\n                                            <li class=\"dropdown\">\n                                                <h2>Bulk Upload</h2>\n                                            </li>\n                                            <li class=\"dropdown m-l-20\">\n                                                <label for=\"search-input\"><i\n                                                        class=\"material-icons search-icon\">search</i></label>\n                                                <input placeholder=\"Filter...\" type=\"text\" (keyup)=\"applyFilter($event)\"\n                                                    #filter class=\"browser-default search-field\"\n                                                    aria-label=\"Search box\">\n                                            </li>\n\n\n\n                                        </ul>\n                                    </div>\n                                    <div class=\"col-2\">\n                                        <form [formGroup]=\"Form\">\n\n                                            <mat-form-field class=\"example-full-width\" appearance=\"fill\">\n                                                <mat-label>Upload Type</mat-label>\n\n                                                <mat-select formControlName=\"uploadType\">\n                                                    <mat-option *ngFor=\"let uploadType of uploadTypes\"\n                                                        [value]=\"uploadType\">{{ uploadType\n                                                        }}\n                                                    </mat-option>\n                                                </mat-select>\n\n                                                <mat-error *ngIf=\"Form.get('uploadType').hasError('required')\">\n                                                    Please select Upload Type\n                                                </mat-error>\n                                            </mat-form-field>\n\n                                        </form>\n                                    </div>\n                                    <div class=\"col-4\">\n                                        <ul class=\"header-buttons\">\n                                            <li>\n                                                <div class=\"export-button m-l-10\" matTooltip=\"XLSX\">\n                                                    <img src=\"assets/images/icons/xlsx.png\" alt=\"\"\n                                                        (click)=\"exporter.exportTable('xlsx', {fileName:'assets-list', sheet: 'sheet1'})\" />\n                                                </div>\n                                            </li>\n                                            <li>\n                                                <div class=\"export-button m-l-10\" matTooltip=\"CSV\">\n                                                    <img src=\"assets/images/icons/csv.png\" alt=\"\"\n                                                        (click)=\"exporter.exportTable('csv')\" />\n                                                </div>\n                                            </li>\n                                            <li>\n                                                <div class=\"export-button m-l-10\" matTooltip=\"JSON\">\n                                                    <img src=\"assets/images/icons/json.png\" alt=\"\"\n                                                        (click)=\"exporter.exportTable('json')\" />\n                                                </div>\n                                            </li>\n                                            <li>\n                                                <div class=\"export-button m-l-10\" matTooltip=\"TXT\">\n                                                    <img src=\"assets/images/icons/txt.png\" alt=\"\"\n                                                        (click)=\"exporter.exportTable('txt')\" />\n                                                </div>\n                                            </li>\n                                        </ul>\n                                    </div>\n                                </div>\n                            </div>\n\n\n                            <div class=\"row align-items-center mx-4 mt-2\">\n                                <div class=\"col-xl-10 col-lg-10 col-md-8 col-sm-6\">\n                                    <app-file-upload (change)=\"onFileSelected($event)\"></app-file-upload>\n                                </div>\n                                <div class=\"col-xl-1 col-lg-1 col-md-4 col-sm-6\">\n                                    <button mat-raised-button color=\"primary\" (click)=\"downloadTemplate()\">\n                                        <i class=\"fa fa-download\"></i> Download Template\n                                    </button>\n                                </div>\n\n                                <div class=\"col-xl-1 col-lg-1 col-md-4 col-sm-6\">\n                                    <button class=\"mx-2\" mat-raised-button color=\"primary\" (click)=\"submit()\">\n                                        <mat-icon>cloud_download</mat-icon> Submit Records\n                                    </button>\n                                </div>\n                            </div>\n                            <hr>\n                            <mat-table #table matTableExporter [dataSource]=\"dataSource\" matSort class=\"mat-cell\"\n                                #exporter=\"matTableExporter\">\n                                <!-- Allowance Uploads -->\n                                <ng-container>\n                                    <ng-container matColumnDef=\"employeePfNo\">\n                                        <mat-header-cell *matHeaderCellDef mat-sort-header\n                                            class=\"column-nowrap psl-3 tbl-col-width-per-10\">\n                                            Employee PF No\n                                        </mat-header-cell>\n                                        <mat-cell *matCellDef=\"let row\"\n                                            class=\"column-nowrap psl-3 tbl-col-width-per-10\">\n                                            {{ row.employeePfNo }}\n                                        </mat-cell>\n                                    </ng-container>\n\n                                    <ng-container matColumnDef=\"allowanceType\">\n                                        <mat-header-cell *matHeaderCellDef mat-sort-header\n                                            class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                            Allowance Type\n                                        </mat-header-cell>\n                                        <mat-cell *matCellDef=\"let row\"\n                                            class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                            {{ row.allowanceType }}\n                                        </mat-cell>\n                                    </ng-container>\n\n                                    <ng-container matColumnDef=\"amount\">\n                                        <mat-header-cell *matHeaderCellDef mat-sort-header\n                                            class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                            Amount\n                                        </mat-header-cell>\n                                        <mat-cell *matCellDef=\"let row\"\n                                            class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                            {{ row.amount }}\n                                        </mat-cell>\n                                    </ng-container>\n\n                                    <ng-container matColumnDef=\"description\">\n                                        <mat-header-cell *matHeaderCellDef mat-sort-header\n                                            class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                            Description\n                                        </mat-header-cell>\n                                        <mat-cell *matCellDef=\"let row\"\n                                            class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                            {{ row.description }}\n                                        </mat-cell>\n                                    </ng-container>\n\n                                    <ng-container matColumnDef=\"isTaxable\">\n                                        <mat-header-cell *matHeaderCellDef mat-sort-header\n                                            class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                            Is Taxable\n                                        </mat-header-cell>\n                                        <mat-cell *matCellDef=\"let row\"\n                                            class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                            {{ row.isTaxable }}\n                                        </mat-cell>\n                                    </ng-container>\n\n                                    <ng-container matColumnDef=\"periodM\">\n                                        <mat-header-cell *matHeaderCellDef mat-sort-header\n                                            class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                            Period M\n                                        </mat-header-cell>\n                                        <mat-cell *matCellDef=\"let row\"\n                                            class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                            {{ row.periodM }}\n                                        </mat-cell>\n                                    </ng-container>\n\n                                    <ng-container matColumnDef=\"periodY\">\n                                        <mat-header-cell *matHeaderCellDef mat-sort-header\n                                            class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                            Period Y\n                                        </mat-header-cell>\n                                        <mat-cell *matCellDef=\"let row\"\n                                            class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                            {{ row.periodY }}\n                                        </mat-cell>\n                                    </ng-container>\n\n                                    <ng-container matColumnDef=\"status\">\n                                        <mat-header-cell *matHeaderCellDef mat-sort-header\n                                            class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                            Status\n                                        </mat-header-cell>\n                                        <mat-cell *matCellDef=\"let row\"\n                                            class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                            {{ row.status }}\n                                        </mat-cell>\n                                    </ng-container>\n\n\n                                </ng-container>\n\n                                <!-- Deductions Uploads -->\n                                <ng-container>\n                                    <ng-container matColumnDef=\"employeePfNo\">\n                                        <mat-header-cell *matHeaderCellDef mat-sort-header\n                                            class=\"column-nowrap psl-3 tbl-col-width-per-10\">\n                                            Employee PF No\n                                        </mat-header-cell>\n                                        <mat-cell *matCellDef=\"let row\"\n                                            class=\"column-nowrap psl-3 tbl-col-width-per-10\">\n                                            {{ row.employeePfNo }}\n                                        </mat-cell>\n                                    </ng-container>\n\n                                    <ng-container matColumnDef=\"amount\">\n                                        <mat-header-cell *matHeaderCellDef mat-sort-header\n                                            class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                            Amount\n                                        </mat-header-cell>\n                                        <mat-cell *matCellDef=\"let row\"\n                                            class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                            {{ row.amount }}\n                                        </mat-cell>\n                                    </ng-container>\n\n                                    <ng-container matColumnDef=\"description\">\n                                        <mat-header-cell *matHeaderCellDef mat-sort-header\n                                            class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                            Description\n                                        </mat-header-cell>\n                                        <mat-cell *matCellDef=\"let row\"\n                                            class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                            {{ row.description }}\n                                        </mat-cell>\n                                    </ng-container>\n\n                                    <ng-container matColumnDef=\"periodM\">\n                                        <mat-header-cell *matHeaderCellDef mat-sort-header\n                                            class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                            Period M\n                                        </mat-header-cell>\n                                        <mat-cell *matCellDef=\"let row\"\n                                            class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                            {{ row.periodM }}\n                                        </mat-cell>\n                                    </ng-container>\n\n                                    <ng-container matColumnDef=\"periodY\">\n                                        <mat-header-cell *matHeaderCellDef mat-sort-header\n                                            class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                            Period Y\n                                        </mat-header-cell>\n                                        <mat-cell *matCellDef=\"let row\"\n                                            class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                            {{ row.periodY }}\n                                        </mat-cell>\n                                    </ng-container>\n\n                                    <ng-container matColumnDef=\"deductionType\">\n                                        <mat-header-cell *matHeaderCellDef mat-sort-header\n                                            class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                            Deduction Type\n                                        </mat-header-cell>\n                                        <mat-cell *matCellDef=\"let row\"\n                                            class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                            {{ row.deductionType }}\n                                        </mat-cell>\n                                    </ng-container>\n\n                                    <ng-container matColumnDef=\"deductionBeforeTax\">\n                                        <mat-header-cell *matHeaderCellDef mat-sort-header\n                                            class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                            Deduction Before Tax\n                                        </mat-header-cell>\n                                        <mat-cell *matCellDef=\"let row\"\n                                            class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                            {{ row.deductionBeforeTax }}\n                                        </mat-cell>\n                                    </ng-container>\n                                </ng-container>\n\n                                <!-- Salary Increment Upload -->\n                                <ng-container>\n                                    <ng-container matColumnDef=\"empPf\">\n                                        <mat-header-cell *matHeaderCellDef mat-sort-header\n                                            class=\"column-nowrap psl-3 tbl-col-width-per-10\">\n                                            Employee PF\n                                        </mat-header-cell>\n                                        <mat-cell *matCellDef=\"let row\"\n                                            class=\"column-nowrap psl-3 tbl-col-width-per-10\">\n                                            {{ row.empPf }}\n                                        </mat-cell>\n                                    </ng-container>\n\n                                    <ng-container matColumnDef=\"newSalary\">\n                                        <mat-header-cell *matHeaderCellDef mat-sort-header\n                                            class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                            New Salary\n                                        </mat-header-cell>\n                                        <mat-cell *matCellDef=\"let row\"\n                                            class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                            {{ row.newSalary }}\n                                        </mat-cell>\n                                    </ng-container>\n\n                                    <ng-container matColumnDef=\"status\">\n                                        <mat-header-cell *matHeaderCellDef mat-sort-header\n                                            class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                            Status\n                                        </mat-header-cell>\n                                        <mat-cell *matCellDef=\"let row\"\n                                            class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                            {{ row.status }}\n                                        </mat-cell>\n                                    </ng-container>\n\n                                </ng-container>\n\n                                <!-- Staff Loans Upload -->\n                                <ng-container>\n                                    <ng-container matColumnDef=\"empPf\">\n                                        <mat-header-cell *matHeaderCellDef mat-sort-header\n                                            class=\"column-nowrap psl-3 tbl-col-width-per-10\">\n                                            Employee PF\n                                        </mat-header-cell>\n                                        <mat-cell *matCellDef=\"let row\"\n                                            class=\"column-nowrap psl-3 tbl-col-width-per-10\">\n                                            {{ row.empPf }}\n                                        </mat-cell>\n                                    </ng-container>\n\n                                    <ng-container matColumnDef=\"loanAmount\">\n                                        <mat-header-cell *matHeaderCellDef mat-sort-header\n                                            class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                            Loan Amount\n                                        </mat-header-cell>\n                                        <mat-cell *matCellDef=\"let row\"\n                                            class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                            {{ row.loanAmount }}\n                                        </mat-cell>\n                                    </ng-container>\n\n                                    <ng-container matColumnDef=\"interestRate\">\n                                        <mat-header-cell *matHeaderCellDef mat-sort-header\n                                            class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                            Interest Rate\n                                        </mat-header-cell>\n                                        <mat-cell *matCellDef=\"let row\"\n                                            class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                            {{ row.interestRate }}\n                                        </mat-cell>\n                                    </ng-container>\n\n                                    <ng-container matColumnDef=\"loanAccountNumber\">\n                                        <mat-header-cell *matHeaderCellDef mat-sort-header\n                                            class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                            Loan Account Number\n                                        </mat-header-cell>\n                                        <mat-cell *matCellDef=\"let row\"\n                                            class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                            {{ row.loanAccountNumber }}\n                                        </mat-cell>\n                                    </ng-container>\n\n                                    <ng-container matColumnDef=\"fromDate\">\n                                        <mat-header-cell *matHeaderCellDef mat-sort-header\n                                            class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                            From Date\n                                        </mat-header-cell>\n                                        <mat-cell *matCellDef=\"let row\"\n                                            class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                            {{ row.fromDate }}\n                                        </mat-cell>\n                                    </ng-container>\n\n                                    <ng-container matColumnDef=\"toDate\">\n                                        <mat-header-cell *matHeaderCellDef mat-sort-header\n                                            class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                            To Date\n                                        </mat-header-cell>\n                                        <mat-cell *matCellDef=\"let row\"\n                                            class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                            {{ row.toDate }}\n                                        </mat-cell>\n                                    </ng-container>\n\n                                    <ng-container matColumnDef=\"description\">\n                                        <mat-header-cell *matHeaderCellDef mat-sort-header\n                                            class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                            Description\n                                        </mat-header-cell>\n                                        <mat-cell *matCellDef=\"let row\"\n                                            class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                            {{ row.description }}\n                                        </mat-cell>\n                                    </ng-container>\n\n                                </ng-container>\n\n                                <mat-header-row *matHeaderRowDef=\"displayedColumns\">\n                                </mat-header-row>\n                                <mat-row *matRowDef=\"let row; columns: displayedColumns;\" [style.cursor]=\"'pointer'\"\n                                    matRipple>\n                                </mat-row>\n\n\n                                <tr *matNoDataRow>\n                                    <td colspan=\"{{ displayedColumns.length }}\"> No data matching the filter \"{{ input\n                                        }}\"</td>\n                                </tr>\n                            </mat-table>\n                            <div class=\"m-2 mx-2\" *ngIf=\"loading || downloadLoading\">\n                                <mat-progress-bar color=\"primary\" mode=\"indeterminate\">\n                                </mat-progress-bar>\n                            </div>\n                            <div *ngIf=\"loading\" class=\"tbl-spinner\">\n                                <mat-progress-spinner color=\"primary\" [diameter]=\"40\" mode=\"indeterminate\">\n                                </mat-progress-spinner>\n                            </div>\n\n                            <mat-paginator [pageSize]=\"10\" [pageSizeOptions]=\"[2, 5, 10, 20, 30, 40, 50, 100]\"\n                                aria-label=\"Select page of users\">\n                            </mat-paginator>\n\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</section>","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { BulkUploadsComponent } from './bulk-uploads/bulk-uploads.component';\nimport { RoutePrivilegeGuard } from 'src/app/erp-procurement/data/services/_AccessControlAuthGuard.service';\n\nconst routes: Routes = [\n  {\n    path: \"bulk-uploads\",\n    component: BulkUploadsComponent,\n    canActivate: [RoutePrivilegeGuard],\n    data: {\n      clientName: \"HumanResourceModule\",\n      requiredPrivilege: [\"Dashboard\"],\n    },\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class HrMiscellaneousRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { HrMiscellaneousRoutingModule } from './hr-miscellaneous-routing.module';\nimport { BulkUploadsComponent } from './bulk-uploads/bulk-uploads.component';\nimport { ComponentsModule } from 'src/app/shared/components/components.module';\nimport { SharedModule } from 'src/app/shared/shared.module';\nimport { DashboardModule } from '../dashboard/dashboard.module';\n\n\n@NgModule({\n  declarations: [\n    BulkUploadsComponent\n  ],\n  imports: [\n    CommonModule,\n    HrMiscellaneousRoutingModule,\n\n    DashboardModule,\n    ComponentsModule,\n    SharedModule,\n  ]\n})\nexport class HrMiscellaneousModule { }\n"],"names":[],"sourceRoot":"webpack:///"}