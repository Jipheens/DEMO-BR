{"version":3,"file":"src_app_erp-hr_modules_payroll_payroll_module_ts.js","mappings":"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","sources":["./src/app/core/service/token-storage.service.ts","./src/app/erp-hr/data/payroll-services/emp-gratuity.service.ts","./src/app/erp-hr/modules/payroll/allowance-payroll/all-payroll-allowances/all-payroll-allowances.component.ts","./src/app/erp-hr/modules/payroll/allowance-payroll/all-payroll-allowances/all-payroll-allowances.component.html","./src/app/erp-hr/modules/payroll/allowance-payroll/manage-payroll-allowances/manage-payroll-allowances.component.ts","./src/app/erp-hr/modules/payroll/allowance-payroll/manage-payroll-allowances/manage-payroll-allowances.component.html","./src/app/erp-hr/modules/payroll/close-payrolls/close-payroll/close-payroll.component.ts","./src/app/erp-hr/modules/payroll/close-payrolls/close-payroll/close-payroll.component.html","./src/app/erp-hr/modules/payroll/close-payrolls/manage-close-payroll/manage-close-payroll.component.ts","./src/app/erp-hr/modules/payroll/close-payrolls/manage-close-payroll/manage-close-payroll.component.html","./src/app/erp-hr/modules/payroll/deductions-payroll/all-payroll-other-deductions/all-payroll-other-deductions.component.ts","./src/app/erp-hr/modules/payroll/deductions-payroll/all-payroll-other-deductions/all-payroll-other-deductions.component.html","./src/app/erp-hr/modules/payroll/deductions-payroll/manage-payroll-other-deductions/manage-payroll-other-deductions.component.ts","./src/app/erp-hr/modules/payroll/deductions-payroll/manage-payroll-other-deductions/manage-payroll-other-deductions.component.html","./src/app/erp-hr/modules/payroll/generate-payroll/generate-payroll.component.ts","./src/app/erp-hr/modules/payroll/generate-payroll/generate-payroll.component.html","./src/app/erp-hr/modules/payroll/gratuity-payroll/gratuity-payroll.component.ts","./src/app/erp-hr/modules/payroll/gratuity-payroll/gratuity-payroll.component.html","./src/app/erp-hr/modules/payroll/open-payroll/open-payroll.component.ts","./src/app/erp-hr/modules/payroll/open-payroll/open-payroll.component.html","./src/app/erp-hr/modules/payroll/p-nine-generation/p-nine-generation.component.ts","./src/app/erp-hr/modules/payroll/p-nine-generation/p-nine-generation.component.html","./src/app/erp-hr/modules/payroll/payroll-dashboard-page/payroll-dashboard-page.component.ts","./src/app/erp-hr/modules/payroll/payroll-dashboard-page/payroll-dashboard-page.component.html","./src/app/erp-hr/modules/payroll/payroll-routing.module.ts","./src/app/erp-hr/modules/payroll/payroll.module.ts","./src/app/erp-hr/modules/payroll/payslips/dialogs/manage-payslip-record/manage-payslip-record.component.ts","./src/app/erp-hr/modules/payroll/payslips/dialogs/manage-payslip-record/manage-payslip-record.component.html","./src/app/erp-hr/modules/payroll/payslips/manage-payslips/manage-payslips.component.ts","./src/app/erp-hr/modules/payroll/payslips/manage-payslips/manage-payslips.component.html","./src/app/erp-hr/modules/payroll/payslips/process-payslips/process-payslips.component.ts","./src/app/erp-hr/modules/payroll/payslips/process-payslips/process-payslips.component.html","./src/app/erp-hr/modules/payroll/reconcile-payroll/reconcile-payroll.component.ts","./src/app/erp-hr/modules/payroll/reconcile-payroll/reconcile-payroll.component.html","./src/app/erp-hr/modules/payroll/reports-payroll/reports-payroll.component.ts","./src/app/erp-hr/modules/payroll/reports-payroll/reports-payroll.component.html","./src/app/erp-hr/modules/payroll/salary-increment-payroll/all-salary-increments/all-salary-increments.component.ts","./src/app/erp-hr/modules/payroll/salary-increment-payroll/all-salary-increments/all-salary-increments.component.html","./src/app/erp-hr/modules/payroll/salary-increment-payroll/manage-salary-increments/manage-salary-increments.component.ts","./src/app/erp-hr/modules/payroll/salary-increment-payroll/manage-salary-increments/manage-salary-increments.component.html","./src/app/erp-hr/modules/payroll/staff-loans-payroll/all-payroll-staff-loans/all-payroll-staff-loans.component.ts","./src/app/erp-hr/modules/payroll/staff-loans-payroll/all-payroll-staff-loans/all-payroll-staff-loans.component.html","./src/app/erp-hr/modules/payroll/staff-loans-payroll/manage-payroll-staff-loans/manage-payroll-staff-loans.component.ts","./src/app/erp-hr/modules/payroll/staff-loans-payroll/manage-payroll-staff-loans/manage-payroll-staff-loans.component.html","./src/app/erp-hr/modules/payroll/to-finance-payroll/all-to-finance/all-to-finance.component.ts","./src/app/erp-hr/modules/payroll/to-finance-payroll/all-to-finance/all-to-finance.component.html","./src/app/erp-hr/modules/payroll/to-finance-payroll/manage-to-finance/manage-to-finance.component.ts","./src/app/erp-hr/modules/payroll/to-finance-payroll/manage-to-finance/manage-to-finance.component.html","./src/app/shared/services/files.service.ts","./node_modules/rxjs/dist/esm/internal/AsyncSubject.js"],"sourcesContent":["import { HttpClient, HttpHeaders } from \"@angular/common/http\";\nimport { Injectable } from \"@angular/core\";\nimport {\n  MatSnackBar,\n  MatSnackBarHorizontalPosition,\n  MatSnackBarVerticalPosition,\n} from \"@angular/material/snack-bar\";\nimport { Router } from \"@angular/router\";\nimport { Observable, map, tap } from \"rxjs\";\nimport { environment } from \"src/environments/environment.prod\";\n\nconst TOKEN_KEY = \"auth-token\";\nconst USER_KEY = \"auth-user\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class TokenStorageService {\n  headers = new HttpHeaders().set(\"Content-Type\", \"application/json\");\n\n  horizontalPosition: MatSnackBarHorizontalPosition = \"end\";\n  verticalPosition: MatSnackBarVerticalPosition = \"top\";\n\n  constructor(\n    private http: HttpClient,\n  \n  ) {}\n\n  public getToken(): string | null {\n    // get the name of the cookie to retrieve\n    const name = \"accessToken\";\n    // split the document.cookie string into an array of individual cookies\n    const cookieArray = document.cookie.split(\";\");\n    // loop through the cookies to find the one with the matching name\n    for (let i = 0; i < cookieArray.length; i++) {\n      let cookie = cookieArray[i];\n      //console.log(\"cookieArray: \", cookieArray)\n      // remove any leading spaces from the cookie string\n      while (cookie.charAt(0) === \" \") {\n        cookie = cookie.substring(1);\n      }\n      // if the cookie name matches the desired name, return the cookie value\n      if (cookie.indexOf(name) === 0) {\n        return cookie.substring(name.length, cookie.length);\n      }\n    }\n    // if the cookie was not found, return null\n    return null;\n  }\n\n  public saveUser(user: any): void {\n    window.localStorage.removeItem(USER_KEY);\n    window.localStorage.setItem(USER_KEY, JSON.stringify(user));\n  }\n\n  public getUser(): any {\n    const user = window.localStorage.getItem(USER_KEY);\n    if (user) {\n      return JSON.parse(user);\n    }\n\n    return null;\n  }\n  public getEmppf(){\n    return this.getUser().empPfNo\n  }\n  \n}\n","import { HttpClient, HttpErrorResponse, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment.prod';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EmpGratuityService {\n  headers = new HttpHeaders().set('Content-Type', 'application/json');\n  baseURL = `${environment.baseUrlHR}/api/v1/gratuity`;\n  constructor(private http: HttpClient) { }\n\n  read(params:any): Observable<any> {\n    let API_URL = `${this.baseURL}/all/contributions`;\n    return this.http.get(API_URL,{params:params, headers: this.headers, withCredentials: false })\n      .pipe(\n        map((res) => {\n          return res || {}\n        }),\n        catchError(this.errorMgmt)\n      )\n  }\n  errorMgmt(error: HttpErrorResponse) {\n    let errorMessage = '';\n    if (error.error instanceof ErrorEvent) {\n      errorMessage = error.error.message;\n    } else {\n      errorMessage = `${error.error.message}`;\n    }\n    return throwError(errorMessage);\n  }\n}\n","import { SelectionModel } from '@angular/cdk/collections';\nimport { HttpParams } from '@angular/common/http';\nimport { Component, OnInit, ViewChild } from '@angular/core';\nimport { MatDialog, MatDialogConfig } from '@angular/material/dialog';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { Router } from '@angular/router';\nimport { Subject, takeUntil, Subscription } from 'rxjs';\nimport { MonthsService } from 'src/@core/Models/months/months.service';\nimport { NotificationServiceService } from 'src/@core/Models/Notification/notification-service.service';\nimport { CustomAllowanceService } from 'src/app/erp-hr/data/payroll-services/custom-allowance.service';\nimport { PrivilegeService } from 'src/app/erp-hr/data/PrivilegeService';\nimport { SnackbarService } from 'src/app/shared/services/snackbar.service';\nimport Swal from 'sweetalert2';\nimport { ManagePayrollAllowancesComponent } from '../manage-payroll-allowances/manage-payroll-allowances.component';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'app-all-payroll-allowances',\n  templateUrl: './all-payroll-allowances.component.html',\n  styleUrls: ['./all-payroll-allowances.component.sass']\n})\nexport class AllPayrollAllowancesComponent implements OnInit {\n  displayedColumns: string[] = [\n    \"select\",\n    \"id\",\n    \"employeePfNo\",\n    \"employeeName\",\n    \"description\",\n    \"allowanceType\",\n    \"isTaxable\",\n    \"periodM\",\n    \"periodY\",\n    \"amount\",   \n    \"status\",\n    \"verifiedFlag\",\n    \"deletedFlag\",\n    \"action\",\n  ];\n\n  loading: boolean = false;\n  data: any;\n  error: any;\n  dialogConfig: any;\n  destroy$: Subject<boolean> = new Subject<boolean>();\n\n  dataSource!: MatTableDataSource<any>;\n  @ViewChild(MatPaginator) paginator!: MatPaginator;\n  @ViewChild(MatSort) sort!: MatSort;\n\n  selection = new SelectionModel<any>(true, []);\n\n  downloadLoading: boolean = false;\n  posting: boolean = false;\n  showForm: boolean = false;\n\n  Form:FormGroup\n  months: string[] = [\n    'January', 'February', 'March', 'April', 'May', 'June',\n    'July', 'August', 'September', 'October', 'November', 'December'\n  ];\n  constructor(\n    private dialog: MatDialog,\n    private notificationAPI: NotificationServiceService,\n    private customAllowanceAPI: CustomAllowanceService,\n    private snackbar: SnackbarService,\n    private fb: FormBuilder\n  ) {}\n\n  ngOnInit(): void {\n\n    const currentYear = new Date().getFullYear();\n    const currentMonthIndex = new Date().getMonth();\n    const currentMonthName = this.months[currentMonthIndex];\n\n    this.Form = this.fb.group({\n      year: [currentYear.toString(), Validators.required],\n      month: [currentMonthName, Validators.required],\n      status: ['ALL']\n    });\n    this.Form.valueChanges.subscribe(() => {\n      this.getData();\n    });\n\n    this.getData();\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next(true);\n    this.destroy$.complete();\n  }\n\n  //****************************************************************************************** */\n  reqStatuses: any[] = [\n    { name: \"ALL\" },\n    { name: \"PENDING\" },\n    { name: \"APPROVED\" },\n    { name: \"RETURNED\" },\n    { name: \"REJECTED\" },\n  ];\n\n  selectedStatus: string = \"ALL\";\n  getSelectSelectedStatus() {\n   // this.getData();\n  }\n  getSelectedStatus(status: any) {\n    this.Form.patchValue({\n      status: status,\n    });\n\n  //  this.getData();\n  }\n\n\n  getData() {\n    this.loading = true;\n    this.dataSource = new MatTableDataSource([]);\n    this.dataSource.paginator = this.paginator;\n    this.dataSource.sort = this.sort;\n    this.selectedStatus = this.Form.value.status;\n    let params = new HttpParams()\n    .set(\"month\", this.Form.value.month)\n    .set(\"year\", this.Form.value.year)\n    .set(\"status\", this.Form.value.status);\n\n    this.customAllowanceAPI\n      .read(params)\n      .pipe(takeUntil(this.destroy$))\n      .subscribe({\n        next: (res) => {\n          if (res.statusCode === 302) {\n            this.data = res.entity;\n            console.log(\"Allowances displayed on table\", this.data);\n\n            this.loading = false;\n            this.dataSource = new MatTableDataSource(this.data);\n            this.dataSource.paginator = this.paginator;\n            this.dataSource.sort = this.sort;\n          } else {\n            this.loading = false;\n          }\n        },\n        error: (err) => {\n          this.loading = false;\n          this.notificationAPI.alertWarning(\n            \"Server Error: \" + err.message\n          );\n        },\n        complete: () => {},\n      });\n  }\n  refresh() {\n    this.getData();\n  }\n\n  mngRecord(action: any, record?: any) {\n    console.log(\"this.action:; \", action);\n    console.log(\"this.record:; \", record);\n\n    const dialogConfig = new MatDialogConfig();\n    dialogConfig.disableClose = false;\n    dialogConfig.disableClose = true;\n    dialogConfig.width = \"800px\";\n    dialogConfig.data = {\n      action: action,\n      record: record,\n    };\n    const dialogRef = this.dialog.open(ManagePayrollAllowancesComponent, dialogConfig);\n    dialogRef.afterClosed().subscribe((result) => {\n      console.log(\"result:::\", result);\n\n      this.getData();\n    });\n  }\n  deleteRecord(id: number) {\n    Swal.fire({\n      title: \"Are you sure?\",\n      text: \"THIS RECORD WILL BE DELETED PERMANENTLY!!\",\n      icon: \"warning\",\n      showCancelButton: true,\n      confirmButtonColor: \"#3085d6\",\n      cancelButtonColor: \"#d33\",\n      confirmButtonText: \"Yes, delete it!\",\n    }).then((result) => {\n      if (result.isConfirmed) {\n        this.loading = true;\n        this.customAllowanceAPI\n          .delete(id)\n          .pipe(takeUntil(this.destroy$))\n          .subscribe({\n            next: (res) => {\n              if (res.statusCode == 200) {\n                this.getData();\n                this.loading = false;\n                this.notificationAPI.alertSuccess(\n                  \"RECORD DELETED SUCCESSFULLY\"\n                );\n              } else {\n                this.getData();\n                this.loading = false;\n                this.notificationAPI.alertWarning(res.message);\n              }\n            },\n            error: (err) => {\n              this.loading = false;\n              this.notificationAPI.alertSuccess(\"Server Error: \" + err.message);\n            },\n            complete: () => {},\n          });\n      }\n    });\n  }\n\n  input: any;\n  applyFilter(event: Event) {\n    const filterValue = (event.target as HTMLInputElement).value;\n    this.input = filterValue;\n    this.dataSource.filter = filterValue.trim().toLowerCase();\n    if (this.dataSource.paginator) {\n      this.dataSource.paginator.firstPage();\n    }\n  }\n\n  // ****************************************************************************************************************************\n  selectedRows: any[] = [];\n  atleastOneSelected: boolean = false;\n  isAllSelected() {\n    const numSelected = this.selection.selected.length;\n    const numRows = this.dataSource.data.length;\n    return numSelected === numRows;\n  }\n  masterToggle() {\n    if (this.isAllSelected()) {\n      this.selection.clear();\n      return;\n    }\n\n    this.selection.select(...this.dataSource.data);\n  }\n  checkboxLabel(row?: any): string {\n    if (!row) {\n      return `${this.isAllSelected() ? \"deselect\" : \"select\"} all`;\n    }\n    return `${this.selection.isSelected(row) ? \"deselect\" : \"select\"} row ${\n      row.position + 1\n    }`;\n  }\n\n  expSelected() {\n    this.atleastOneSelected = true;\n    this.selectedRows = this.selection.selected;\n\n    console.log(\"this.selectedRows: \", this.selectedRows);\n  }\n\n  hasAccess: boolean = true;\n  processMultipleRows(status: any) {\n    let privilege = \"Validate Expenses\";\n\n    // this.hasAccess = this.accessControlService.hasPrivilege(\"FinanceModule\", [\n    //   privilege,\n    // ]);\n\n    if (this.hasAccess) {\n      Swal.fire({\n    title: '<span style=\"font-size: 20px;\">Enter Verifier Remarks</span>',\n    input: \"textarea\",\n    inputPlaceholder: \"Type your remarks here...\",\n    confirmButtonText: \"Submit\",\n    showCancelButton: true,\n    cancelButtonText: \"Cancel\",\n    icon: \"info\",\n\n    inputValidator: (value) => {\n          if (!value) {\n            return \"Please enter your remarks\";\n          }\n        },\n      }).then((result) => {\n        if (result.isConfirmed) {\n          const verifierRemarks = result.value;\n\n          const processedRows = this.selectedRows.map((element) => {\n            return {\n              id: element.id,\n              status: status,\n              verifierRemarks: verifierRemarks,\n            };\n          });\n\n          console.log(\"LOG: \", processedRows);\n\n          this.customAllowanceAPI\n            .validateBulkAllowances(processedRows)\n            .pipe(takeUntil(this.destroy$))\n            .subscribe({\n              next: (res) => {\n                console.log(\"res: \", res);\n                if (res.statusCode == 201 || 200 || 302) {\n                  this.snackbar.showNotification(\n                    \"snackbar-success\",\n                    res.message\n                  );\n\n                  this.selection = new SelectionModel<any>(true, []);\n                  this.selection.clear();\n                } else {\n                  this.snackbar.showNotification(\n                    \"snackbar-danger\",\n                    res.message\n                  );\n                }\n              },\n              error: (err) => {\n                this.snackbar.showNotification(\"snackbar-danger\", err.message);\n              },\n              complete: () => {\n                this.getData();\n              },\n            }),\n            Subscription;\n        } else {\n          this.selection = new SelectionModel<any>(true, []);\n          this.selection.clear();\n        }\n      });\n    }\n  }\n}\n","<section class=\"content\">\n    <div class=\"content-block\">\n        <div class=\"block-header\">\n            <!-- breadcrumb -->\n            <app-breadcrumb [title]=\"'All Allowances'\" [items]=\"['Allowances']\" [active_item]=\"'All Allowances'\">\n            </app-breadcrumb>\n        </div>\n\n        <app-gen-widgets></app-gen-widgets>\n\n        <div class=\"row\">\n            <div class=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\">\n                <div class=\"card\">\n\n                    <div class=\"body\">\n                        <div class=\"table-responsive\">\n                            <div class=\"materialTableHeader\">\n                                <div class=\"row\">\n                                    <div class=\"col-8\">\n                                        <ul class=\"header-buttons-left ms-0\">\n                                            <li class=\"dropdown\">\n                                                <h2>Allowances</h2>\n                                            </li>\n                                            <li class=\"dropdown m-l-20\">\n                                                <label for=\"search-input\"><i\n                                                        class=\"material-icons search-icon\">search</i></label>\n                                                <input placeholder=\"Filter...\" type=\"text\" (keyup)=\"applyFilter($event)\"\n                                                    #filter class=\"browser-default search-field\"\n                                                    aria-label=\"Search box\">\n                                            </li>\n                                            <li>\n                                                <div class=\"m-l-10\" matTooltip=\"ADD\">\n                                                    <button mat-mini-fab color=\"primary\" (click)=\"mngRecord('Add','')\">\n                                                        <mat-icon class=\"col-white\">add</mat-icon>\n                                                    </button>\n                                                </div>\n                                            </li>\n                                            <li>\n                                                <div class=\"m-l-10\" matTooltip=\"REFRESH\">\n                                                    <button mat-mini-fab color=\"primary\" (click)=\"refresh()\">\n                                                        <mat-icon class=\"col-white\">refresh</mat-icon>\n                                                    </button>\n                                                </div>\n                                            </li>\n                                            <li *ngIf=\"selection.selected.length > 0\">\n                                                <div class=\"m-l-10\" matTooltip=\"APPROVE\">\n                                                    <button mat-mini-fab color=\"primary\"\n                                                        (click)=\"processMultipleRows('APPROVED')\"\n                                                        class=\"mat-button-custom\">\n                                                        <mat-icon class=\"col-white\">check</mat-icon>\n                                                    </button>\n                                                </div>\n                                            </li>\n                                            <li *ngIf=\"selection.selected.length > 0\">\n                                                <div class=\"m-l-10\" matTooltip=\"REJECT\">\n                                                    <button mat-mini-fab color=\"warn\"\n                                                        (click)=\"processMultipleRows('REJECTED')\"\n                                                        class=\"mat-button-custom\">\n                                                        <mat-icon class=\"col-white\">cancel</mat-icon>\n                                                    </button>\n                                                </div>\n                                            </li>\n                                            <li *ngIf=\"selection.selected.length > 0\">\n                                                <div class=\"m-l-10\" matTooltip=\"RETURN\">\n                                                    <button mat-mini-fab color=\"accent\"\n                                                        (click)=\"processMultipleRows('RETURNED')\"\n                                                        class=\"mat-button-custom\">\n                                                        <mat-icon class=\"col-white\">undo</mat-icon>\n                                                    </button>\n                                                </div>\n                                            </li>\n                                        </ul>\n                                    </div>\n                                    <div class=\"col-4\">\n                                        <ul class=\"header-buttons\">\n                                            <li>\n                                                <div class=\"export-button m-l-10\" matTooltip=\"XLSX\">\n                                                    <img src=\"assets/images/icons/xlsx.png\" alt=\"\"\n                                                        (click)=\"exporter.exportTable('xlsx', {fileName:'assets-list', sheet: 'sheet1'})\" />\n                                                </div>\n                                            </li>\n                                            <li>\n                                                <div class=\"export-button m-l-10\" matTooltip=\"CSV\">\n                                                    <img src=\"assets/images/icons/csv.png\" alt=\"\"\n                                                        (click)=\"exporter.exportTable('csv')\" />\n                                                </div>\n                                            </li>\n                                            <li>\n                                                <div class=\"export-button m-l-10\" matTooltip=\"JSON\">\n                                                    <img src=\"assets/images/icons/json.png\" alt=\"\"\n                                                        (click)=\"exporter.exportTable('json')\" />\n                                                </div>\n                                            </li>\n                                            <li>\n                                                <div class=\"export-button m-l-10\" matTooltip=\"TXT\">\n                                                    <img src=\"assets/images/icons/txt.png\" alt=\"\"\n                                                        (click)=\"exporter.exportTable('txt')\" />\n                                                </div>\n                                            </li>\n                                        </ul>\n                                    </div>\n                                </div>\n                            </div>\n\n                            <div class=\"materialTableHeader mt-2\">\n                                <div class=\"row\">\n                                    <div class=\"col-2\">\n                                        <form [formGroup]=\"Form\">\n                                            <div class=\"row\">\n                                                <div class=\"col-9\">\n                                                    <mat-form-field class=\"example-full-width\" appearance=\"fill\">\n                                                        <mat-label>Year</mat-label>\n                                                        <input matInput formControlName=\"year\" />\n                                                        <mat-error *ngIf=\"\n                                                    Form.get('year').hasError('required')\n                                                  \">\n                                                            Please Enter Year\n                                                        </mat-error>\n                                                    </mat-form-field>\n                                                </div>\n\n                                            </div>\n                                        </form>\n                                    </div>\n                                    <div class=\"col-2\">\n                                        <form [formGroup]=\"Form\">\n                                            <mat-form-field class=\"example-full-width\" appearance=\"fill\">\n                                                <mat-label>Month</mat-label>\n                                                <mat-select formControlName=\"month\">\n                                                    <mat-option *ngFor=\"let month of months\" [value]=\"month\">{{\n                                                        month }}</mat-option>\n                                                </mat-select>\n                                                <mat-error *ngIf=\"Form.get('month').hasError('required')\">Please select\n                                                    a month</mat-error>\n                                            </mat-form-field>\n                                        </form>\n                                    </div>\n\n\n\n                                </div>\n                            </div>\n\n                            <div class=\"materialTableHeader mt-2\">\n                                <div class=\"row\">\n                                    <div class=\"col-2\">\n                                        <form [formGroup]=\"Form\">\n\n                                            <mat-form-field class=\"example-full-width\" appearance=\"fill\">\n                                                <mat-label>Status</mat-label>\n\n                                                <mat-select formControlName=\"status\">\n                                                    <mat-option *ngFor=\"let reqStatus of reqStatuses\"\n                                                        [value]=\"reqStatus.name\">{{ reqStatus.name\n                                                        }}\n                                                    </mat-option>\n                                                </mat-select>\n\n                                                <mat-error *ngIf=\"Form.get('status').hasError('required')\">\n                                                    Please select Status\n                                                </mat-error>\n                                            </mat-form-field>\n\n                                        </form>\n                                    </div>\n                                    <div class=\"col-10\">\n                                        <div class=\"button-container mt-1\">\n                                            <button mat-raised-button [class.active]=\"selectedStatus === 'ALL'\"\n                                                class=\"mat-button verified\" (click)=\"getSelectedStatus('ALL')\">\n                                                <mat-icon>check_circle</mat-icon>\n                                                ALL\n                                            </button>\n\n                                            <button mat-raised-button [class.active]=\"selectedStatus === 'PENDING'\"\n                                                class=\"mat-button pending\" (click)=\"getSelectedStatus('PENDING')\">\n                                                <mat-icon>pending</mat-icon>\n                                                PENDING\n                                            </button>\n\n                                            <button mat-raised-button [class.active]=\"selectedStatus === 'APPROVED'\"\n                                                class=\"mat-button approved\" (click)=\"getSelectedStatus('APPROVED')\">\n                                                <mat-icon>thumb_up</mat-icon>\n                                                APPROVED\n                                            </button>\n                                            <button mat-raised-button [class.active]=\"selectedStatus === 'RETURNED'\"\n                                                class=\"mat-button returned\" (click)=\"getSelectedStatus('RETURNED')\">\n                                                <mat-icon>reply</mat-icon>\n                                                RETURNED\n                                            </button>\n                                            <button mat-raised-button [class.active]=\"selectedStatus === 'REJECTED'\"\n                                                class=\"mat-button rejected\" (click)=\"getSelectedStatus('REJECTED')\">\n                                                <mat-icon>cancel</mat-icon>\n                                                REJECTED\n                                            </button>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n\n\n                            <mat-table #table matTableExporter [dataSource]=\"dataSource\" matSort class=\"mat-cell\"\n                                #exporter=\"matTableExporter\">\n\n                                <ng-container matColumnDef=\"select\">\n                                    <mat-header-cell *matHeaderCellDef [ngClass]=\"'tbl-col-width-per-4'\">\n                                        <mat-checkbox color=\"primary\" (change)=\"$event ? masterToggle() : null\"\n                                            [checked]=\"selection.hasValue() && isAllSelected()\"\n                                            [indeterminate]=\"selection.hasValue() && !isAllSelected()\"\n                                            [ngClass]=\"'tbl-checkbox'\" (change)=\"expSelected()\">\n                                        </mat-checkbox>\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" [ngClass]=\"'tbl-col-width-per-4'\">\n                                        <mat-checkbox color=\"primary\" (click)=\"$event.stopPropagation()\"\n                                            (change)=\"$event ? selection.toggle(row) : null\"\n                                            [checked]=\"selection.isSelected(row)\" [ngClass]=\"'tbl-checkbox'\"\n                                            [aria-label]=\"checkboxLabel(row)\" (change)=\"expSelected()\">\n                                        </mat-checkbox>\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"id\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-10\">\n                                        ID\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-10\">\n                                        {{ row.id }}\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"description\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Description\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        {{ row.description }}\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"employeeName\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Employee Name\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        {{ row.employeeName }}\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"periodM\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Period Month\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        {{ row.periodM }}\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"periodY\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Period Year\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        {{ row.periodY }}\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"amount\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Amount\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        {{ row.amount }}\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"allowanceType\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Allowance Type\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        {{ row.allowanceType }}\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"isTaxable\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Is Taxable\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        {{ row.isTaxable }}\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"employeePfNo\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Employee PF No.\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        {{ row.employeePfNo }}\n                                    </mat-cell>\n                                </ng-container>\n\n\n                                <ng-container matColumnDef=\"postedTime\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Posted Time\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        {{ row.postedTime | date:'short' }}\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"status\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Status\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row; let i = index\"\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-20\"\n                                        (click)=\"$event.stopPropagation()\">\n                                        <ng-container [ngSwitch]=\"row.status\">\n                                            <button *ngSwitchCase=\"'APPROVED'\"\n                                                class=\"badge badge-solid-green btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-check-circle\"></i>&nbsp;\n                                                {{ row.status }}\n                                            </button>\n                                            <button *ngSwitchCase=\"'REJECTED'\"\n                                                class=\"badge badge-solid-red btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-times-circle\"></i>&nbsp;\n                                                {{ row.status }}\n                                            </button>\n                                            <button *ngSwitchCase=\"'RETURNED'\"\n                                                class=\"badge badge-solid-brown btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-undo-alt\"></i>&nbsp;\n                                                {{ row.status }}\n                                            </button>\n                                            <button *ngSwitchCase=\"'PENDING'\"\n                                                class=\"badge badge-solid-blue btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-exclamation-circle\"></i>&nbsp;\n                                                {{ row.status }}\n                                            </button>\n                                            <button *ngSwitchDefault class=\"badge badge-solid-brown btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-question-circle\"></i>&nbsp;\n                                                {{ row.status }}\n                                            </button>\n                                        </ng-container>\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"verifiedFlag\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Verified\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        <ng-container *ngIf=\"row.verifiedFlag === 'Y'; else notVerified\">\n                                            <button class=\"badge badge-solid-green btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-check\"></i>&nbsp; Verified\n                                            </button>\n                                        </ng-container>\n                                        <ng-template #notVerified>\n                                            <button class=\"badge badge-solid-red btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-times\"></i>&nbsp; Not Verified\n                                            </button>\n                                        </ng-template>\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"deletedFlag\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Deleted\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        <ng-container *ngIf=\"row.deletedFlag === 'Y'; else notDeleted\">\n                                            <button class=\"badge badge-solid-red btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-trash\"></i>&nbsp; Deleted\n                                            </button>\n                                        </ng-container>\n                                        <ng-template #notDeleted>\n                                            <button class=\"badge badge-solid-green btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-check\"></i>&nbsp; Active\n                                            </button>\n                                        </ng-template>\n                                    </mat-cell>\n                                </ng-container>\n\n\n\n\n\n\n\n                                <ng-container matColumnDef=\"action\">\n                                    <mat-header-cell class=\"column-nowrap psl-3 tbl-col-width-per-15 pr-0\"\n                                        *matHeaderCellDef>\n                                        Action\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row; let i = index\"\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-15 pr-0\">\n\n                                        <button mat-icon-button color=\"accent\" (click)=\"$event.stopPropagation()\"\n                                            (click)=\"mngRecord('Update',row)\" class=\"tbl-action-btn\">\n                                            <app-feather-icons [icon]=\"'edit'\" [class]=\"'tbl-fav-edit'\">\n                                            </app-feather-icons>\n                                        </button>\n\n                                        <button mat-icon-button color=\"primary\" (click)=\"$event.stopPropagation()\"\n                                            (click)=\"mngRecord('View',row)\" class=\"tbl-action-btn\">\n                                            <app-feather-icons [icon]=\"'eye'\" [class]=\"'tbl-fav-eye'\">\n                                            </app-feather-icons>\n                                        </button>\n                                        <!-- \n                                        <button mat-icon-button color=\"primary\" (click)=\"$event.stopPropagation()\"\n                                            (click)=\"lockOrUnlockAccount(row)\" class=\"tbl-action-btn\">\n                                            <mat-icon>{{ row.isAcctActive === 'Y' ? 'lock' : 'lock_open' }}</mat-icon>\n                                        </button> -->\n\n                                        <button mat-icon-button color=\"accent\" (click)=\"$event.stopPropagation()\"\n                                            (click)=\"deleteRecord(row.id)\" class=\"tbl-action-btn\">\n                                            <app-feather-icons [icon]=\"'trash-2'\" [class]=\"'tbl-fav-delete'\">\n                                            </app-feather-icons>\n                                        </button>\n                                    </mat-cell>\n                                </ng-container>\n                                <mat-header-row *matHeaderRowDef=\"displayedColumns\">\n                                </mat-header-row>\n                                <mat-row *matRowDef=\"let row; columns: displayedColumns;\"  \n                                    [style.cursor]=\"'pointer'\" matRipple>\n                                </mat-row>\n\n\n                                <tr *matNoDataRow>\n                                    <td colspan=\"{{ displayedColumns.length }}\"> No data matching the filter \"{{ input\n                                        }}\"</td>\n                                </tr>\n                            </mat-table>\n                            <div class=\"m-2 mx-2\" *ngIf=\"loading || downloadLoading\">\n                                <mat-progress-bar color=\"primary\" mode=\"indeterminate\">\n                                </mat-progress-bar>\n                            </div>\n                            <div *ngIf=\"loading\" class=\"tbl-spinner\">\n                                <mat-progress-spinner color=\"primary\" [diameter]=\"40\" mode=\"indeterminate\">\n                                </mat-progress-spinner>\n                            </div>\n\n                            <mat-paginator [pageSize]=\"10\" [pageSizeOptions]=\"[2, 5, 10, 20, 30, 40, 50, 100]\"\n                                aria-label=\"Select page of users\">\n                            </mat-paginator>\n\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</section>","import { Component, Inject, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA, MatDialog, MatDialogConfig } from '@angular/material/dialog';\nimport { Subject, takeUntil, Subscription } from 'rxjs';\nimport { BranchService } from 'src/app/erp-hr/data/configuration-services/branch.service';\nimport { EmployeesLookupComponent } from 'src/app/erp-hr/hr-lookups/configurations-lookups/employees-lookup/employees-lookup.component';\nimport { FilesService } from 'src/app/shared/services/files.service';\nimport { SnackbarService } from 'src/app/shared/services/snackbar.service';\nimport { AllEmployeesComponent } from '../../../employees/all-employees/all-employees.component';\nimport { CustomAllowanceService } from 'src/app/erp-hr/data/payroll-services/custom-allowance.service';\n\n@Component({\n  selector: 'app-manage-payroll-allowances',\n  templateUrl: './manage-payroll-allowances.component.html',\n  styleUrls: ['./manage-payroll-allowances.component.sass']\n})\nexport class ManagePayrollAllowancesComponent implements OnInit {\n\n  mngForm: FormGroup;\n\n  destroy$: Subject<boolean> = new Subject<boolean>();\n\n  downloadLoading: boolean = false;\n\n  pageFunction: string = \"Add\";\n\n  hideSubmit: boolean = false;\n  isLoading: boolean = true;\n\n  allowanceTypes = [\n    { name: \"Acting Allowance\" },\n    { name: \"Relocation allowance\" },\n    { name: \"Airtime allowance\" },\n    { name: \"Leave Allowance\" },\n    { name: \"Christmas Bonaza Reward\" },\n    { name: \"Pamoja Tunawiri Reward\" },\n    { name: \"Other Earnings\" }\n  ];\n  \n  months: string[] = [\n    'January', 'February', 'March', 'April', 'May', 'June',\n    'July', 'August', 'September', 'October', 'November', 'December'\n  ];\n  constructor(\n    public dialogRef: MatDialogRef<AllEmployeesComponent>,\n    @Inject(MAT_DIALOG_DATA) public data,\n    private fb: FormBuilder,\n    private snackbar: SnackbarService,\n    private customAllowanceAPI: CustomAllowanceService,\n    private dialog: MatDialog,\n    private filesService: FilesService\n  ) {}\n\n  ngOnInit(): void {\n    console.log(\"LOG DATA = \", this.data);\n    this.pageFunction = this.data.action;\n    this.formData = this.data.record\n    this.generateForm(this.formData);\n\n    this.getPage();\n  }\n  ngAfterViewInit() {\n    if (this.data.action !== \"Add\") {\n      this.generateForm(this.formData);\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next(true);\n    this.destroy$.complete();\n  }\n\n  disableTransactionType: boolean = true;\n  getPage() {\n    this.disableTransactionType = true;\n    console.log(\"this.data.action :\", this.data.action);\n    if (this.data.action === \"Add\") {\n      this.isLoading = false;\n      this.generateForm(this.data.record);\n    } else if (this.data.action === \"Update\") {\n      this.generateForm(this.data.record);\n    } else if (this.data.action === \"View\") {\n      this.generateForm(this.data.record);\n      this.activateViewMode();\n    }\n    this.isLoading = false;\n  }\n\n  formData: any;\n\n  generateForm(formData?): void {\n    console.log(\"generateForm formData :: \", formData);\n    this.mngForm = this.fb.group({\n      id: [formData?.id ?? ''],\n      employeePfNo: [formData?.employeePfNo ?? '', Validators.required],\n      amount: [formData?.amount ?? '', Validators.required],\n      isTaxable: [formData?.isTaxable ?? 'N'],\n      periodM: [formData?.periodM ?? '', Validators.required],\n      periodY: [formData?.periodY ?? '', Validators.required],\n      description: [formData?.description ?? '', Validators.required],\n      allowanceType: [formData?.allowanceType ?? '', Validators.required]\n    });\n  }\n  \n\n  \n  viewMode: boolean = false;\n  activateViewMode() {\n    this.viewMode = true;\n  }\n\n  posting: boolean = false;\n\n  response: any;\n  submit() {\n    console.log(\"this.mngForm.value: \", this.mngForm.value);\n    this.posting = true;\n    if (this.pageFunction === \"Add\") {\n      this.customAllowanceAPI.create(this.mngForm.value)\n        .pipe(takeUntil(this.destroy$))\n        .subscribe({\n          next: (res) => {\n            this.response = res;\n            console.log(\"res: \", res);\n            if (res.statusCode == 201) {\n              this.snackbar.showNotification(\n                \"snackbar-success\",\n                res.message\n              );\n            } else {\n              this.snackbar.showNotification(\n                \"snackbar-danger\",\n                res.message\n              );\n            }\n          },\n          error: (err) => {\n            this.snackbar.showNotification(\"snackbar-danger\", err.message);\n          },\n          complete: () => {\n            this.posting = false;\n            setTimeout(() => {\n              this.onNoClick();\n            }, 3000);\n          },\n        }),\n        Subscription;\n    } else if (this.pageFunction === \"Update\") {\n      this.customAllowanceAPI.update(this.mngForm.value)\n        .pipe(takeUntil(this.destroy$))\n        .subscribe({\n          next: (res) => {\n            this.response = res;\n            console.log(\"resres:: \", res);\n            if (res.statusCode == 200) {\n              this.snackbar.showNotification(\n                \"snackbar-success\",\n                res.message\n              );\n            } else {\n              this.snackbar.showNotification(\n                \"snackbar-danger\",\n                res.message\n              );\n            }\n          },\n          error: (err) => {\n            this.snackbar.showNotification(\"snackbar-danger\", err.message);\n          },\n          complete: () => {\n            this.posting = false;\n            setTimeout(() => {\n              this.onNoClick();\n            }, 3000);\n          },\n        }),\n        Subscription;\n    }\n  }\n\n  onNoClick(): void {\n    this.dialogRef.close({ event: \"close\", data: this.response });\n  }\n\n  selectedItem: any\n  employeeLookup() {\n    const dialogConfig = new MatDialogConfig();\n    dialogConfig.disableClose = false;\n    dialogConfig.disableClose = true;\n    dialogConfig.width = \"800px\";\n    dialogConfig.data = {\n      action: \"SingleEmployee\",\n      selected: this.selectedItem,\n    };\n    const dialogRef = this.dialog.open(EmployeesLookupComponent, dialogConfig);\n    dialogRef.afterClosed().subscribe((res) => {\n      if (res && res.data && res.data.length > 0) {\n        this.mngForm.patchValue({\n          employeePfNo: res.data[0].empNo,\n          \n        });\n      }\n    });\n  }\n \n}\n","<div class=\"addContainer\">\n  <div class=\"modalHeader\">\n    <div class=\"editRowModal\">\n      <div class=\"modalHeader clearfix\">\n        <img src=\"assets/images/em.png\" width=\"30px\" height=\"30px\" alt=\"\" />\n        <div class=\"modal-about\">\n          <div class=\"font-weight-bold p-t-5 ms-2 me-2 font-17\">\n            <strong>{{ pageFunction }} Allowance</strong>\n          </div>\n        </div>\n      </div>\n    </div>\n    <button mat-icon-button (click)=\"dialogRef.close()\" aria-label=\"Close dialog\">\n      <mat-icon>close</mat-icon>\n    </button>\n  </div>\n  <div mat-dialog-content>\n    <div class=\"m-2\" *ngIf=\"isLoading\">\n      <mat-progress-bar color=\"primary\" mode=\"indeterminate\">\n      </mat-progress-bar>\n    </div>\n\n    <ng-container>\n      <h6 class=\"mx-2\">Allowance Details</h6>\n\n      <form class=\"register-form mx-2\" [formGroup]=\"mngForm\">\n        <div class=\"row\">\n          <div class=\"col-xl-6 col-lg-6 col-md-6 col-sm-6 mb-1\">\n            <mat-form-field class=\"example-full-width\" appearance=\"outline\">\n              <mat-label>Employee PF No</mat-label>\n              <input matInput formControlName=\"employeePfNo\" required />\n              <mat-icon matSuffix (click)=\"employeeLookup()\">search</mat-icon>\n              <mat-error *ngIf=\"mngForm.get('employeePfNo').hasError('required')\">\n                Employee PF No is required\n              </mat-error>\n            </mat-form-field>\n          </div>\n\n          <div class=\"col-xl-6 col-lg-6 col-md-6 col-sm-6 mb-1\">\n            <mat-form-field class=\"example-full-width\" appearance=\"outline\">\n              <mat-label>Amount</mat-label>\n              <input matInput formControlName=\"amount\" required />\n              <mat-icon matSuffix>compare_arrows</mat-icon>\n              <mat-error *ngIf=\"mngForm.get('amount').hasError('required')\">\n                Amount is required\n              </mat-error>\n            </mat-form-field>\n          </div>\n\n          <div class=\"col-xl-6 col-lg-6 col-md-6 col-sm-6 mb-1\">\n            <mat-form-field class=\"example-full-width\" appearance=\"outline\">\n              <mat-label>Period Month</mat-label>\n\n              <mat-select formControlName=\"periodM\" required>\n                <mat-option *ngFor=\"let item of months\" [value]=\"item\">{{ item }}</mat-option>\n              </mat-select>\n\n             \n              <mat-error *ngIf=\"mngForm.get('periodM').hasError('required')\">\n                Period Month is required\n              </mat-error>\n            </mat-form-field>\n          </div>\n\n          <div class=\"col-xl-6 col-lg-6 col-md-6 col-sm-6 mb-1\">\n            <mat-form-field class=\"example-full-width\" appearance=\"outline\">\n              <mat-label>Period Year</mat-label>\n              <input matInput formControlName=\"periodY\" required />\n              <mat-icon matSuffix>compare_arrows</mat-icon>\n              <mat-error *ngIf=\"mngForm.get('periodY').hasError('required')\">\n                Period Year is required\n              </mat-error>\n            </mat-form-field>\n          </div>\n\n          <div class=\"col-xl-6 col-lg-6 col-md-6 col-sm-6 mb-1\">\n            <mat-form-field class=\"example-full-width\" appearance=\"outline\">\n              <mat-label>Allowance Type</mat-label>\n              <mat-select formControlName=\"allowanceType\" required>\n                <mat-option *ngFor=\"let type of allowanceTypes\" [value]=\"type.name\">{{ type.name }}</mat-option>\n              </mat-select>\n             \n              <mat-error *ngIf=\"mngForm.get('allowanceType').hasError('required')\">\n                Allowance Type is required\n              </mat-error>\n            </mat-form-field>\n          </div>\n\n          <div class=\"col-xl-6 col-lg-6 col-md-6 col-sm-6 mb-1\">\n            <section class=\"example-section\">\n                <label class=\"example-margin\">Is Taxable:</label>\n                <mat-radio-group formControlName=\"isTaxable\">\n                    <mat-radio-button class=\"example-margin\" value=\"Y\">Yes</mat-radio-button>\n                    <mat-radio-button class=\"example-margin\" value=\"N\">No</mat-radio-button>\n                </mat-radio-group>\n            </section>\n\n            <mat-error *ngIf=\"\nmngForm.get('isTaxable').invalid &&\nmngForm.get('isTaxable').touched\n\">\n                Please select an option for Has Allowance\n            </mat-error>\n        </div>\n\n          \n          <div class=\"col-xl-12 col-lg-12 col-md-12 col-sm-12 mb-1\">\n            <mat-form-field class=\"example-full-width\" appearance=\"outline\">\n              <mat-label>Description</mat-label>\n              <textarea matInput formControlName=\"description\" required></textarea>\n              <mat-icon matSuffix>compare_arrows</mat-icon>\n              <mat-error *ngIf=\"mngForm.get('description').hasError('required')\">\n                Description is required\n              </mat-error>\n            </mat-form-field>\n          </div>\n\n\n        </div>\n      </form>\n\n      <div class=\"row\" *ngIf=\"!viewMode\">\n        <div class=\"col-xl-12 col-lg-12 col-md-12 col-sm-12 mb-1\">\n          <div class=\"example-button-row\" align=\"end\">\n            <button class=\"btn-space\" mat-raised-button color=\"primary\" [class.auth-spinner]=\"posting\"\n              [disabled]=\"!mngForm.valid || posting\" (click)=\"submit()\">\n              {{ pageFunction }} Allowance\n            </button>\n            <button mat-raised-button color=\"warn\" (click)=\"onNoClick()\" tabindex=\"-1\">\n              Cancel\n            </button>\n          </div>\n        </div>\n      </div>\n    </ng-container>\n  </div>\n</div>","import { SelectionModel } from '@angular/cdk/collections';\nimport { HttpParams } from '@angular/common/http';\nimport { Component, OnInit, ViewChild } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { Subject, takeUntil, Subscription } from 'rxjs';\nimport { NotificationServiceService } from 'src/@core/Models/Notification/notification-service.service';\nimport { SnackbarService } from 'src/app/shared/services/snackbar.service';\nimport Swal from 'sweetalert2';\nimport { PayrollCircleService } from 'src/app/erp-hr/data/payroll-services/payroll-circle.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-close-payroll',\n  templateUrl: './close-payroll.component.html',\n  styleUrls: ['./close-payroll.component.sass']\n})\nexport class ClosePayrollComponent implements OnInit {\n  displayedColumns: string[] = [\n    // \"select\",\n    \"index\",\n    \"payrollCircleCode\",\n    \"periodY\",\n    \"periodM\",\n    \"closingDate\",\n    \"closedBy\",\n    \"status\",\n    \"closurePaidEmployees\",\n    \"totalClosingGrossPay\",\n    \"totalCLosingDeductions\",\n    \"totalCLosingAllowances\",\n    \"action\"\n  ];\n\n  loading: boolean = false;\n  data: any;\n  error: any;\n  dialogConfig: any;\n  destroy$: Subject<boolean> = new Subject<boolean>();\n\n  dataSource!: MatTableDataSource<any>;\n  @ViewChild(MatPaginator) paginator!: MatPaginator;\n  @ViewChild(MatSort) sort!: MatSort;\n\n  selection = new SelectionModel<any>(true, []);\n\n  downloadLoading: boolean = false;\n  posting: boolean = false;\n  showForm: boolean = false;\n\n  Form: FormGroup;\n  months: string[] = [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\",\n  ];\n  constructor(\n    private dialog: MatDialog,\n    private notificationAPI: NotificationServiceService,\n    private payrollCircleAPi: PayrollCircleService,\n    private snackbar: SnackbarService,\n    private fb: FormBuilder,\n    private router: Router,\n\n  ) { }\n\n  ngOnInit(): void {\n    const currentYear = new Date().getFullYear();\n    const currentMonthIndex = new Date().getMonth();\n    const currentMonthName = this.months[currentMonthIndex];\n\n    this.Form = this.fb.group({\n      year: [currentYear.toString(), Validators.required],\n      month: [currentMonthName, Validators.required],\n      status: \"PENDING\",\n    });\n    this.Form.valueChanges.subscribe(() => {\n      this.getData();\n    });\n\n    this.getData();\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next(true);\n    this.destroy$.complete();\n  }\n\n  //**************************************************************************************************** */\n  reqStatuses: any[] = [\n    { name: \"PENDING\" },\n    // { name: \"VERIFIED\" },\n    { name: \"APPROVED\" },\n    { name: \"RETURNED\" },\n    { name: \"REJECTED\" },\n  ];\n  selectedStatus: string = \"PENDING\";\n  getSelectSelectedStatus() {\n   // this.getData();\n  }\n  getSelectedStatus(status: any) {\n    this.Form.patchValue({\n      status: status,\n    });\n\n  //  this.getData();\n  }\n  getSelectedApprover(approver: any) {\n    this.Form.patchValue({\n      approver: approver,\n    });\n\n    this.getData();\n  }\n  getData() {\n    this.loading = true;\n    this.dataSource = new MatTableDataSource([]);\n    this.dataSource.paginator = this.paginator;\n    this.dataSource.sort = this.sort;\n\n    this.selectedStatus = this.Form.value.status;\n\n\n    this.payrollCircleAPi\n      .findAll()\n      .pipe(takeUntil(this.destroy$))\n      .subscribe({\n        next: (res) => {\n          console.log(\"res:: \", res);\n          if (res.statusCode === 200) {\n            this.data = res.entity;\n            console.log(\"Allowances displayed on table\", this.data);\n\n            this.loading = false;\n            this.dataSource = new MatTableDataSource(this.data);\n            this.dataSource.paginator = this.paginator;\n            this.dataSource.sort = this.sort;\n          } else {\n            this.loading = false;\n          }\n        },\n        error: (err) => {\n          this.loading = false;\n          this.notificationAPI.alertWarning(\"Server Error: \" + err.message);\n        },\n        complete: () => { },\n      });\n  }\n  refresh() {\n    this.getData();\n  }\n\n  input: any;\n  applyFilter(event: Event) {\n    const filterValue = (event.target as HTMLInputElement).value;\n    this.input = filterValue;\n    this.dataSource.filter = filterValue.trim().toLowerCase();\n    if (this.dataSource.paginator) {\n      this.dataSource.paginator.firstPage();\n    }\n  }\n\n  // ****************************************************************************************************************************\n  selectedRows: any[] = [];\n  atleastOneSelected: boolean = false;\n  isAllSelected() {\n    const numSelected = this.selection.selected.length;\n    const numRows = this.dataSource.data.length;\n    return numSelected === numRows;\n  }\n  masterToggle() {\n    if (this.isAllSelected()) {\n      this.selection.clear();\n      return;\n    }\n\n    this.selection.select(...this.dataSource.data);\n  }\n  checkboxLabel(row?: any): string {\n    if (!row) {\n      return `${this.isAllSelected() ? \"deselect\" : \"select\"} all`;\n    }\n    return `${this.selection.isSelected(row) ? \"deselect\" : \"select\"} row ${row.position + 1\n      }`;\n  }\n\n  expSelected() {\n    this.atleastOneSelected = true;\n    this.selectedRows = this.selection.selected;\n\n    console.log(\"this.selectedRows: \", this.selectedRows);\n  }\n\n  hasAccess: boolean = true;\n  processMultipleRows(status: any) {\n    let privilege = \"Validate Expenses\";\n\n    // this.hasAccess = this.accessControlService.hasPrivilege(\"FinanceModule\", [\n    //   privilege,\n    // ]);\n\n    if (this.hasAccess) {\n      Swal.fire({\n    title: '<span style=\"font-size: 20px;\">Enter Verifier Remarks</span>',\n    input: \"textarea\",\n    inputPlaceholder: \"Type your remarks here...\",\n    confirmButtonText: \"Submit\",\n    showCancelButton: true,\n    cancelButtonText: \"Cancel\",\n    icon: \"info\",\n\n    inputValidator: (value) => {\n          if (!value) {\n            return \"Please enter your remarks\";\n          }\n        },\n      }).then((result) => {\n        if (result.isConfirmed) {\n          const verifierRemarks = result.value;\n\n          const processedRows = this.selectedRows.map((element) => {\n            return {\n              id: element.id,\n              status: status,\n              verifierRemarks: verifierRemarks,\n            };\n          });\n\n          console.log(\"LOG: \", processedRows);\n\n          // this.payrollCircleAPi\n          //   .approvedSelectedPayrolls(processedRows)\n          //   .pipe(takeUntil(this.destroy$))\n          //   .subscribe({\n          //     next: (res) => {\n          //       console.log(\"res: \", res);\n          //       if (res.statusCode == 201 || 200 || 302) {\n          //         this.snackbar.showNotification(\n          //           \"snackbar-success\",\n          //           res.message\n          //         );\n\n          //         this.selection = new SelectionModel<any>(true, []);\n          //         this.selection.clear();\n          //       } else {\n          //         this.snackbar.showNotification(\n          //           \"snackbar-danger\",\n          //           res.message\n          //         );\n          //       }\n          //     },\n          //     error: (err) => {\n          //       this.snackbar.showNotification(\"snackbar-danger\", err.message);\n          //     },\n          //     complete: () => {\n          //       this.getData();\n          //     },\n          //   }),\n          //   Subscription;\n        } else {\n          this.selection = new SelectionModel<any>(true, []);\n          this.selection.clear();\n        }\n      });\n    }\n  }\n\n  //********************************************************************************************************** */\n\n  lockOrUnlockPayroll(row: any) {\n    Swal.fire({\n      title: 'Are you sure?',\n      text: `Do you want to ${row.status === 'CLOSED' ? 'open' : 'close'} this payroll?`,\n      icon: 'warning',\n      showCancelButton: true,\n      confirmButtonColor: '#3085d6',\n      cancelButtonColor: '#d33',\n      confirmButtonText: 'Yes',\n      cancelButtonText: 'No'\n    }).then((result) => {\n      if (result.isConfirmed) {\n        if (row.status === 'OPEN') { \n          let route = \"/erp-hr/payroll/manage-close-payroll\";\n          this.router.navigate([route], {\n            queryParams: {\n              requestCode: row.id,\n              month: row.periodM,\n              year:   row.periodY,\n              payrollCircleCode: row.payrollCircleCode\n            },\n          });\n        }\n        \n      else if (row.status === 'CLOSED') {\n          let params = {id: row.id}\n          this.payrollCircleAPi\n            .reopen(params)\n            .pipe(takeUntil(this.destroy$))\n            .subscribe({\n              next: (res) => {\n                console.log(\"res:: \", res);\n                if (res.statusCode === 200) {\n                  Swal.fire('Success!', 'Payroll opened successfully.', 'success');\n                  this.getData();\n                } else {\n                  this.loading = false;\n                  this.notificationAPI.alertWarning(\"Server Error: \" + res.message);\n                  this.getData();\n                }\n              },\n              error: (err) => {\n                this.loading = false;\n                this.notificationAPI.alertWarning(\"Server Error: \" + err.message);\n                this.getData();\n              },\n              complete: () => {  this.getData();},\n            });\n         \n        } \n      }\n    });\n  }\n\n}\n","<section class=\"content\">\n    <div class=\"content-block\">\n        <div class=\"block-header\">\n            <!-- breadcrumb -->\n            <app-breadcrumb [title]=\"'Close Payroll'\" [items]=\"['Payroll']\" [active_item]=\"'Close Payroll'\">\n            </app-breadcrumb>\n        </div>\n\n        <app-gen-widgets></app-gen-widgets>\n\n        <div class=\"row\">\n            <div class=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\">\n                <div class=\"card\">\n\n                    <div class=\"body\">\n                        <div class=\"table-responsive\">\n                            <div class=\"materialTableHeader\">\n                                <div class=\"row\">\n                                    <div class=\"col-8\">\n                                        <ul class=\"header-buttons-left ms-0\">\n                                            <li class=\"dropdown\">\n                                                <h2>Close Payroll</h2>\n                                            </li>\n                                            <li class=\"dropdown m-l-20\">\n                                                <label for=\"search-input\"><i\n                                                        class=\"material-icons search-icon\">search</i></label>\n                                                <input placeholder=\"Filter...\" type=\"text\" (keyup)=\"applyFilter($event)\"\n                                                    #filter class=\"browser-default search-field\"\n                                                    aria-label=\"Search box\">\n                                            </li>\n                                            \n                                            <li>\n                                                <div class=\"m-l-10\" matTooltip=\"REFRESH\">\n                                                    <button mat-mini-fab color=\"primary\" (click)=\"refresh()\">\n                                                        <mat-icon class=\"col-white\">refresh</mat-icon>\n                                                    </button>\n                                                </div>\n                                            </li>\n                                            <!-- <li *ngIf=\"selection.selected.length > 0\">\n                                                <div class=\"m-l-10\" matTooltip=\"APPROVE\">\n                                                    <button mat-mini-fab color=\"primary\"\n                                                        (click)=\"processMultipleRows('APPROVED')\"\n                                                        class=\"mat-button-custom\">\n                                                        <mat-icon class=\"col-white\">check</mat-icon>\n                                                    </button>\n                                                </div>\n                                            </li>\n                                            <li *ngIf=\"selection.selected.length > 0\">\n                                                <div class=\"m-l-10\" matTooltip=\"REJECT\">\n                                                    <button mat-mini-fab color=\"warn\"\n                                                        (click)=\"processMultipleRows('REJECTED')\"\n                                                        class=\"mat-button-custom\">\n                                                        <mat-icon class=\"col-white\">cancel</mat-icon>\n                                                    </button>\n                                                </div>\n                                            </li>\n                                            <li *ngIf=\"selection.selected.length > 0\">\n                                                <div class=\"m-l-10\" matTooltip=\"RETURN\">\n                                                    <button mat-mini-fab color=\"accent\"\n                                                        (click)=\"processMultipleRows('RETURNED')\"\n                                                        class=\"mat-button-custom\">\n                                                        <mat-icon class=\"col-white\">undo</mat-icon>\n                                                    </button>\n                                                </div>\n                                            </li> -->\n\n                                          \n                                        </ul>\n                                    </div>\n                                    <div class=\"col-4\">\n                                        <ul class=\"header-buttons\">\n                                            <li>\n                                                <div class=\"export-button m-l-10\" matTooltip=\"XLSX\">\n                                                    <img src=\"assets/images/icons/xlsx.png\" alt=\"\"\n                                                        (click)=\"exporter.exportTable('xlsx', {fileName:'assets-list', sheet: 'sheet1'})\" />\n                                                </div>\n                                            </li>\n                                            <li>\n                                                <div class=\"export-button m-l-10\" matTooltip=\"CSV\">\n                                                    <img src=\"assets/images/icons/csv.png\" alt=\"\"\n                                                        (click)=\"exporter.exportTable('csv')\" />\n                                                </div>\n                                            </li>\n                                            <li>\n                                                <div class=\"export-button m-l-10\" matTooltip=\"JSON\">\n                                                    <img src=\"assets/images/icons/json.png\" alt=\"\"\n                                                        (click)=\"exporter.exportTable('json')\" />\n                                                </div>\n                                            </li>\n                                            <li>\n                                                <div class=\"export-button m-l-10\" matTooltip=\"TXT\">\n                                                    <img src=\"assets/images/icons/txt.png\" alt=\"\"\n                                                        (click)=\"exporter.exportTable('txt')\" />\n                                                </div>\n                                            </li>\n                                        </ul>\n                                    </div>\n                                </div>\n                            </div>\n                       \n\n                            <mat-table #table matTableExporter [dataSource]=\"dataSource\" matSort class=\"mat-cell\"\n                                #exporter=\"matTableExporter\">\n\n                                <ng-container matColumnDef=\"select\">\n                                    <mat-header-cell *matHeaderCellDef [ngClass]=\"'tbl-col-width-per-4'\">\n                                        <mat-checkbox color=\"primary\" (change)=\"$event ? masterToggle() : null\"\n                                            [checked]=\"selection.hasValue() && isAllSelected()\"\n                                            [indeterminate]=\"selection.hasValue() && !isAllSelected()\"\n                                            [ngClass]=\"'tbl-checkbox'\" (change)=\"expSelected()\">\n                                        </mat-checkbox>\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" [ngClass]=\"'tbl-col-width-per-4'\">\n                                        <mat-checkbox color=\"primary\" (click)=\"$event.stopPropagation()\"\n                                            (change)=\"$event ? selection.toggle(row) : null\"\n                                            [checked]=\"selection.isSelected(row)\" [ngClass]=\"'tbl-checkbox'\"\n                                            [aria-label]=\"checkboxLabel(row)\" (change)=\"expSelected()\">\n                                        </mat-checkbox>\n                                    </mat-cell>\n                                </ng-container>\n\n\n\n                                <ng-container matColumnDef=\"index\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-10\">\n                                        Index\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row; let i =index\"\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-10\">\n                                        {{ i+1 }}\n                                    </mat-cell>\n                                </ng-container>\n\n                               \n                                <ng-container matColumnDef=\"payrollCircleCode\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                      Payroll Circle Code\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                      {{ row.payrollCircleCode }}\n                                    </mat-cell>\n                                  </ng-container>\n                                  \n                                  <ng-container matColumnDef=\"periodY\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                      Period Y\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                      {{ row.periodY }}\n                                    </mat-cell>\n                                  </ng-container>\n                                  \n                                  <ng-container matColumnDef=\"periodM\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                      Period M\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                      {{ row.periodM }}\n                                    </mat-cell>\n                                  </ng-container>\n                                  \n                                  <ng-container matColumnDef=\"closingDate\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                      Closing Date\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                      {{ row.closingDate }}\n                                    </mat-cell>\n                                  </ng-container>\n                                  \n                                  <ng-container matColumnDef=\"closedBy\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                      Closed By\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                      {{ row.closedBy }}\n                                    </mat-cell>\n                                  </ng-container>\n                      \n                                  \n                                  <ng-container matColumnDef=\"closurePaidEmployees\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                      Closure Paid Employees\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                      {{ row.closurePaidEmployees }}\n                                    </mat-cell>\n                                  </ng-container>\n                                  \n                                  <ng-container matColumnDef=\"totalClosingGrossPay\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                      Total Closing Gross Pay\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                      {{ row.totalClosingGrossPay }}\n                                    </mat-cell>\n                                  </ng-container>\n                                  \n                                  <ng-container matColumnDef=\"totalCLosingDeductions\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                      Total Closing Deductions\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                      {{ row.totalCLosingDeductions }}\n                                    </mat-cell>\n                                  </ng-container>\n                                  \n                                  <ng-container matColumnDef=\"totalCLosingAllowances\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                      Total Closing Allowances\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                      {{ row.totalCLosingAllowances }}\n                                    </mat-cell>\n                                  </ng-container>\n                                  \n\n                                  <ng-container matColumnDef=\"status\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                      Status\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                      <ng-container *ngIf=\"row.status === 'CLOSED'; else isOpen\">\n                                        <button class=\"badge badge-solid-green btn btn btn-sm m-1\">\n                                          <i class=\"fas fa-check\"></i>&nbsp; {{row.status}}\n                                        </button>\n                                      </ng-container>\n                                      <ng-template #isOpen>\n                                        <ng-container *ngIf=\"row.status === 'OPEN'; else notOpen\">\n                                          <button class=\"badge badge-solid-blue btn btn btn-sm m-1\">\n                                            <i class=\"fas fa-door-open\"></i>&nbsp; {{row.status}}\n                                          </button>\n                                        </ng-container>\n                                        <ng-template #notOpen>\n                                          <button class=\"badge badge-solid-red btn btn btn-sm m-1\">\n                                            <i class=\"fas fa-times\"></i>&nbsp; {{row.status}}\n                                          </button>\n                                        </ng-template>\n                                      </ng-template>\n                                    </mat-cell>\n                                  </ng-container>\n                  \n\n                                <ng-container matColumnDef=\"verifiedFlag\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Verified\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        <ng-container *ngIf=\"row.verifiedFlag === 'Y'; else notVerified\">\n                                            <button class=\"badge badge-solid-green btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-check\"></i>&nbsp; Verified\n                                            </button>\n                                        </ng-container>\n                                        <ng-template #notVerified>\n                                            <button class=\"badge badge-solid-red btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-times\"></i>&nbsp; Not Verified\n                                            </button>\n                                        </ng-template>\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"deletedFlag\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Deleted\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        <ng-container *ngIf=\"row.deletedFlag === 'Y'; else notDeleted\">\n                                            <button class=\"badge badge-solid-red btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-trash\"></i>&nbsp; Deleted\n                                            </button>\n                                        </ng-container>\n                                        <ng-template #notDeleted>\n                                            <button class=\"badge badge-solid-green btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-check\"></i>&nbsp; Active\n                                            </button>\n                                        </ng-template>\n                                    </mat-cell>\n                                </ng-container>\n\n\n\n\n\n\n\n                                <ng-container matColumnDef=\"action\">\n                                    <mat-header-cell class=\"column-nowrap psl-3 tbl-col-width-per-15 pr-0\" *matHeaderCellDef>\n                                      Action\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row; let i = index\" class=\"column-nowrap psl-3 tbl-col-width-per-15 pr-0\">\n                                      <button mat-icon-button color=\"accent\" (click)=\"$event.stopPropagation(); lockOrUnlockPayroll(row)\" class=\"tbl-action-btn\">\n                                        <mat-icon>{{ row.status === 'CLOSED' ? 'lock_open' : 'lock' }}</mat-icon>\n                                      </button>\n                                    </mat-cell>\n                                  </ng-container>\n                                  \n                                  \n                                <mat-header-row *matHeaderRowDef=\"displayedColumns\">\n                                </mat-header-row>\n                                <mat-row *matRowDef=\"let row; columns: displayedColumns;\" \n                                    [style.cursor]=\"'pointer'\" matRipple>\n                                </mat-row>\n\n\n                                <tr *matNoDataRow>\n                                    <td colspan=\"{{ displayedColumns.length }}\"> No data matching the filter \"{{ input\n                                        }}\"</td>\n                                </tr>\n                            </mat-table>\n                            <div class=\"m-2 mx-2\" *ngIf=\"loading || downloadLoading\">\n                                <mat-progress-bar color=\"primary\" mode=\"indeterminate\">\n                                </mat-progress-bar>\n                            </div>\n                            <div *ngIf=\"loading\" class=\"tbl-spinner\">\n                                <mat-progress-spinner color=\"primary\" [diameter]=\"40\" mode=\"indeterminate\">\n                                </mat-progress-spinner>\n                            </div>\n\n                            <mat-paginator [pageSize]=\"10\" [pageSizeOptions]=\"[2, 5, 10, 20, 30, 40, 50, 100]\"\n                                aria-label=\"Select page of users\">\n                            </mat-paginator>\n\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</section>","import { SelectionModel } from '@angular/cdk/collections';\nimport { Component, OnInit, ViewChild } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { MatDialog, MatDialogConfig } from '@angular/material/dialog';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { Subject, takeUntil, Subscription } from 'rxjs';\nimport { NotificationServiceService } from 'src/@core/Models/Notification/notification-service.service';\nimport { BranchService } from 'src/app/erp-hr/data/configuration-services/branch.service';\nimport { SnackbarService } from 'src/app/shared/services/snackbar.service';\nimport Swal from 'sweetalert2';\nimport { ManageBranchesComponent } from '../../../configurations/branches/dialogs/manage-branches/manage-branches.component';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { HttpParams } from '@angular/common/http';\nimport { PayrollAnalysisService } from 'src/app/erp-hr/data/payroll-services/payroll-analysis.service';\nimport { PayrollCircleService } from 'src/app/erp-hr/data/payroll-services/payroll-circle.service';\n\n@Component({\n  selector: 'app-manage-close-payroll',\n  templateUrl: './manage-close-payroll.component.html',\n  styleUrls: ['./manage-close-payroll.component.scss']\n})\nexport class ManageClosePayrollComponent implements OnInit {\n\n  displayedColumns: string[] = [\n    \"category\",\n    \"prevPayroll\",\n    \"currPayroll\",\n    \"changeRate\"\n  ];\n\n  loading: boolean = false;\n  data: any;\n  error: any;\n  dialogConfig: any;\n  destroy$: Subject<boolean> = new Subject<boolean>();\n\n  dataSource!: MatTableDataSource<any>;\n  @ViewChild(MatPaginator) paginator!: MatPaginator;\n  @ViewChild(MatSort) sort!: MatSort;\n\n  selection = new SelectionModel<any>(true, []);\n\n  downloadLoading: boolean = false;\n  posting: boolean = false;\n  showForm: boolean = false;\n\n  Form: FormGroup\n  mngForm: FormGroup\n\n  months: string[] = [\n    'JANUARY', 'FEBRUARY', 'MARCH', 'APRIL', 'MAY', 'JUNE',\n    'JULY', 'AUGUST', 'SEPTEMBER', 'OCTOBER', 'NOVEMBER', 'DECEMBER'\n  ];\n\n  constructor(\n    private dialog: MatDialog,\n    private notificationAPI: NotificationServiceService,\n    private branchAPI: BranchService,\n    private snackbar: SnackbarService,\n    private fb: FormBuilder,\n    private route: ActivatedRoute,\n    private payrollAnalysisAPI: PayrollAnalysisService,\n    private payrollCircleAPi: PayrollCircleService,\n    private router: Router,\n\n\n\n  ) { }\n\n  ngOnInit(): void {\n\n\n    this.route.queryParams.subscribe((params) => {\n      console.log(\"res\", params);\n\n      if (params.hasOwnProperty(\"year\")) {\n        this.currPeriodY = params[\"year\"]\n        this.currPeriodM = params[\"month\"]\n        this.payrollCircleCode = params[\"payrollCircleCode\"]\n      }\n    });\n\n    this.generateForm();\n    this.initDates()\n\n    this.Form = this.fb.group({\n      year: [this.currPeriodY, Validators.required],\n      month: [this.currPeriodM, Validators.required],\n    });\n    this.Form.valueChanges.subscribe(() => {\n      this.getData();\n    });\n\n    this.getData();\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next(true);\n    this.destroy$.complete();\n  }\n\n\n  generateForm(formData?): void {\n    console.log(\"generateForm formData :: \", formData);\n    this.mngForm = this.fb.group({\n      remarks: [formData?.remarks ?? '', Validators.required],\n      validsignature: [formData?.validsignature ?? '', Validators.required],\n      \n    });\n  }\n  // remarks:['', Validators.required],\n  //     validsignature:['', Validators.required]\n  payrollCircleCode: any\n\n  currPeriodY: any\n  currPeriodM: any\n  currIsFinal: any\n  prevMonthINT: any\n  prevIsFinal: any\n  prevPeriodM: any\n  prevPeriodY: any\n  initDates() {\n\n    this.currIsFinal = 'N'\n    this.prevMonthINT = (new Date().getMonth() === 0) ? 11 : new Date().getMonth() - 1;\n    this.prevPeriodM = new Date(Date.UTC(0, this.prevMonthINT)).toLocaleString('en-US', { month: 'long' }).toUpperCase();\n    this.prevIsFinal = 'Y'\n    if (this.prevPeriodM == \"DECEMBER\") {\n      this.prevPeriodY = this.currPeriodY - 1;\n    } else {\n      this.prevPeriodY = this.currPeriodY;\n    }\n  }\n  //****************************************************************************************** */\n\n\n  getData() {\n    this.loading = true;\n    this.dataSource = new MatTableDataSource([]);\n    this.dataSource.paginator = this.paginator;\n    this.dataSource.sort = this.sort;\n\n    let param = new HttpParams()\n      .set('prevPeriodY', this.prevPeriodY)\n      .set('prevPeriodM', this.prevPeriodM)\n      .set('prevIsFinal', this.prevIsFinal)\n      .set('currPeriodY', this.currPeriodY)\n      .set('currPeriodM', this.currPeriodM)\n      .set('currIsFinal', this.currIsFinal);\n    console.log(param)\n    this.payrollAnalysisAPI.findAll(param)\n      .pipe(takeUntil(this.destroy$))\n      .subscribe({\n        next: (res) => {\n\n          console.log('RES:: ', res)\n\n          if (res.statusCode === 200) {\n            this.data = res.entity;\n            console.log(\"Data displayed on table\", this.data);\n\n            this.loading = false;\n            this.dataSource = new MatTableDataSource(this.data);\n            this.dataSource.paginator = this.paginator;\n            this.dataSource.sort = this.sort;\n          } else {\n            this.loading = false;\n\n            this.notificationAPI.alertWarning(\n              res.message\n            );\n          }\n        },\n        error: (err) => {\n          this.loading = false;\n          this.notificationAPI.alertWarning(\n            \"Server Error: \" + err.message\n          );\n        },\n        complete: () => { },\n      });\n  }\n  refresh() {\n    this.getData();\n  }\n\n\n  input: any;\n  applyFilter(event: Event) {\n    const filterValue = (event.target as HTMLInputElement).value;\n    this.input = filterValue;\n    this.dataSource.filter = filterValue.trim().toLowerCase();\n    if (this.dataSource.paginator) {\n      this.dataSource.paginator.firstPage();\n    }\n  }\n\n\n  onSubmit() {\n    this.loading = true;\n  \n    // Using SweetAlert to confirm the action\n    Swal.fire({\n      title: 'Confirm',\n      text: 'Are you sure you want to close payroll for this period?',\n      icon: 'warning',\n      showCancelButton: true,\n      confirmButtonColor: '#3085d6',\n      cancelButtonColor: '#d33',\n      confirmButtonText: 'Yes, close it!'\n    }).then((result) => {\n      if (result.isConfirmed) {\n        if (this.mngForm.valid) {\n          if (this.mngForm.controls.validsignature.value == 'FINAL ENTRY') {\n            let param = new HttpParams()\n              .set('payrollCircleCode', this.payrollCircleCode)\n              .set('closingRemarks', this.mngForm.controls.remarks.value);\n  \n            this.payrollCircleAPi.close(param).subscribe(res => {\n              this.loading = false;\n              if (res.statusCode == 200) {\n                this.loading = false;\n                Swal.fire({\n                  icon: 'success',\n                  title: 'Success!',\n                  text: res.message\n                }).then((result) => {\n                  if (result.isConfirmed || result.isDismissed) {\n                    this.router.navigate(['/erp-hr/payroll/close-payroll'] );\n                  }\n                });\n              } else {\n                this.loading = false;\n                Swal.fire({\n                  icon: 'error',\n                  title: 'Oops...',\n                  text: res.message\n                });\n              }\n            });\n          } else {\n            this.loading = false;\n            Swal.fire({\n              icon: 'warning',\n              title: 'Warning',\n              text: 'YOU MUST ENTER THE CORRECT APPROVAL SIGNATURE'\n            });\n          }\n        } else {\n          this.loading = false;\n          Swal.fire({\n            icon: 'warning',\n            title: 'Warning',\n            text: 'INVALID FORM DATA'\n          });\n        }\n      } else {\n        this.loading = false;\n        this.getData();\n      }\n    });\n  }\n  onNoClick(){\n    this.router.navigate(['/erp-hr/payroll/close-payroll'] );\n  }\n  // ****************************************************************************************************************************\n\n}\n","<section class=\"content\">\n    <div class=\"content-block\">\n        <div class=\"block-header\">\n            <!-- breadcrumb -->\n            <app-breadcrumb [title]=\"'Manage Payroll Closure'\" [items]=\"['Payroll']\" [active_item]=\"'Manage Payroll Closure'\">\n            </app-breadcrumb>\n        </div>\n\n        <app-gen-widgets></app-gen-widgets>\n\n        <div class=\"row\">\n            <div class=\"col-lg-8 col-md-8 col-sm-12 col-xs-12\">\n                <div class=\"card\">\n\n                    <div class=\"body\">\n                        <div class=\"table-responsive\">\n                            <div class=\"materialTableHeader\">\n                                <div class=\"row\">\n                                    <div class=\"col-8\">\n                                        <ul class=\"header-buttons-left ms-0\">\n                                            <li class=\"dropdown\">\n                                                <h2>Payroll Analytics</h2>\n                                            </li>\n                                            <li class=\"dropdown m-l-20\">\n                                                <label for=\"search-input\"><i\n                                                        class=\"material-icons search-icon\">search</i></label>\n                                                <input placeholder=\"Filter...\" type=\"text\" (keyup)=\"applyFilter($event)\"\n                                                    #filter class=\"browser-default search-field\"\n                                                    aria-label=\"Search box\">\n                                            </li>\n                               \n                                            <li>\n                                                <div class=\"m-l-10\" matTooltip=\"REFRESH\">\n                                                    <button mat-mini-fab color=\"primary\" (click)=\"refresh()\">\n                                                        <mat-icon class=\"col-white\">refresh</mat-icon>\n                                                    </button>\n                                                </div>\n                                            </li>\n                                            \n                                        </ul>\n                                    </div>\n                                    <div class=\"col-4\">\n                                        <ul class=\"header-buttons\">\n                                            <li>\n                                                <div class=\"export-button m-l-10\" matTooltip=\"XLSX\">\n                                                    <img src=\"assets/images/icons/xlsx.png\" alt=\"\"\n                                                        (click)=\"exporter.exportTable('xlsx', {fileName:'assets-list', sheet: 'sheet1'})\" />\n                                                </div>\n                                            </li>\n                                            <li>\n                                                <div class=\"export-button m-l-10\" matTooltip=\"CSV\">\n                                                    <img src=\"assets/images/icons/csv.png\" alt=\"\"\n                                                        (click)=\"exporter.exportTable('csv')\" />\n                                                </div>\n                                            </li>\n                                            <li>\n                                                <div class=\"export-button m-l-10\" matTooltip=\"JSON\">\n                                                    <img src=\"assets/images/icons/json.png\" alt=\"\"\n                                                        (click)=\"exporter.exportTable('json')\" />\n                                                </div>\n                                            </li>\n                                            <li>\n                                                <div class=\"export-button m-l-10\" matTooltip=\"TXT\">\n                                                    <img src=\"assets/images/icons/txt.png\" alt=\"\"\n                                                        (click)=\"exporter.exportTable('txt')\" />\n                                                </div>\n                                            </li>\n                                        </ul>\n                                    </div>\n                                </div>\n                            </div>\n                            <div class=\"materialTableHeader mt-2\">\n                                <div class=\"row\">\n                                    <div class=\"col-3\">\n                                        <form [formGroup]=\"Form\">\n                                            <div class=\"row\">\n                                                <div class=\"col-9\">\n                                                    <mat-form-field class=\"example-full-width\" appearance=\"outline\">\n                                                        <mat-label>Year</mat-label>\n                                                        <input matInput formControlName=\"year\" />\n                                                        <mat-error *ngIf=\"\n                                                    Form.get('year').hasError('required')\n                                                  \">\n                                                            Please Enter Year\n                                                        </mat-error>\n                                                    </mat-form-field>\n                                                </div>\n\n                                            </div>\n                                        </form>\n                                    </div>\n                                    <div class=\"col-3\">\n                                        <form [formGroup]=\"Form\">\n                                            <mat-form-field class=\"example-full-width\" appearance=\"outline\">\n                                                <mat-label>Month</mat-label>\n                                                <mat-select formControlName=\"month\">\n                                                    <mat-option *ngFor=\"let month of months\" [value]=\"month\">{{\n                                                        month }}</mat-option>\n                                                </mat-select>\n                                                <mat-error *ngIf=\"Form.get('month').hasError('required')\">Please select\n                                                    a month</mat-error>\n                                            </mat-form-field>\n                                        </form>\n                                    </div>\n\n\n                                </div>\n                            </div>\n                            <mat-table #table matTableExporter [dataSource]=\"dataSource\" matSort class=\"mat-cell\"\n                                #exporter=\"matTableExporter\">\n\n                                    <ng-container matColumnDef=\"category\">\n                                      <mat-header-cell *matHeaderCellDef mat-sort-header class=\"column-nowrap psl-3 tbl-col-width-per-25\">\n                                        Category\n                                      </mat-header-cell>\n                                      <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-25\">\n                                        {{ row.category }}\n                                      </mat-cell>\n                                    </ng-container>\n                                  \n                                    <ng-container matColumnDef=\"prevPayroll\">\n                                      <mat-header-cell *matHeaderCellDef mat-sort-header class=\"column-nowrap psl-3 tbl-col-width-per-25\">\n                                        Previous Payroll\n                                      </mat-header-cell>\n                                      <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-25\">\n                                        {{ row.prevPayroll  }}\n                                      </mat-cell>\n                                    </ng-container>\n                                  \n                                    <ng-container matColumnDef=\"currPayroll\">\n                                      <mat-header-cell *matHeaderCellDef mat-sort-header class=\"column-nowrap psl-3 tbl-col-width-per-25\">\n                                        Current Payroll\n                                      </mat-header-cell>\n                                      <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-25\">\n                                        {{ row.currPayroll }}\n                                      </mat-cell>\n                                    </ng-container>\n                                  \n                                    <ng-container matColumnDef=\"changeRate\">\n                                      <mat-header-cell *matHeaderCellDef mat-sort-header class=\"column-nowrap psl-3 tbl-col-width-per-25\">\n                                        Change Rate\n                                      </mat-header-cell>\n                                      <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-25\">\n                                        {{ row.changeRate }} %\n                                      </mat-cell>\n                                    </ng-container>\n                                  \n                      \n\n                                 <ng-container matColumnDef=\"status\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Status\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row; let i = index\"\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-20\"\n                                        (click)=\"$event.stopPropagation()\">\n                                        <ng-container [ngSwitch]=\"row.status\">\n                                            <button *ngSwitchCase=\"'APPROVED'\"\n                                                class=\"badge badge-solid-green btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-check-circle\"></i>&nbsp;\n                                                {{ row.status }}\n                                            </button>\n                                            <button *ngSwitchCase=\"'REJECTED'\"\n                                                class=\"badge badge-solid-red btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-times-circle\"></i>&nbsp;\n                                                {{ row.status }}\n                                            </button>\n                                            <button *ngSwitchCase=\"'RETURNED'\"\n                                                class=\"badge badge-solid-brown btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-undo-alt\"></i>&nbsp;\n                                                {{ row.status }}\n                                            </button>\n                                            <button *ngSwitchCase=\"'PENDING'\"\n                                                class=\"badge badge-solid-blue btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-exclamation-circle\"></i>&nbsp;\n                                                {{ row.status }}\n                                            </button>\n                                            <button *ngSwitchDefault class=\"badge badge-solid-brown btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-question-circle\"></i>&nbsp;\n                                                {{ row.status }}\n                                            </button>\n                                        </ng-container>\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"verifiedFlag\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Verified\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        <ng-container *ngIf=\"row.verifiedFlag === 'Y'; else notVerified\">\n                                            <button class=\"badge badge-solid-green btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-check\"></i>&nbsp; Verified\n                                            </button>\n                                        </ng-container>\n                                        <ng-template #notVerified>\n                                            <button class=\"badge badge-solid-red btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-times\"></i>&nbsp; Not Verified\n                                            </button>\n                                        </ng-template>\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"deletedFlag\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Deleted\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        <ng-container *ngIf=\"row.deletedFlag === 'Y'; else notDeleted\">\n                                            <button class=\"badge badge-solid-red btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-trash\"></i>&nbsp; Deleted\n                                            </button>\n                                        </ng-container>\n                                        <ng-template #notDeleted>\n                                            <button class=\"badge badge-solid-green btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-check\"></i>&nbsp; Active\n                                            </button>\n                                        </ng-template>\n                                    </mat-cell>\n                                </ng-container>\n\n\n\n\n\n\n\n                                <ng-container matColumnDef=\"action\">\n                                    <mat-header-cell class=\"column-nowrap psl-3 tbl-col-width-per-15 pr-0\"\n                                        *matHeaderCellDef>\n                                        Action\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row; let i = index\"\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-15 pr-0\">\n\n                                        <button mat-icon-button color=\"accent\" (click)=\"$event.stopPropagation()\"\n                                            (click)=\"mngRecord('Update',row)\" class=\"tbl-action-btn\">\n                                            <app-feather-icons [icon]=\"'edit'\" [class]=\"'tbl-fav-edit'\">\n                                            </app-feather-icons>\n                                        </button>\n\n                                        <button mat-icon-button color=\"primary\" (click)=\"$event.stopPropagation()\"\n                                            (click)=\"mngRecord('View',row)\" class=\"tbl-action-btn\">\n                                            <app-feather-icons [icon]=\"'eye'\" [class]=\"'tbl-fav-eye'\">\n                                            </app-feather-icons>\n                                        </button>\n                                        <!-- \n                                        <button mat-icon-button color=\"primary\" (click)=\"$event.stopPropagation()\"\n                                            (click)=\"lockOrUnlockAccount(row)\" class=\"tbl-action-btn\">\n                                            <mat-icon>{{ row.isAcctActive === 'Y' ? 'lock' : 'lock_open' }}</mat-icon>\n                                        </button> -->\n\n                                        <button mat-icon-button color=\"accent\" (click)=\"$event.stopPropagation()\"\n                                            (click)=\"deleteRecord(row.id)\" class=\"tbl-action-btn\">\n                                            <app-feather-icons [icon]=\"'trash-2'\" [class]=\"'tbl-fav-delete'\">\n                                            </app-feather-icons>\n                                        </button>\n                                    </mat-cell>\n                                </ng-container>\n                                <mat-header-row *matHeaderRowDef=\"displayedColumns\">\n                                </mat-header-row>\n                                <mat-row *matRowDef=\"let row; columns: displayedColumns;\" \n                                    [style.cursor]=\"'pointer'\" matRipple>\n                                </mat-row>\n\n\n                                <tr *matNoDataRow>\n                                    <td colspan=\"{{ displayedColumns.length }}\"> No data matching the filter \"{{ input\n                                        }}\"</td>\n                                </tr>\n                            </mat-table>\n                            <div class=\"m-2 mx-2\" *ngIf=\"loading || downloadLoading\">\n                                <mat-progress-bar color=\"primary\" mode=\"indeterminate\">\n                                </mat-progress-bar>\n                            </div>\n                            <div *ngIf=\"loading\" class=\"tbl-spinner\">\n                                <mat-progress-spinner color=\"primary\" [diameter]=\"40\" mode=\"indeterminate\">\n                                </mat-progress-spinner>\n                            </div>\n\n                            <mat-paginator [pageSize]=\"10\" [pageSizeOptions]=\"[2, 5, 10, 20, 30, 40, 50, 100]\"\n                                aria-label=\"Select page of users\">\n                            </mat-paginator>\n\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"col-lg-4 col-md-4 col-sm-12 col-xs-12\">\n                <div class=\"card\">\n\n                    <div class=\"body\">\n\n                        <h4>Payroll Closure</h4>\n                        <div class=\"alert-c alert-warning-c alert-dismissible-c fade show\" role=\"alert\">\n                          This is a critical process as it finalizes the payroll generation process for the circle. There will not be any further modification or alterations of payroll entries after closure. Before you close, kindly do a recheck on the payroll to ensure all the entries have been captured, the computation has been done well, and the department is ready to submit the salary remuneration to finance for salary disbursements.\n                          <button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\">\n                            <span aria-hidden=\"true\">&times;</span>\n                          </button>\n                        </div>\n\n\n                        <form class=\"register-form mx-2\" [formGroup]=\"mngForm\">\n                            <div class=\"row\">\n                              \n                                <div class=\"col-xl-12 col-lg-12 col-md-12 col-sm-12 mb-1\">\n                                    <mat-form-field class=\"example-full-width\" appearance=\"outline\">\n                                      <mat-label>Remarks</mat-label>\n                                      <input matInput formControlName=\"remarks\" required />\n                                      <mat-icon matSuffix>compare_arrows</mat-icon>\n                                      <mat-error *ngIf=\"mngForm.get('remarks').hasError('required')\">\n                                        Remarks are required\n                                      </mat-error>\n                                    </mat-form-field>\n                                  </div>\n                                  \n                                  <div class=\"col-xl-12 col-lg-12 col-md-12 col-sm-12 mb-1\">\n                                    <mat-form-field class=\"example-full-width\" appearance=\"outline\">\n                                      <mat-label>Valid Signature</mat-label>\n                                      <input matInput formControlName=\"validsignature\" required />\n                                      <mat-icon matSuffix>compare_arrows</mat-icon>\n                                      <mat-hint>Please type <strong>FINAL ENTRY</strong></mat-hint>\n                                      <mat-error *ngIf=\"mngForm.get('validsignature').hasError('required')\">\n                                        Valid Signature is required\n                                      </mat-error>\n                                    </mat-form-field>\n                                  </div>\n                                  \n                             \n                                \n                            </div>\n                          </form>\n                          <div class=\"row\">\n                            <div class=\"col-xl-12 col-lg-12 col-md-12 col-sm-12 mb-1\">\n                              <div class=\"example-button-row\" align=\"end\">\n                                <button class=\"btn-space\" mat-raised-button color=\"primary\" [class.auth-spinner]=\"posting\"\n                                  [disabled]=\"!mngForm.valid || posting\" (click)=\"onSubmit()\">\n                                  Proceed\n                                </button>\n                                <button mat-raised-button color=\"warn\" (click)=\"onNoClick()\" tabindex=\"-1\">\n                                  Cancel\n                                </button>\n                              </div>\n                            </div>\n                          </div>\n\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</section>","import { SelectionModel } from \"@angular/cdk/collections\";\nimport { HttpParams } from \"@angular/common/http\";\nimport { Component, OnInit, ViewChild } from \"@angular/core\";\nimport { FormGroup, FormBuilder, Validators } from \"@angular/forms\";\nimport { MatDialog, MatDialogConfig } from \"@angular/material/dialog\";\nimport { MatPaginator } from \"@angular/material/paginator\";\nimport { MatSort } from \"@angular/material/sort\";\nimport { MatTableDataSource } from \"@angular/material/table\";\nimport { Subject, takeUntil, Subscription } from \"rxjs\";\nimport { NotificationServiceService } from \"src/@core/Models/Notification/notification-service.service\";\nimport { SnackbarService } from \"src/app/shared/services/snackbar.service\";\nimport Swal from \"sweetalert2\";\nimport { ManagePayrollOtherDeductionsComponent } from \"../manage-payroll-other-deductions/manage-payroll-other-deductions.component\";\nimport { CustomDeductionService } from \"src/app/erp-hr/data/payroll-services/custom-deduction.service\";\n\n@Component({\n  selector: \"app-all-payroll-other-deductions\",\n  templateUrl: \"./all-payroll-other-deductions.component.html\",\n  styleUrls: [\"./all-payroll-other-deductions.component.sass\"],\n})\nexport class AllPayrollOtherDeductionsComponent implements OnInit {\n  displayedColumns: string[] = [\n    \"select\",\n    \"id\",\n\n    \"employeePfNo\",\n    \"employeeName\",\n    \"description\",\n    \"deductionType\",\n    \"periodM\",\n    \"periodY\",\n    \"amount\",\n\n    \"status\",\n    \"verifiedFlag\",\n    \"deletedFlag\",\n    \"action\",\n  ];\n\n  loading: boolean = false;\n  data: any;\n  error: any;\n  dialogConfig: any;\n  destroy$: Subject<boolean> = new Subject<boolean>();\n\n  dataSource!: MatTableDataSource<any>;\n  @ViewChild(MatPaginator) paginator!: MatPaginator;\n  @ViewChild(MatSort) sort!: MatSort;\n\n  selection = new SelectionModel<any>(true, []);\n\n  downloadLoading: boolean = false;\n  posting: boolean = false;\n  showForm: boolean = false;\n\n  Form: FormGroup;\n  months: string[] = [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\",\n  ];\n  constructor(\n    private dialog: MatDialog,\n    private notificationAPI: NotificationServiceService,\n    private customDeductionService: CustomDeductionService,\n    private snackbar: SnackbarService,\n    private fb: FormBuilder\n  ) {}\n\n  ngOnInit(): void {\n    const currentYear = new Date().getFullYear();\n    const currentMonthIndex = new Date().getMonth();\n    const currentMonthName = this.months[currentMonthIndex];\n\n    this.Form = this.fb.group({\n      year: [currentYear.toString(), Validators.required],\n      month: [currentMonthName, Validators.required],\n      status: ['ALL']\n    });\n    this.Form.valueChanges.subscribe(() => {\n      this.getData();\n    });\n\n    this.getData();\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next(true);\n    this.destroy$.complete();\n  }\n\n \n  //****************************************************************************************** */\n  reqStatuses: any[] = [\n    { name: \"ALL\" },\n    { name: \"PENDING\" },\n    { name: \"APPROVED\" },\n    { name: \"RETURNED\" },\n    { name: \"REJECTED\" },\n  ];\n\n  selectedStatus: string = \"ALL\";\n  getSelectSelectedStatus() {\n   // this.getData();\n  }\n  getSelectedStatus(status: any) {\n    this.Form.patchValue({\n      status: status,\n    });\n\n  //  this.getData();\n  }\n\n\n  getData() {\n    this.loading = true;\n    this.dataSource = new MatTableDataSource([]);\n    this.dataSource.paginator = this.paginator;\n    this.dataSource.sort = this.sort;\n    this.selectedStatus = this.Form.value.status;\n    let params = new HttpParams()\n      .set(\"month\", this.Form.value.month)\n      .set(\"year\", this.Form.value.year)\n      .set(\"status\", this.Form.value.status);\n\n    this.customDeductionService\n      .read(params)\n      .pipe(takeUntil(this.destroy$))\n      .subscribe({\n        next: (res) => {\n          if (res.statusCode === 302) {\n            this.data = res.entity;\n            console.log(\"Other Deductions displayed on table\", this.data);\n\n            this.loading = false;\n            this.dataSource = new MatTableDataSource(this.data);\n            this.dataSource.paginator = this.paginator;\n            this.dataSource.sort = this.sort;\n          } else {\n            this.loading = false;\n          }\n        },\n        error: (err) => {\n          this.loading = false;\n          this.notificationAPI.alertWarning(\"Server Error: \" + err.message);\n        },\n        complete: () => {},\n      });\n  }\n  refresh() {\n    this.getData();\n  }\n\n  mngRecord(action: any, record?: any) {\n    console.log(\"this.action:; \", action);\n    console.log(\"this.record:; \", record);\n\n    const dialogConfig = new MatDialogConfig();\n    dialogConfig.disableClose = false;\n    dialogConfig.disableClose = true;\n    dialogConfig.width = \"800px\";\n    dialogConfig.data = {\n      action: action,\n      record: record,\n    };\n    const dialogRef = this.dialog.open(\n      ManagePayrollOtherDeductionsComponent,\n      dialogConfig\n    );\n    dialogRef.afterClosed().subscribe((result) => {\n      console.log(\"result:::\", result);\n\n      this.getData();\n    });\n  }\n  deleteRecord(id: number) {\n    Swal.fire({\n      title: \"Are you sure?\",\n      text: \"THIS RECORD WILL BE DELETED PERMANENTLY!!\",\n      icon: \"warning\",\n      showCancelButton: true,\n      confirmButtonColor: \"#3085d6\",\n      cancelButtonColor: \"#d33\",\n      confirmButtonText: \"Yes, delete it!\",\n    }).then((result) => {\n      if (result.isConfirmed) {\n        this.loading = true;\n        this.customDeductionService\n          .delete(id)\n          .pipe(takeUntil(this.destroy$))\n          .subscribe({\n            next: (res) => {\n              if (res.statusCode == 200) {\n                this.getData();\n                this.loading = false;\n                this.notificationAPI.alertSuccess(\n                  \"RECORD DELETED SUCCESSFULLY\"\n                );\n              } else {\n                this.getData();\n                this.loading = false;\n                this.notificationAPI.alertWarning(res.message);\n              }\n            },\n            error: (err) => {\n              this.loading = false;\n              this.notificationAPI.alertSuccess(\"Server Error: \" + err.message);\n            },\n            complete: () => {},\n          });\n      }\n    });\n  }\n\n  input: any;\n  applyFilter(event: Event) {\n    const filterValue = (event.target as HTMLInputElement).value;\n    this.input = filterValue;\n    this.dataSource.filter = filterValue.trim().toLowerCase();\n    if (this.dataSource.paginator) {\n      this.dataSource.paginator.firstPage();\n    }\n  }\n\n  // ****************************************************************************************************************************\n  selectedRows: any[] = [];\n  atleastOneSelected: boolean = false;\n  isAllSelected() {\n    const numSelected = this.selection.selected.length;\n    const numRows = this.dataSource.data.length;\n    return numSelected === numRows;\n  }\n  masterToggle() {\n    if (this.isAllSelected()) {\n      this.selection.clear();\n      return;\n    }\n\n    this.selection.select(...this.dataSource.data);\n  }\n  checkboxLabel(row?: any): string {\n    if (!row) {\n      return `${this.isAllSelected() ? \"deselect\" : \"select\"} all`;\n    }\n    return `${this.selection.isSelected(row) ? \"deselect\" : \"select\"} row ${\n      row.position + 1\n    }`;\n  }\n\n  expSelected() {\n    this.atleastOneSelected = true;\n    this.selectedRows = this.selection.selected;\n\n    console.log(\"this.selectedRows: \", this.selectedRows);\n  }\n\n  hasAccess: boolean = true;\n  processMultipleRows(status: any) {\n    let privilege = \"Validate Expenses\";\n\n    // this.hasAccess = this.accessControlService.hasPrivilege(\"FinanceModule\", [\n    //   privilege,\n    // ]);\n\n    if (this.hasAccess) {\n      Swal.fire({\n    title: '<span style=\"font-size: 20px;\">Enter Verifier Remarks</span>',\n    input: \"textarea\",\n    inputPlaceholder: \"Type your remarks here...\",\n    confirmButtonText: \"Submit\",\n    showCancelButton: true,\n    cancelButtonText: \"Cancel\",\n    icon: \"info\",\n\n    inputValidator: (value) => {\n          if (!value) {\n            return \"Please enter your remarks\";\n          }\n        },\n      }).then((result) => {\n        if (result.isConfirmed) {\n          const verifierRemarks = result.value;\n\n          const processedRows = this.selectedRows.map((element) => {\n            return {\n              id: element.id,\n              status: status,\n              verifierRemarks: verifierRemarks,\n            };\n          });\n\n          console.log(\"LOG: \", processedRows);\n\n          this.customDeductionService\n            .validateBulkOtherDeductions(processedRows)\n            .pipe(takeUntil(this.destroy$))\n            .subscribe({\n              next: (res) => {\n                console.log(\"res: \", res);\n                if (res.statusCode == 201 || 200 || 302) {\n                  this.snackbar.showNotification(\n                    \"snackbar-success\",\n                    res.message\n                  );\n\n                  this.selection = new SelectionModel<any>(true, []);\n                  this.selection.clear();\n                } else {\n                  this.snackbar.showNotification(\n                    \"snackbar-danger\",\n                    res.message\n                  );\n                }\n              },\n              error: (err) => {\n                this.snackbar.showNotification(\"snackbar-danger\", err.message);\n              },\n              complete: () => {\n                this.getData();\n              },\n            }),\n            Subscription;\n        } else {\n          this.selection = new SelectionModel<any>(true, []);\n          this.selection.clear();\n        }\n      });\n    }\n  }\n}\n","<section class=\"content\">\n    <div class=\"content-block\">\n        <div class=\"block-header\">\n            <!-- breadcrumb -->\n            <app-breadcrumb [title]=\"'All Other Deductions'\" [items]=\"['Other Deductions']\" [active_item]=\"'All Other Deductions'\">\n            </app-breadcrumb>\n        </div>\n\n        <app-gen-widgets></app-gen-widgets>\n\n        <div class=\"row\">\n            <div class=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\">\n                <div class=\"card\">\n\n                    <div class=\"body\">\n                        <div class=\"table-responsive\">\n                            <div class=\"materialTableHeader\">\n                                <div class=\"row\">\n                                    <div class=\"col-8\">\n                                        <ul class=\"header-buttons-left ms-0\">\n                                            <li class=\"dropdown\">\n                                                <h2>Other Deductions</h2>\n                                            </li>\n                                            <li class=\"dropdown m-l-20\">\n                                                <label for=\"search-input\"><i\n                                                        class=\"material-icons search-icon\">search</i></label>\n                                                <input placeholder=\"Filter...\" type=\"text\" (keyup)=\"applyFilter($event)\"\n                                                    #filter class=\"browser-default search-field\"\n                                                    aria-label=\"Search box\">\n                                            </li>\n                                            <li>\n                                                <div class=\"m-l-10\" matTooltip=\"ADD\">\n                                                    <button mat-mini-fab color=\"primary\" (click)=\"mngRecord('Add','')\">\n                                                        <mat-icon class=\"col-white\">add</mat-icon>\n                                                    </button>\n                                                </div>\n                                            </li>\n                                            <li>\n                                                <div class=\"m-l-10\" matTooltip=\"REFRESH\">\n                                                    <button mat-mini-fab color=\"primary\" (click)=\"refresh()\">\n                                                        <mat-icon class=\"col-white\">refresh</mat-icon>\n                                                    </button>\n                                                </div>\n                                            </li>\n                                            <li *ngIf=\"selection.selected.length > 0\">\n                                                <div class=\"m-l-10\" matTooltip=\"APPROVE\">\n                                                    <button mat-mini-fab color=\"primary\"\n                                                        (click)=\"processMultipleRows('APPROVED')\"\n                                                        class=\"mat-button-custom\">\n                                                        <mat-icon class=\"col-white\">check</mat-icon>\n                                                    </button>\n                                                </div>\n                                            </li>\n                                            <li *ngIf=\"selection.selected.length > 0\">\n                                                <div class=\"m-l-10\" matTooltip=\"REJECT\">\n                                                    <button mat-mini-fab color=\"warn\"\n                                                        (click)=\"processMultipleRows('REJECTED')\"\n                                                        class=\"mat-button-custom\">\n                                                        <mat-icon class=\"col-white\">cancel</mat-icon>\n                                                    </button>\n                                                </div>\n                                            </li>\n                                            <li *ngIf=\"selection.selected.length > 0\">\n                                                <div class=\"m-l-10\" matTooltip=\"RETURN\">\n                                                    <button mat-mini-fab color=\"accent\"\n                                                        (click)=\"processMultipleRows('RETURNED')\"\n                                                        class=\"mat-button-custom\">\n                                                        <mat-icon class=\"col-white\">undo</mat-icon>\n                                                    </button>\n                                                </div>\n                                            </li>\n                                        </ul>\n                                    </div>\n                                    <div class=\"col-4\">\n                                        <ul class=\"header-buttons\">\n                                            <li>\n                                                <div class=\"export-button m-l-10\" matTooltip=\"XLSX\">\n                                                    <img src=\"assets/images/icons/xlsx.png\" alt=\"\"\n                                                        (click)=\"exporter.exportTable('xlsx', {fileName:'assets-list', sheet: 'sheet1'})\" />\n                                                </div>\n                                            </li>\n                                            <li>\n                                                <div class=\"export-button m-l-10\" matTooltip=\"CSV\">\n                                                    <img src=\"assets/images/icons/csv.png\" alt=\"\"\n                                                        (click)=\"exporter.exportTable('csv')\" />\n                                                </div>\n                                            </li>\n                                            <li>\n                                                <div class=\"export-button m-l-10\" matTooltip=\"JSON\">\n                                                    <img src=\"assets/images/icons/json.png\" alt=\"\"\n                                                        (click)=\"exporter.exportTable('json')\" />\n                                                </div>\n                                            </li>\n                                            <li>\n                                                <div class=\"export-button m-l-10\" matTooltip=\"TXT\">\n                                                    <img src=\"assets/images/icons/txt.png\" alt=\"\"\n                                                        (click)=\"exporter.exportTable('txt')\" />\n                                                </div>\n                                            </li>\n                                        </ul>\n                                    </div>\n                                </div>\n                            </div>\n\n                            <div class=\"materialTableHeader mt-2\">\n                                <div class=\"row\">\n                                    <div class=\"col-2\">\n                                        <form [formGroup]=\"Form\">\n                                            <div class=\"row\">\n                                                <div class=\"col-9\">\n                                                    <mat-form-field class=\"example-full-width\" appearance=\"fill\">\n                                                        <mat-label>Year</mat-label>\n                                                        <input matInput formControlName=\"year\" />\n                                                        <mat-error *ngIf=\"\n                                                    Form.get('year').hasError('required')\n                                                  \">\n                                                            Please Enter Year\n                                                        </mat-error>\n                                                    </mat-form-field>\n                                                </div>\n\n                                            </div>\n                                        </form>\n                                    </div>\n                                    <div class=\"col-2\">\n                                        <form [formGroup]=\"Form\">\n                                            <mat-form-field class=\"example-full-width\" appearance=\"fill\">\n                                                <mat-label>Month</mat-label>\n                                                <mat-select formControlName=\"month\"\n                                                  >\n                                                    <mat-option *ngFor=\"let month of months\" [value]=\"month\">{{\n                                                        month }}</mat-option>\n                                                </mat-select>\n                                                <mat-error *ngIf=\"Form.get('month').hasError('required')\">Please select\n                                                    a month</mat-error>\n                                            </mat-form-field>\n                                        </form>\n                                    </div>\n\n\n\n                                </div>\n                            </div>\n\n                            <div class=\"materialTableHeader mt-2\">\n                                <div class=\"row\">\n                                    <div class=\"col-2\">\n                                        <form [formGroup]=\"Form\">\n\n                                            <mat-form-field class=\"example-full-width\" appearance=\"fill\">\n                                                <mat-label>Status</mat-label>\n\n                                                <mat-select formControlName=\"status\">\n                                                    <mat-option *ngFor=\"let reqStatus of reqStatuses\"\n                                                        [value]=\"reqStatus.name\">{{ reqStatus.name\n                                                        }}\n                                                    </mat-option>\n                                                </mat-select>\n\n                                                <mat-error *ngIf=\"Form.get('status').hasError('required')\">\n                                                    Please select Status\n                                                </mat-error>\n                                            </mat-form-field>\n\n                                        </form>\n                                    </div>\n                                    <div class=\"col-10\">\n                                        <div class=\"button-container mt-1\">\n                                            <button mat-raised-button [class.active]=\"selectedStatus === 'ALL'\"\n                                                class=\"mat-button verified\" (click)=\"getSelectedStatus('ALL')\">\n                                                <mat-icon>check_circle</mat-icon>\n                                                ALL\n                                            </button>\n\n                                            <button mat-raised-button [class.active]=\"selectedStatus === 'PENDING'\"\n                                                class=\"mat-button pending\" (click)=\"getSelectedStatus('PENDING')\">\n                                                <mat-icon>pending</mat-icon>\n                                                PENDING\n                                            </button>\n\n                                            <button mat-raised-button [class.active]=\"selectedStatus === 'APPROVED'\"\n                                                class=\"mat-button approved\" (click)=\"getSelectedStatus('APPROVED')\">\n                                                <mat-icon>thumb_up</mat-icon>\n                                                APPROVED\n                                            </button>\n                                            <button mat-raised-button [class.active]=\"selectedStatus === 'RETURNED'\"\n                                                class=\"mat-button returned\" (click)=\"getSelectedStatus('RETURNED')\">\n                                                <mat-icon>reply</mat-icon>\n                                                RETURNED\n                                            </button>\n                                            <button mat-raised-button [class.active]=\"selectedStatus === 'REJECTED'\"\n                                                class=\"mat-button rejected\" (click)=\"getSelectedStatus('REJECTED')\">\n                                                <mat-icon>cancel</mat-icon>\n                                                REJECTED\n                                            </button>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n\n\n                            <mat-table #table matTableExporter [dataSource]=\"dataSource\" matSort class=\"mat-cell\"\n                                #exporter=\"matTableExporter\">\n\n                                <ng-container matColumnDef=\"select\">\n                                    <mat-header-cell *matHeaderCellDef [ngClass]=\"'tbl-col-width-per-4'\">\n                                        <mat-checkbox color=\"primary\" (change)=\"$event ? masterToggle() : null\"\n                                            [checked]=\"selection.hasValue() && isAllSelected()\"\n                                            [indeterminate]=\"selection.hasValue() && !isAllSelected()\"\n                                            [ngClass]=\"'tbl-checkbox'\" (change)=\"expSelected()\">\n                                        </mat-checkbox>\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" [ngClass]=\"'tbl-col-width-per-4'\">\n                                        <mat-checkbox color=\"primary\" (click)=\"$event.stopPropagation()\"\n                                            (change)=\"$event ? selection.toggle(row) : null\"\n                                            [checked]=\"selection.isSelected(row)\" [ngClass]=\"'tbl-checkbox'\"\n                                            [aria-label]=\"checkboxLabel(row)\" (change)=\"expSelected()\">\n                                        </mat-checkbox>\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"id\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header class=\"column-nowrap psl-3 tbl-col-width-per-10\">\n                                        ID\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-10\">\n                                        {{ row.id }}\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"description\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Description\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        {{ row.description }}\n                                    </mat-cell>\n                                </ng-container>\n                                \n                                <ng-container matColumnDef=\"employeeName\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Employee Name\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        {{ row.employeeName }}\n                                    </mat-cell>\n                                </ng-container>\n                                \n                                <ng-container matColumnDef=\"periodM\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Period Month\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        {{ row.periodM }}\n                                    </mat-cell>\n                                </ng-container>\n                                \n                                <ng-container matColumnDef=\"periodY\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Period Year\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        {{ row.periodY }}\n                                    </mat-cell>\n                                </ng-container>\n                                \n                                <ng-container matColumnDef=\"amount\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Amount\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        {{ row.amount }}\n                                    </mat-cell>\n                                </ng-container>\n                                \n                                <ng-container matColumnDef=\"deductionType\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Deduction Type\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        {{ row.deductionType }}\n                                    </mat-cell>\n                                </ng-container>\n                                \n                                <ng-container matColumnDef=\"isTaxable\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Is Taxable\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        {{ row.isTaxable }}\n                                    </mat-cell>\n                                </ng-container>\n                                \n                                <ng-container matColumnDef=\"employeePfNo\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Employee PF No.\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        {{ row.employeePfNo }}\n                                    </mat-cell>\n                                </ng-container>\n                                \n                                \n                                <ng-container matColumnDef=\"postedTime\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Posted Time\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        {{ row.postedTime | date:'short' }}\n                                    </mat-cell>\n                                </ng-container>\n                                \n                                 <ng-container matColumnDef=\"status\">\n                  <mat-header-cell *matHeaderCellDef mat-sort-header class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                    Status\n                  </mat-header-cell>\n                  <mat-cell *matCellDef=\"let row; let i = index\" class=\"column-nowrap psl-3 tbl-col-width-per-20\"\n                    (click)=\"$event.stopPropagation()\">\n                    <ng-container [ngSwitch]=\"row.status\">\n                      <button *ngSwitchCase=\"'APPROVED'\" class=\"badge badge-solid-green btn btn btn-sm m-1\">\n                        <i class=\"fas fa-check-circle\"></i>&nbsp;\n                        {{ row.status }}\n                      </button>\n                      <button *ngSwitchCase=\"'REJECTED'\" class=\"badge badge-solid-red btn btn btn-sm m-1\">\n                        <i class=\"fas fa-times-circle\"></i>&nbsp;\n                        {{ row.status }}\n                      </button>\n                      <button *ngSwitchCase=\"'RETURNED'\" class=\"badge badge-solid-brown btn btn btn-sm m-1\">\n                        <i class=\"fas fa-undo-alt\"></i>&nbsp;\n                        {{ row.status }}\n                      </button>\n                      <button *ngSwitchCase=\"'PENDING'\" class=\"badge badge-solid-blue btn btn btn-sm m-1\">\n                        <i class=\"fas fa-exclamation-circle\"></i>&nbsp;\n                        {{ row.status }}\n                      </button>\n                      <button *ngSwitchDefault class=\"badge badge-solid-brown btn btn btn-sm m-1\">\n                        <i class=\"fas fa-question-circle\"></i>&nbsp;\n                        {{ row.status }}\n                      </button>\n                    </ng-container>\n                  </mat-cell>\n                </ng-container>\n                                \n                                <ng-container matColumnDef=\"verifiedFlag\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Verified\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        <ng-container *ngIf=\"row.verifiedFlag === 'Y'; else notVerified\">\n                                            <button class=\"badge badge-solid-green btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-check\"></i>&nbsp; Verified\n                                            </button>\n                                        </ng-container>\n                                        <ng-template #notVerified>\n                                            <button class=\"badge badge-solid-red btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-times\"></i>&nbsp; Not Verified\n                                            </button>\n                                        </ng-template>\n                                    </mat-cell>\n                                </ng-container>\n                                \n                                <ng-container matColumnDef=\"deletedFlag\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Deleted\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        <ng-container *ngIf=\"row.deletedFlag === 'Y'; else notDeleted\">\n                                            <button class=\"badge badge-solid-red btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-trash\"></i>&nbsp; Deleted\n                                            </button>\n                                        </ng-container>\n                                        <ng-template #notDeleted>\n                                            <button class=\"badge badge-solid-green btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-check\"></i>&nbsp; Active\n                                            </button>\n                                        </ng-template>\n                                    </mat-cell>\n                                </ng-container>\n                                \n                                \n\n\n\n\n\n                                <ng-container matColumnDef=\"action\">\n                                    <mat-header-cell class=\"column-nowrap psl-3 tbl-col-width-per-15 pr-0\"\n                                        *matHeaderCellDef>\n                                        Action\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row; let i = index\"\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-15 pr-0\">\n\n                                        <button mat-icon-button color=\"accent\" (click)=\"$event.stopPropagation()\"\n                                            (click)=\"mngRecord('Update',row)\" class=\"tbl-action-btn\">\n                                            <app-feather-icons [icon]=\"'edit'\" [class]=\"'tbl-fav-edit'\">\n                                            </app-feather-icons>\n                                        </button>\n\n                                        <button mat-icon-button color=\"primary\" (click)=\"$event.stopPropagation()\"\n                                            (click)=\"mngRecord('View',row)\" class=\"tbl-action-btn\">\n                                            <app-feather-icons [icon]=\"'eye'\" [class]=\"'tbl-fav-eye'\">\n                                            </app-feather-icons>\n                                        </button>\n<!-- \n                                        <button mat-icon-button color=\"primary\" (click)=\"$event.stopPropagation()\"\n                                            (click)=\"lockOrUnlockAccount(row)\" class=\"tbl-action-btn\">\n                                            <mat-icon>{{ row.isAcctActive === 'Y' ? 'lock' : 'lock_open' }}</mat-icon>\n                                        </button> -->\n\n                                        <button mat-icon-button color=\"accent\" (click)=\"$event.stopPropagation()\"\n                                            (click)=\"deleteRecord(row.id)\" class=\"tbl-action-btn\">\n                                            <app-feather-icons [icon]=\"'trash-2'\" [class]=\"'tbl-fav-delete'\">\n                                            </app-feather-icons>\n                                        </button>\n                                    </mat-cell>\n                                </ng-container>\n                                <mat-header-row *matHeaderRowDef=\"displayedColumns\">\n                                </mat-header-row>\n                                <mat-row *matRowDef=\"let row; columns: displayedColumns;\"  \n                                    [style.cursor]=\"'pointer'\" matRipple>\n                                </mat-row>\n\n\n                                <tr *matNoDataRow>\n                                    <td colspan=\"{{ displayedColumns.length }}\"> No data matching the filter \"{{ input\n                                        }}\"</td>\n                                </tr>\n                            </mat-table>\n                            <div class=\"m-2 mx-2\" *ngIf=\"loading || downloadLoading\">\n                                <mat-progress-bar color=\"primary\" mode=\"indeterminate\">\n                                </mat-progress-bar>\n                            </div>\n                            <div *ngIf=\"loading\" class=\"tbl-spinner\">\n                                <mat-progress-spinner color=\"primary\" [diameter]=\"40\" mode=\"indeterminate\">\n                                </mat-progress-spinner>\n                            </div>\n\n                            <mat-paginator [pageSize]=\"10\" [pageSizeOptions]=\"[2, 5, 10, 20, 30, 40, 50, 100]\"\n                            aria-label=\"Select page of users\">\n                          </mat-paginator>\n\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</section>","import { Component, Inject, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA, MatDialog, MatDialogConfig } from '@angular/material/dialog';\nimport { Subject, takeUntil, Subscription } from 'rxjs';\nimport { EmployeesLookupComponent } from 'src/app/erp-hr/hr-lookups/configurations-lookups/employees-lookup/employees-lookup.component';\nimport { FilesService } from 'src/app/shared/services/files.service';\nimport { SnackbarService } from 'src/app/shared/services/snackbar.service';\nimport { AllEmployeesComponent } from '../../../employees/all-employees/all-employees.component';\nimport { CustomDeductionService } from 'src/app/erp-hr/data/payroll-services/custom-deduction.service';\n\n@Component({\n  selector: 'app-manage-payroll-other-deductions',\n  templateUrl: './manage-payroll-other-deductions.component.html',\n  styleUrls: ['./manage-payroll-other-deductions.component.sass']\n})\nexport class ManagePayrollOtherDeductionsComponent implements OnInit {\n\n  mngForm: FormGroup;\n\n  destroy$: Subject<boolean> = new Subject<boolean>();\n\n  downloadLoading: boolean = false;\n\n  pageFunction: string = \"Add\";\n\n  hideSubmit: boolean = false;\n  isLoading: boolean = true;\n\n  deductionTypes = [\n    { name: \"Kenya Bankers SACCO\" },\n    { name: \"BIFU & COTU membership deduction\" },\n    { name: \"Staff welfare contribution\" },\n    { name: \"JamBora SACCO contribution\" },\n    { name: \"Commissions Recovery\" },\n    { name: \"Cashier shortage deduction\" },\n    { name: \"Medical premium top up\" },\n    { name: \"Laptop Repair\" },\n    { name: \"Local Pensions\" },\n    { name: \"Other\" }\n];\n  months: string[] = [\n    'January', 'February', 'March', 'April', 'May', 'June',\n    'July', 'August', 'September', 'October', 'November', 'December'\n  ];\n  constructor(\n    public dialogRef: MatDialogRef<AllEmployeesComponent>,\n    @Inject(MAT_DIALOG_DATA) public data,\n    private fb: FormBuilder,\n    private snackbar: SnackbarService,\n    private customDeductionService: CustomDeductionService,\n    private dialog: MatDialog,\n    private filesService: FilesService\n  ) {}\n\n  ngOnInit(): void {\n    console.log(\"LOG DATA = \", this.data);\n    this.pageFunction = this.data.action;\n    this.formData = this.data.record\n    this.generateForm(this.formData);\n\n    this.getPage();\n  }\n  ngAfterViewInit() {\n    if (this.data.action !== \"Add\") {\n      this.generateForm(this.formData);\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next(true);\n    this.destroy$.complete();\n  }\n\n  disableTransactionType: boolean = true;\n  getPage() {\n    this.disableTransactionType = true;\n    console.log(\"this.data.action :\", this.data.action);\n    if (this.data.action === \"Add\") {\n      this.isLoading = false;\n      this.generateForm(this.data.record);\n    } else if (this.data.action === \"Update\") {\n      this.generateForm(this.data.record);\n    } else if (this.data.action === \"View\") {\n      this.generateForm(this.data.record);\n      this.activateViewMode();\n    }\n    this.isLoading = false;\n  }\n\n  formData: any;\n\n  generateForm(formData?): void {\n    console.log(\"generateForm formData :: \", formData);\n    this.mngForm = this.fb.group({\n      id: [formData?.id ?? ''],\n      employeePfNo: [formData?.employeePfNo ?? '', Validators.required],\n      amount: [formData?.amount ?? '', Validators.required],\n      deductionBeforeTax: [formData?.deductionBeforeTax ?? 'N'],\n      periodM: [formData?.periodM ?? '', Validators.required],\n      periodY: [formData?.periodY ?? '', Validators.required],\n      description: [formData?.description ?? '', Validators.required],\n      deductionType: [formData?.deductionType ?? '', Validators.required]\n    });\n  }\n  \n  // id: [''],\n  // deductionType: ['', Validators.required],\n  // employeePfNo: ['', Validators.required],\n  // amount: ['', Validators.required],\n  // deductionBeforeTax: ['N'],\n  // periodM: ['', Validators.required],\n  // periodY: ['', Validators.required],\n  // description: ['', Validators.required]\n\n  // id: [''],\n  // deductionType: ['', Validators.required],\n  // employeePfNo: ['', Validators.required],\n  // amount: ['', Validators.required],\n  // deductionBeforeTax: ['N'],\n  // periodM: ['', Validators.required],\n  // periodY: ['', Validators.required],\n  // description: ['', Validators.required]\n  \n  viewMode: boolean = false;\n  activateViewMode() {\n    this.viewMode = true;\n  }\n\n  posting: boolean = false;\n\n  response: any;\n  submit() {\n    console.log(\"this.mngForm.value: \", this.mngForm.value);\n    this.posting = true;\n    if (this.pageFunction === \"Add\") {\n      this.customDeductionService.create(this.mngForm.value)\n        .pipe(takeUntil(this.destroy$))\n        .subscribe({\n          next: (res) => {\n            this.response = res;\n            console.log(\"res: \", res);\n            if (res.statusCode == 201) {\n              this.snackbar.showNotification(\n                \"snackbar-success\",\n                res.message\n              );\n            } else {\n              this.snackbar.showNotification(\n                \"snackbar-danger\",\n                res.message\n              );\n            }\n          },\n          error: (err) => {\n            this.snackbar.showNotification(\"snackbar-danger\", err.message);\n          },\n          complete: () => {\n            this.posting = false;\n            setTimeout(() => {\n              this.onNoClick();\n            }, 3000);\n          },\n        }),\n        Subscription;\n    } else if (this.pageFunction === \"Update\") {\n      this.customDeductionService.update(this.mngForm.value)\n        .pipe(takeUntil(this.destroy$))\n        .subscribe({\n          next: (res) => {\n            this.response = res;\n            console.log(\"resres:: \", res);\n            if (res.statusCode == 200) {\n              this.snackbar.showNotification(\n                \"snackbar-success\",\n                res.message\n              );\n            } else {\n              this.snackbar.showNotification(\n                \"snackbar-danger\",\n                res.message\n              );\n            }\n          },\n          error: (err) => {\n            this.snackbar.showNotification(\"snackbar-danger\", err.message);\n          },\n          complete: () => {\n            this.posting = false;\n            setTimeout(() => {\n              this.onNoClick();\n            }, 3000);\n          },\n        }),\n        Subscription;\n    }\n  }\n\n  onNoClick(): void {\n    this.dialogRef.close({ event: \"close\", data: this.response });\n  }\n\n  selectedItem: any\n  employeeLookup() {\n    const dialogConfig = new MatDialogConfig();\n    dialogConfig.disableClose = false;\n    dialogConfig.disableClose = true;\n    dialogConfig.width = \"800px\";\n    dialogConfig.data = {\n      action: \"SingleEmployee\",\n      selected: this.selectedItem,\n    };\n    const dialogRef = this.dialog.open(EmployeesLookupComponent, dialogConfig);\n    dialogRef.afterClosed().subscribe((res) => {\n      if (res && res.data && res.data.length > 0) {\n        this.mngForm.patchValue({\n          employeePfNo: res.data[0].empNo,\n          \n        });\n      }\n    });\n  }\n \n}\n","<div class=\"addContainer\">\n  <div class=\"modalHeader\">\n    <div class=\"editRowModal\">\n      <div class=\"modalHeader clearfix\">\n        <img src=\"assets/images/em.png\" width=\"30px\" height=\"30px\" alt=\"\" />\n        <div class=\"modal-about\">\n          <div class=\"font-weight-bold p-t-5 ms-2 me-2 font-17\">\n            <strong>{{ pageFunction }} Deduction</strong>\n          </div>\n        </div>\n      </div>\n    </div>\n    <button mat-icon-button (click)=\"dialogRef.close()\" aria-label=\"Close dialog\">\n      <mat-icon>close</mat-icon>\n    </button>\n  </div>\n  <div mat-dialog-content>\n    <div class=\"m-2\" *ngIf=\"isLoading\">\n      <mat-progress-bar color=\"primary\" mode=\"indeterminate\">\n      </mat-progress-bar>\n    </div>\n\n    <ng-container>\n      <h6 class=\"mx-2\">Deduction Details</h6>\n\n      <form class=\"register-form mx-2\" [formGroup]=\"mngForm\">\n        <div class=\"row\">\n          <div class=\"col-xl-6 col-lg-6 col-md-6 col-sm-6 mb-1\">\n            <mat-form-field class=\"example-full-width\" appearance=\"outline\">\n              <mat-label>Employee PF No</mat-label>\n              <input matInput formControlName=\"employeePfNo\" required />\n              <mat-icon matSuffix (click)=\"employeeLookup()\">search</mat-icon>\n              <mat-error *ngIf=\"mngForm.get('employeePfNo').hasError('required')\">\n                Employee PF No is required\n              </mat-error>\n            </mat-form-field>\n          </div>\n\n          <div class=\"col-xl-6 col-lg-6 col-md-6 col-sm-6 mb-1\">\n            <mat-form-field class=\"example-full-width\" appearance=\"outline\">\n              <mat-label>Amount</mat-label>\n              <input matInput formControlName=\"amount\" required />\n              <mat-icon matSuffix>compare_arrows</mat-icon>\n              <mat-error *ngIf=\"mngForm.get('amount').hasError('required')\">\n                Amount is required\n              </mat-error>\n            </mat-form-field>\n          </div>\n\n          <div class=\"col-xl-6 col-lg-6 col-md-6 col-sm-6 mb-1\">\n            <mat-form-field class=\"example-full-width\" appearance=\"outline\">\n              <mat-label>Period Month</mat-label>\n\n              <mat-select formControlName=\"periodM\" required>\n                <mat-option *ngFor=\"let item of months\" [value]=\"item\">{{ item }}</mat-option>\n              </mat-select>\n\n\n              <mat-error *ngIf=\"mngForm.get('periodM').hasError('required')\">\n                Period Month is required\n              </mat-error>\n            </mat-form-field>\n          </div>\n\n          <div class=\"col-xl-6 col-lg-6 col-md-6 col-sm-6 mb-1\">\n            <mat-form-field class=\"example-full-width\" appearance=\"outline\">\n              <mat-label>Period Year</mat-label>\n              <input matInput formControlName=\"periodY\" required />\n              <mat-icon matSuffix>compare_arrows</mat-icon>\n              <mat-error *ngIf=\"mngForm.get('periodY').hasError('required')\">\n                Period Year is required\n              </mat-error>\n            </mat-form-field>\n          </div>\n\n          <div class=\"col-xl-6 col-lg-6 col-md-6 col-sm-6 mb-1\">\n            <mat-form-field class=\"example-full-width\" appearance=\"outline\">\n              <mat-label>Deduction Type</mat-label>\n              <mat-select formControlName=\"deductionType\" required>\n                <mat-option *ngFor=\"let type of deductionTypes\" [value]=\"type.name\">{{ type.name }}</mat-option>\n              </mat-select>\n\n              <mat-error *ngIf=\"mngForm.get('deductionType').hasError('required')\">\n                Deduction Type is required\n              </mat-error>\n            </mat-form-field>\n          </div>\n\n          <div class=\"col-xl-6 col-lg-6 col-md-6 col-sm-6 mb-1\">\n            <section class=\"example-section\">\n              <label class=\"example-margin\">Deduction Before Tax?</label>\n              <mat-radio-group formControlName=\"deductionBeforeTax\">\n                <mat-radio-button class=\"example-margin\" value=\"Y\">Yes</mat-radio-button>\n                <mat-radio-button class=\"example-margin\" value=\"N\">No</mat-radio-button>\n              </mat-radio-group>\n            </section>\n\n            <mat-error *ngIf=\"\n    mngForm.get('deductionBeforeTax').invalid &&\n    mngForm.get('deductionBeforeTax').touched\n    \">\n              Please select an option for Deduction Before Tax\n            </mat-error>\n          </div>\n\n\n          <div class=\"col-xl-12 col-lg-12 col-md-12 col-sm-12 mb-1\">\n            <mat-form-field class=\"example-full-width\" appearance=\"outline\">\n              <mat-label>Description</mat-label>\n              <textarea matInput formControlName=\"description\" required></textarea>\n              <mat-icon matSuffix>compare_arrows</mat-icon>\n              <mat-error *ngIf=\"mngForm.get('description').hasError('required')\">\n                Description is required\n              </mat-error>\n            </mat-form-field>\n          </div>\n\n\n        </div>\n      </form>\n\n      <div class=\"row\" *ngIf=\"!viewMode\">\n        <div class=\"col-xl-12 col-lg-12 col-md-12 col-sm-12 mb-1\">\n          <div class=\"example-button-row\" align=\"end\">\n            <button class=\"btn-space\" mat-raised-button color=\"primary\" [class.auth-spinner]=\"posting\"\n              [disabled]=\"!mngForm.valid || posting\" (click)=\"submit()\">\n              {{ pageFunction }} Deduction\n            </button>\n            <button mat-raised-button color=\"warn\" (click)=\"onNoClick()\" tabindex=\"-1\">\n              Cancel\n            </button>\n          </div>\n        </div>\n      </div>\n    </ng-container>\n  </div>\n</div>","import { SelectionModel } from \"@angular/cdk/collections\";\nimport { HttpParams } from \"@angular/common/http\";\nimport { Component, OnInit, ViewChild } from \"@angular/core\";\nimport { FormGroup, FormBuilder, Validators } from \"@angular/forms\";\nimport { MatDialog, MatDialogConfig } from \"@angular/material/dialog\";\nimport { MatPaginator } from \"@angular/material/paginator\";\nimport { MatSort } from \"@angular/material/sort\";\nimport { MatTableDataSource } from \"@angular/material/table\";\nimport { Subject, takeUntil, Subscription } from \"rxjs\";\nimport { NotificationServiceService } from \"src/@core/Models/Notification/notification-service.service\";\nimport { CustomAllowanceService } from \"src/app/erp-hr/data/payroll-services/custom-allowance.service\";\nimport { SnackbarService } from \"src/app/shared/services/snackbar.service\";\nimport Swal from \"sweetalert2\";\nimport { ManagePayrollAllowancesComponent } from \"../allowance-payroll/manage-payroll-allowances/manage-payroll-allowances.component\";\nimport { PayrollService } from \"src/app/erp-hr/data/payroll-services/payroll.service\";\n\n\nexport interface PeriodicElement {\n  basicsalary: any;\n  empno: any;\n  fullname: any;\n  id: any;\n  insurancerelief: any;\n  nationalid: any;\n  personalrelief: any;\n}\nexport interface SelectedPayrollData {\n  empNo: any;\n  outSourced: any;\n}\n\n@Component({\n  selector: \"app-generate-payroll\",\n  templateUrl: \"./generate-payroll.component.html\",\n  styleUrls: [\"./generate-payroll.component.sass\"],\n})\nexport class GeneratePayrollComponent implements OnInit {\n  displayedColumns: string[] = [\n    \"select\",\n    \"index\",\n    \"empNo\",\n    \"fullName\",\n    \"nationalId\",\n    \"basic_salary\",\n    \"personalrelief\",\n  ];\n\n  loading: boolean = false;\n  data: any;\n  error: any;\n  dialogConfig: any;\n  destroy$: Subject<boolean> = new Subject<boolean>();\n\n  dataSource!: MatTableDataSource<any>;\n  @ViewChild(MatPaginator) paginator!: MatPaginator;\n  @ViewChild(MatSort) sort!: MatSort;\n\n  selection = new SelectionModel<any>(true, []);\n\n  downloadLoading: boolean = false;\n  posting: boolean = false;\n  showForm: boolean = false;\n\n  Form: FormGroup;\n  months: string[] = [\n    \"JANUARY\",\n    \"FEBRUARY\",\n    \"MARCH\",\n    \"APRIL\",\n    \"MAY\",\n    \"JUNE\",\n    \"JULY\",\n    \"AUGUST\",\n    \"SEPTEMBER\",\n    \"OCTOBER\",\n    \"NOVEMBER\",\n    \"DECEMBER\",    \n  ];\n  constructor(\n    private dialog: MatDialog,\n    private notificationAPI: NotificationServiceService,\n    private payrollService: PayrollService,\n    private snackbar: SnackbarService,\n    private fb: FormBuilder\n  ) { }\n\n  ngOnInit(): void {\n    const currentYear = new Date().getFullYear();\n    const currentMonthIndex = new Date().getMonth();\n    const currentMonthName = this.months[currentMonthIndex];\n\n    this.Form = this.fb.group({\n      year: [currentYear.toString(), Validators.required],\n      month: [currentMonthName, Validators.required],\n      approver: [\"HR PAYROLL VERIFIER\"],\n      status: \"PENDING\",\n    });\n    this.Form.valueChanges.subscribe(() => {\n      this.getData();\n    });\n\n    this.getData();\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next(true);\n    this.destroy$.complete();\n  }\n\n  //**************************************************************************************************** */\n\n  selectedStatus: string = \"PENDING\";\n  getSelectSelectedStatus() {\n    // this.getData();\n  }\n  getSelectedStatus(status: any) {\n    this.Form.patchValue({\n      status: status,\n    });\n\n    //  this.getData();\n  }\n  getSelectedApprover(approver: any) {\n    this.Form.patchValue({\n      approver: approver,\n    });\n\n    this.getData();\n  }\n  getData() {\n    this.loading = true;\n    this.dataSource = new MatTableDataSource([]);\n    this.dataSource.paginator = this.paginator;\n    this.dataSource.sort = this.sort;\n\n    this.selectedStatus = this.Form.value.status;\n\n    let params = new HttpParams()\n      .set(\"periodY\", this.Form.value.year)\n      .set(\"period_m\", this.Form.value.month);\n\n    this.payrollService\n      .getActiveSalariedEmployees(params)\n      .pipe(takeUntil(this.destroy$))\n      .subscribe({\n        next: (res) => {\n          console.log(\"res:: \", res);\n          if (res.statusCode === 200) {\n            this.data = res.entity;\n            console.log(\"Allowances displayed on table\", this.data);\n\n            this.loading = false;\n            this.dataSource = new MatTableDataSource(this.data);\n            this.dataSource.paginator = this.paginator;\n            this.dataSource.sort = this.sort;\n          } else {\n            this.loading = false;\n          }\n        },\n        error: (err) => {\n          this.loading = false;\n          this.notificationAPI.alertWarning(\"Server Error: \" + err.message);\n        },\n        complete: () => { },\n      });\n  }\n  refresh() {\n    this.getData();\n  }\n\n  input: any;\n  applyFilter(event: Event) {\n    const filterValue = (event.target as HTMLInputElement).value;\n    this.input = filterValue;\n    this.dataSource.filter = filterValue.trim().toLowerCase();\n    if (this.dataSource.paginator) {\n      this.dataSource.paginator.firstPage();\n    }\n  }\n\n  // ****************************************************************************************************************************\n  selectedRows: any[] = [];\n  atleastOneSelected: boolean = false;\n  isAllSelected() {\n    const numSelected = this.selection.selected.length;\n    const numRows = this.dataSource.data.length;\n    return numSelected === numRows;\n  }\n  masterToggle() {\n    if (this.isAllSelected()) {\n      this.selection.clear();\n      return;\n    }\n\n    this.selection.select(...this.dataSource.data);\n  }\n  checkboxLabel(row?: any): string {\n    if (!row) {\n      return `${this.isAllSelected() ? \"deselect\" : \"select\"} all`;\n    }\n    return `${this.selection.isSelected(row) ? \"deselect\" : \"select\"} row ${row.position + 1\n      }`;\n  }\n\n  expSelected() {\n    this.atleastOneSelected = true;\n    this.selectedRows = this.selection.selected;\n\n    console.log(\"this.selectedRows: \", this.selectedRows);\n  }\n\n  hasAccess: boolean = true;\n  processMultipleRows() {\n    let privilege = \"Validate Expenses\";\n\n    // this.hasAccess = this.accessControlService.hasPrivilege(\"FinanceModule\", [\n    //   privilege,\n    // ]);\n\n    if (this.hasAccess) {\n      Swal.fire({\n        icon: 'info',\n        title: '<span style=\"font-size: 20px;\">Generate Payroll</span>',\n        html:\n          '<p style=\"margin-top: 15px;\">Are you sure you want to generate the payroll?</p>' ,\n        showCancelButton: true,\n        confirmButtonText: 'Generate',\n        cancelButtonText: 'Cancel',\n        confirmButtonColor: '#3085d6',\n        cancelButtonColor: '#d33'\n      }).then((result) => {\n        if (result.isConfirmed) {\n\n          const payrollArray = this.selectedRows.map((element) => {\n            return {\n              empNo: element.empno,\n              outSourced: this.outSourced,\n            };\n          });\n          console.log(\"payrollArray: \", payrollArray)\n         this.onGeneratePayroll(payrollArray)\n\n        } else {\n          this.selection = new SelectionModel<any>(true, []);\n          this.selection.clear();\n        }\n      });\n    }\n  }\n\n  onProcessing = false;\n  outSourced = 'N';\n  dataResp: any\n\n\n  onGeneratePayroll(payrollArray) {\n    this.onProcessing = true;\n    if (payrollArray.length > 0) {\n      let params = new HttpParams()\n        .set('periodY', this.Form.value.year)\n        .set('period_m', this.Form.value.month);\n\n        console.log(\"params:: \", params)\n\n      this.payrollService.genSelectedPayrolls(params, payrollArray).subscribe(res => {\n        this.dataResp = res;\n        console.log(this.dataResp)\n        if (this.dataResp.statusCode === 200 || this.dataResp.statusCode === 201) {\n          this.notificationAPI.alertSuccess(this.dataResp.message);\n          this.onProcessing = false;\n        } else {\n          if (this.dataResp.entity != null) {\n            for (var i = 0; i < this.dataResp.entity.length; i++) {\n              this.notificationAPI.alertWarningByDuration(this.dataResp.entity[i], 15000);\n            }\n            this.onProcessing = false;\n          } else {\n            this.notificationAPI.alertWarning(this.dataResp.message);\n          }\n        }\n        this.getData();\n        this.onProcessing = false;\n        this.selection = new SelectionModel<any>(true, []);\n      }, err => {\n        this.notificationAPI.alertWarning(err.message)\n        this.getData();\n        this.onProcessing = false;\n        this.selection = new SelectionModel<any>(true, []);\n      })\n    }\n  }\n    //********************************************************************************************************** */\n\n\n}\n\n\n","<section class=\"content\">\n    <div class=\"content-block\">\n        <div class=\"block-header\">\n            <!-- breadcrumb -->\n            <app-breadcrumb [title]=\"'Generate Payroll'\" [items]=\"['Payroll']\" [active_item]=\"'Generate Payroll'\">\n            </app-breadcrumb>\n        </div>\n\n        <app-gen-widgets></app-gen-widgets>\n\n        <div class=\"row\">\n            <div class=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\">\n                <div class=\"card\">\n\n                    <div class=\"body\">\n                        <div class=\"table-responsive\">\n                            <div class=\"materialTableHeader\">\n                                <div class=\"row\">\n                                    <div class=\"col-8\">\n                                        <ul class=\"header-buttons-left ms-0\">\n                                            <li class=\"dropdown\">\n                                                <h2>Generate Payroll</h2>\n                                            </li>\n                                            <li class=\"dropdown m-l-20\">\n                                                <label for=\"search-input\"><i\n                                                        class=\"material-icons search-icon\">search</i></label>\n                                                <input placeholder=\"Filter...\" type=\"text\" (keyup)=\"applyFilter($event)\"\n                                                    #filter class=\"browser-default search-field\"\n                                                    aria-label=\"Search box\">\n                                            </li>\n                                            \n                                            <li>\n                                                <div class=\"m-l-10\" matTooltip=\"REFRESH\">\n                                                    <button mat-mini-fab color=\"primary\" (click)=\"refresh()\">\n                                                        <mat-icon class=\"col-white\">refresh</mat-icon>\n                                                    </button>\n                                                </div>\n                                            </li>\n                                            <!-- <li *ngIf=\"selection.selected.length > 0\">\n                                                <div class=\"m-l-10\" matTooltip=\"APPROVE\">\n                                                    <button mat-mini-fab color=\"primary\"\n                                                        (click)=\"processMultipleRows('APPROVED')\"\n                                                        class=\"mat-button-custom\">\n                                                        <mat-icon class=\"col-white\">check</mat-icon>\n                                                    </button>\n                                                </div>\n                                            </li>\n                                            <li *ngIf=\"selection.selected.length > 0\">\n                                                <div class=\"m-l-10\" matTooltip=\"REJECT\">\n                                                    <button mat-mini-fab color=\"warn\"\n                                                        (click)=\"processMultipleRows('REJECTED')\"\n                                                        class=\"mat-button-custom\">\n                                                        <mat-icon class=\"col-white\">cancel</mat-icon>\n                                                    </button>\n                                                </div>\n                                            </li>\n                                            <li *ngIf=\"selection.selected.length > 0\">\n                                                <div class=\"m-l-10\" matTooltip=\"RETURN\">\n                                                    <button mat-mini-fab color=\"accent\"\n                                                        (click)=\"processMultipleRows('RETURNED')\"\n                                                        class=\"mat-button-custom\">\n                                                        <mat-icon class=\"col-white\">undo</mat-icon>\n                                                    </button>\n                                                </div>\n                                            </li> -->\n\n                                            <li *ngIf=\"selection.selected.length > 0\">\n                                                <div class=\"m-l-10 m-t-2\" matTooltip=\"GENERATE\">\n                                                    <button  [disabled]=\"onProcessing\" mat-raised-button color=\"primary\" (click)=\"processMultipleRows()\">\n                                                        <mat-icon>cloud_download</mat-icon> GENERATE\n                                                      </button>\n                                                </div>\n\n                                                \n                                            </li>\n                                        </ul>\n                                    </div>\n                                    <div class=\"col-4\">\n                                        <ul class=\"header-buttons\">\n                                            <li>\n                                                <div class=\"export-button m-l-10\" matTooltip=\"XLSX\">\n                                                    <img src=\"assets/images/icons/xlsx.png\" alt=\"\"\n                                                        (click)=\"exporter.exportTable('xlsx', {fileName:'assets-list', sheet: 'sheet1'})\" />\n                                                </div>\n                                            </li>\n                                            <li>\n                                                <div class=\"export-button m-l-10\" matTooltip=\"CSV\">\n                                                    <img src=\"assets/images/icons/csv.png\" alt=\"\"\n                                                        (click)=\"exporter.exportTable('csv')\" />\n                                                </div>\n                                            </li>\n                                            <li>\n                                                <div class=\"export-button m-l-10\" matTooltip=\"JSON\">\n                                                    <img src=\"assets/images/icons/json.png\" alt=\"\"\n                                                        (click)=\"exporter.exportTable('json')\" />\n                                                </div>\n                                            </li>\n                                            <li>\n                                                <div class=\"export-button m-l-10\" matTooltip=\"TXT\">\n                                                    <img src=\"assets/images/icons/txt.png\" alt=\"\"\n                                                        (click)=\"exporter.exportTable('txt')\" />\n                                                </div>\n                                            </li>\n                                        </ul>\n                                    </div>\n                                </div>\n                            </div>\n                            <div class=\"materialTableHeader mt-2\">\n                                <div class=\"row\">\n                                    <div class=\"col-2\">\n                                        <form [formGroup]=\"Form\">\n                                            <div class=\"row\">\n                                                <div class=\"col-9\">\n                                                    <mat-form-field class=\"example-full-width\" appearance=\"fill\">\n                                                        <mat-label>Year</mat-label>\n                                                        <input matInput formControlName=\"year\" />\n                                                        <mat-error *ngIf=\"\n                                                    Form.get('year').hasError('required')\n                                                  \">\n                                                            Please Enter Year\n                                                        </mat-error>\n                                                    </mat-form-field>\n                                                </div>\n\n                                            </div>\n                                        </form>\n                                    </div>\n                                    <div class=\"col-2\">\n                                        <form [formGroup]=\"Form\">\n                                            <mat-form-field class=\"example-full-width\" appearance=\"fill\">\n                                                <mat-label>Month</mat-label>\n                                                <mat-select formControlName=\"month\"\n                                                  >\n                                                    <mat-option *ngFor=\"let month of months\" [value]=\"month\">{{\n                                                        month }}</mat-option>\n                                                </mat-select>\n                                                <mat-error *ngIf=\"Form.get('month').hasError('required')\">Please select\n                                                    a month</mat-error>\n                                            </mat-form-field>\n                                        </form>\n                                    </div>\n\n\n\n                                </div>\n                            </div>\n\n                            <mat-table #table matTableExporter [dataSource]=\"dataSource\" matSort class=\"mat-cell\"\n                                #exporter=\"matTableExporter\">\n\n                                <ng-container matColumnDef=\"select\">\n                                    <mat-header-cell *matHeaderCellDef [ngClass]=\"'tbl-col-width-per-4'\">\n                                        <mat-checkbox color=\"primary\" (change)=\"$event ? masterToggle() : null\"\n                                            [checked]=\"selection.hasValue() && isAllSelected()\"\n                                            [indeterminate]=\"selection.hasValue() && !isAllSelected()\"\n                                            [ngClass]=\"'tbl-checkbox'\" (change)=\"expSelected()\">\n                                        </mat-checkbox>\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" [ngClass]=\"'tbl-col-width-per-4'\">\n                                        <mat-checkbox color=\"primary\" (click)=\"$event.stopPropagation()\"\n                                            (change)=\"$event ? selection.toggle(row) : null\"\n                                            [checked]=\"selection.isSelected(row)\" [ngClass]=\"'tbl-checkbox'\"\n                                            [aria-label]=\"checkboxLabel(row)\" (change)=\"expSelected()\">\n                                        </mat-checkbox>\n                                    </mat-cell>\n                                </ng-container>\n\n\n\n                                <ng-container matColumnDef=\"index\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-10\">\n                                        Index\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row; let i =index\"\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-10\">\n                                        {{ i+1 }}\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"empNo\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Employee No\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        {{ row.empno }}\n                                    </mat-cell>\n                                </ng-container>\n                                \n                                <ng-container matColumnDef=\"fullName\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Full Name\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        {{ row.fullname }}\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"nationalId\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        National ID\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        {{ row.nationalid }}\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"basic_salary\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Basic Salary\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        {{ row.basicsalary }}\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"insurancerelief\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Insurance relief\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        {{ row.insurancerelief }}\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"personalrelief\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Personal Relief\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        {{ row.personalrelief }}\n                                    </mat-cell>\n                                </ng-container>\n\n\n\n                                 <ng-container matColumnDef=\"status\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Status\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row; let i = index\"\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-20\"\n                                        (click)=\"$event.stopPropagation()\">\n                                        <ng-container [ngSwitch]=\"row.status\">\n                                            <button *ngSwitchCase=\"'APPROVED'\"\n                                                class=\"badge badge-solid-green btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-check-circle\"></i>&nbsp;\n                                                {{ row.status }}\n                                            </button>\n                                            <button *ngSwitchCase=\"'REJECTED'\"\n                                                class=\"badge badge-solid-red btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-times-circle\"></i>&nbsp;\n                                                {{ row.status }}\n                                            </button>\n                                            <button *ngSwitchCase=\"'RETURNED'\"\n                                                class=\"badge badge-solid-brown btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-undo-alt\"></i>&nbsp;\n                                                {{ row.status }}\n                                            </button>\n                                            <button *ngSwitchCase=\"'PENDING'\"\n                                                class=\"badge badge-solid-blue btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-exclamation-circle\"></i>&nbsp;\n                                                {{ row.status }}\n                                            </button>\n                                            <button *ngSwitchDefault class=\"badge badge-solid-brown btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-question-circle\"></i>&nbsp;\n                                                {{ row.status }}\n                                            </button>\n                                        </ng-container>\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"verifiedFlag\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Verified\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        <ng-container *ngIf=\"row.verifiedFlag === 'Y'; else notVerified\">\n                                            <button class=\"badge badge-solid-green btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-check\"></i>&nbsp; Verified\n                                            </button>\n                                        </ng-container>\n                                        <ng-template #notVerified>\n                                            <button class=\"badge badge-solid-red btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-times\"></i>&nbsp; Not Verified\n                                            </button>\n                                        </ng-template>\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"deletedFlag\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Deleted\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        <ng-container *ngIf=\"row.deletedFlag === 'Y'; else notDeleted\">\n                                            <button class=\"badge badge-solid-red btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-trash\"></i>&nbsp; Deleted\n                                            </button>\n                                        </ng-container>\n                                        <ng-template #notDeleted>\n                                            <button class=\"badge badge-solid-green btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-check\"></i>&nbsp; Active\n                                            </button>\n                                        </ng-template>\n                                    </mat-cell>\n                                </ng-container>\n\n\n\n\n\n\n\n                                <ng-container matColumnDef=\"action\">\n                                    <mat-header-cell class=\"column-nowrap psl-3 tbl-col-width-per-15 pr-0\"\n                                        *matHeaderCellDef>\n                                        Action\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row; let i = index\"\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-15 pr-0\">\n\n                                        <button mat-icon-button color=\"accent\" (click)=\"$event.stopPropagation()\"\n                                            (click)=\"mngRecord('Update',row)\" class=\"tbl-action-btn\">\n                                            <app-feather-icons [icon]=\"'edit'\" [class]=\"'tbl-fav-edit'\">\n                                            </app-feather-icons>\n                                        </button>\n\n                                        <button mat-icon-button color=\"primary\" (click)=\"$event.stopPropagation()\"\n                                            (click)=\"mngRecord('View',row)\" class=\"tbl-action-btn\">\n                                            <app-feather-icons [icon]=\"'eye'\" [class]=\"'tbl-fav-eye'\">\n                                            </app-feather-icons>\n                                        </button>\n                                        <!-- \n                                        <button mat-icon-button color=\"primary\" (click)=\"$event.stopPropagation()\"\n                                            (click)=\"lockOrUnlockAccount(row)\" class=\"tbl-action-btn\">\n                                            <mat-icon>{{ row.isAcctActive === 'Y' ? 'lock' : 'lock_open' }}</mat-icon>\n                                        </button> -->\n\n                                        <button mat-icon-button color=\"accent\" (click)=\"$event.stopPropagation()\"\n                                            (click)=\"deleteRecord(row.id)\" class=\"tbl-action-btn\">\n                                            <app-feather-icons [icon]=\"'trash-2'\" [class]=\"'tbl-fav-delete'\">\n                                            </app-feather-icons>\n                                        </button>\n                                    </mat-cell>\n                                </ng-container>\n                                <mat-header-row *matHeaderRowDef=\"displayedColumns\">\n                                </mat-header-row>\n                                <mat-row *matRowDef=\"let row; columns: displayedColumns;\"  \n                                    [style.cursor]=\"'pointer'\" matRipple>\n                                </mat-row>\n\n\n                                <tr *matNoDataRow>\n                                    <td colspan=\"{{ displayedColumns.length }}\"> No data matching the filter \"{{ input\n                                        }}\"</td>\n                                </tr>\n                            </mat-table>\n                            <div class=\"m-2 mx-2\" *ngIf=\"loading || downloadLoading\">\n                                <mat-progress-bar color=\"primary\" mode=\"indeterminate\">\n                                </mat-progress-bar>\n                            </div>\n                            <div *ngIf=\"loading\" class=\"tbl-spinner\">\n                                <mat-progress-spinner color=\"primary\" [diameter]=\"40\" mode=\"indeterminate\">\n                                </mat-progress-spinner>\n                            </div>\n\n                            <mat-paginator [pageSize]=\"10\" [pageSizeOptions]=\"[2, 5, 10, 20, 30, 40, 50, 100]\"\n                                aria-label=\"Select page of users\">\n                            </mat-paginator>\n\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</section>","import { SelectionModel } from '@angular/cdk/collections';\nimport { HttpParams } from '@angular/common/http';\nimport { Component, OnInit, ViewChild } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { MatDialog, MatDialogConfig } from '@angular/material/dialog';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { Router } from '@angular/router';\nimport { Subject, takeUntil } from 'rxjs';\nimport { NotificationServiceService } from 'src/@core/Models/Notification/notification-service.service';\nimport { PayrollService } from 'src/app/erp-hr/data/payroll-services/payroll.service';\nimport { SnackbarService } from 'src/app/shared/services/snackbar.service';\nimport Swal from 'sweetalert2';\nimport { ManagePayrollAllowancesComponent } from '../allowance-payroll/manage-payroll-allowances/manage-payroll-allowances.component';\nimport { EmpGratuityService } from 'src/app/erp-hr/data/payroll-services/emp-gratuity.service';\n\n@Component({\n  selector: 'app-gratuity-payroll',\n  templateUrl: './gratuity-payroll.component.html',\n  styleUrls: ['./gratuity-payroll.component.sass']\n})\nexport class GratuityPayrollComponent implements OnInit {\n\n  displayedColumns: string[] = [\n    //\"select\",\n   // \"id\",\n    \"empPf\",\n    \"employeeName\",\n    \"fromdate\",\n    \"todate\",\n    \"salary\",\n    \"amount\",\n    \"rate\",\n    \"totalgratuity\",\n    \"periody\",\n    \"periodm\",\n    \"payrollCode\",\n    \"generatedon\",\n    \"status\",\n    // \"verifiedFlag\",\n    // \"deletedFlag\",\n    // \"action\",\n  ];\n\n  loading: boolean = false;\n  data: any;\n  error: any;\n  dialogConfig: any;\n  destroy$: Subject<boolean> = new Subject<boolean>();\n\n  dataSource!: MatTableDataSource<any>;\n  @ViewChild(MatPaginator) paginator!: MatPaginator;\n  @ViewChild(MatSort) sort!: MatSort;\n\n  selection = new SelectionModel<any>(true, []);\n\n  downloadLoading: boolean = false;\n  posting: boolean = false;\n  showForm: boolean = false;\n\n  Form: FormGroup\n  months: string[] = [\n    'January', 'February', 'March', 'April', 'May', 'June',\n    'July', 'August', 'September', 'October', 'November', 'December'\n  ];\n  constructor(\n    private dialog: MatDialog,\n    private notificationAPI: NotificationServiceService,\n    private payrollAPi: PayrollService,\n    private snackbar: SnackbarService,\n    private fb: FormBuilder,\n    private router: Router,\n    private gratuityAPI: EmpGratuityService,\n\n  ) { }\n\n  ngOnInit(): void {\n\n    const currentYear = new Date().getFullYear();\n    const currentMonthIndex = new Date().getMonth();\n    const currentMonthName = this.months[currentMonthIndex];\n\n    this.Form = this.fb.group({\n      year: [currentYear.toString(), Validators.required],\n      month: [currentMonthName, Validators.required],\n    });\n    this.Form.valueChanges.subscribe(() => {\n      this.getData();\n    });\n\n    this.getData();\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next(true);\n    this.destroy$.complete();\n  }\n\n  getData() {\n    this.loading = true;\n    this.dataSource = new MatTableDataSource([]);\n    this.dataSource.paginator = this.paginator;\n    this.dataSource.sort = this.sort;\n\n    let params = new HttpParams()\n      .set(\"periodM\", this.Form.value.month)\n      .set(\"periodY\", this.Form.value.year);\n\n      this.gratuityAPI\n        .read(params)\n      .pipe(takeUntil(this.destroy$))\n      .subscribe({\n        next: (res) => {\n\n          console.log(\"res\", res);\n\n          if (res.statusCode === 302) {\n            this.data = res.entity;\n            console.log(\"Allowances displayed on table\", this.data);\n\n            this.loading = false;\n            this.dataSource = new MatTableDataSource(this.data);\n            this.dataSource.paginator = this.paginator;\n            this.dataSource.sort = this.sort;\n          } else {\n            this.loading = false;\n          }\n        },\n        error: (err) => {\n          this.loading = false;\n          this.notificationAPI.alertWarning(\n            \"Server Error: \" + err.message\n          );\n        },\n        complete: () => { },\n      });\n  }\n  refresh() {\n    this.getData();\n  }\n\n  mngRecord(action: any, record?: any) {\n    console.log(\"this.action:; \", action);\n    console.log(\"this.record:; \", record);\n\n    const dialogConfig = new MatDialogConfig();\n    dialogConfig.disableClose = false;\n    dialogConfig.disableClose = true;\n    dialogConfig.width = \"800px\";\n    dialogConfig.data = {\n      action: action,\n      record: record,\n    };\n    const dialogRef = this.dialog.open(ManagePayrollAllowancesComponent, dialogConfig);\n    dialogRef.afterClosed().subscribe((result) => {\n      console.log(\"result:::\", result);\n\n      this.getData();\n    });\n  }\n  deleteRecord(id: number) {\n    // Swal.fire({\n    //   title: \"Are you sure?\",\n    //   text: \"THIS RECORD WILL BE DELETED PERMANENTLY!!\",\n    //   icon: \"warning\",\n    //   showCancelButton: true,\n    //   confirmButtonColor: \"#3085d6\",\n    //   cancelButtonColor: \"#d33\",\n    //   confirmButtonText: \"Yes, delete it!\",\n    // }).then((result) => {\n    //   if (result.isConfirmed) {\n    //     this.loading = true;\n    //     this.customAllowanceAPI\n    //       .delete(id)\n    //       .pipe(takeUntil(this.destroy$))\n    //       .subscribe({\n    //         next: (res) => {\n    //           if (res.statusCode == 200) {\n    //             this.getData();\n    //             this.loading = false;\n    //             this.notificationAPI.alertSuccess(\n    //               \"RECORD DELETED SUCCESSFULLY\"\n    //             );\n    //           } else {\n    //             this.getData();\n    //             this.loading = false;\n    //             this.notificationAPI.alertWarning(res.message);\n    //           }\n    //         },\n    //         error: (err) => {\n    //           this.loading = false;\n    //           this.notificationAPI.alertSuccess(\"Server Error: \" + err.message);\n    //         },\n    //         complete: () => {},\n    //       });\n    //   }\n    // });\n  }\n\n  input: any;\n  applyFilter(event: Event) {\n    const filterValue = (event.target as HTMLInputElement).value;\n    this.input = filterValue;\n    this.dataSource.filter = filterValue.trim().toLowerCase();\n    if (this.dataSource.paginator) {\n      this.dataSource.paginator.firstPage();\n    }\n  }\n\n  // ****************************************************************************************************************************\n  selectedRows: any[] = [];\n  atleastOneSelected: boolean = false;\n  isAllSelected() {\n    const numSelected = this.selection.selected.length;\n    const numRows = this.dataSource.data.length;\n    return numSelected === numRows;\n  }\n  masterToggle() {\n    if (this.isAllSelected()) {\n      this.selection.clear();\n      return;\n    }\n\n    this.selection.select(...this.dataSource.data);\n  }\n  checkboxLabel(row?: any): string {\n    if (!row) {\n      return `${this.isAllSelected() ? \"deselect\" : \"select\"} all`;\n    }\n    return `${this.selection.isSelected(row) ? \"deselect\" : \"select\"} row ${row.position + 1\n      }`;\n  }\n\n  expSelected() {\n    this.atleastOneSelected = true;\n    this.selectedRows = this.selection.selected;\n\n    console.log(\"this.selectedRows: \", this.selectedRows);\n  }\n\n  hasAccess: boolean = true;\n  processMultipleRows(status: any) {\n    let privilege = \"Validate Expenses\";\n\n    // this.hasAccess = this.accessControlService.hasPrivilege(\"FinanceModule\", [\n    //   privilege,\n    // ]);\n\n    if (this.hasAccess) {\n      Swal.fire({\n    title: '<span style=\"font-size: 20px;\">Enter Verifier Remarks</span>',\n    input: \"textarea\",\n    inputPlaceholder: \"Type your remarks here...\",\n    confirmButtonText: \"Submit\",\n    showCancelButton: true,\n    cancelButtonText: \"Cancel\",\n    icon: \"info\",\n\n    inputValidator: (value) => {\n          if (!value) {\n            return \"Please enter your remarks\";\n          }\n        },\n      }).then((result) => {\n        if (result.isConfirmed) {\n          const verifierRemarks = result.value;\n\n          const processedRows = this.selectedRows.map((element) => {\n            return {\n              id: element.id,\n              status: status,\n              verifierRemarks: verifierRemarks,\n            };\n          });\n\n          console.log(\"LOG: \", processedRows);\n\n          // this.customAllowanceAPI\n          //   .validateBulkAllowances(processedRows)\n          //   .pipe(takeUntil(this.destroy$))\n          //   .subscribe({\n          //     next: (res) => {\n          //       console.log(\"res: \", res);\n          //       if (res.statusCode == 201 || 200 || 302) {\n          //         this.snackbar.showNotification(\n          //           \"snackbar-success\",\n          //           res.message\n          //         );\n\n          //         this.selection = new SelectionModel<any>(true, []);\n          //         this.selection.clear();\n          //       } else {\n          //         this.snackbar.showNotification(\n          //           \"snackbar-danger\",\n          //           res.message\n          //         );\n          //       }\n          //     },\n          //     error: (err) => {\n          //       this.snackbar.showNotification(\"snackbar-danger\", err.message);\n          //     },\n          //     complete: () => {\n          //       this.getData();\n          //     },\n          //   }),\n          //   Subscription;\n        } else {\n          this.selection = new SelectionModel<any>(true, []);\n          this.selection.clear();\n        }\n      });\n    }\n  }\n\n  //************************************************************************************************* */\n\n}\n","<section class=\"content\">\n    <div class=\"content-block\">\n        <div class=\"block-header\">\n            <!-- breadcrumb -->\n            <app-breadcrumb [title]=\"'Gratuity'\" [items]=\"['Payroll']\" [active_item]=\"'Gratuity'\">\n            </app-breadcrumb>\n        </div>\n\n        <app-gen-widgets></app-gen-widgets>\n\n        <div class=\"row\">\n            <div class=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\">\n                <div class=\"card\">\n\n                    <div class=\"body\">\n                        <div class=\"table-responsive\">\n                            <div class=\"materialTableHeader\">\n                                <div class=\"row\">\n                                    <div class=\"col-8\">\n                                        <ul class=\"header-buttons-left ms-0\">\n                                            <li class=\"dropdown\">\n                                                <h2>Gratuity</h2>\n                                            </li>\n                                            <li class=\"dropdown m-l-20\">\n                                                <label for=\"search-input\"><i\n                                                        class=\"material-icons search-icon\">search</i></label>\n                                                <input placeholder=\"Filter...\" type=\"text\" (keyup)=\"applyFilter($event)\"\n                                                    #filter class=\"browser-default search-field\"\n                                                    aria-label=\"Search box\">\n                                            </li>\n                                            <!-- <li>\n                                                <div class=\"m-l-10\" matTooltip=\"ADD\">\n                                                    <button mat-mini-fab color=\"primary\" (click)=\"mngRecord('Add','')\">\n                                                        <mat-icon class=\"col-white\">add</mat-icon>\n                                                    </button>\n                                                </div>\n                                            </li> -->\n                                            <li>\n                                                <div class=\"m-l-10\" matTooltip=\"REFRESH\">\n                                                    <button mat-mini-fab color=\"primary\" (click)=\"refresh()\">\n                                                        <mat-icon class=\"col-white\">refresh</mat-icon>\n                                                    </button>\n                                                </div>\n                                            </li>\n                                            <li *ngIf=\"selection.selected.length > 0\">\n                                                <div class=\"m-l-10\" matTooltip=\"APPROVE\">\n                                                    <button mat-mini-fab color=\"primary\"\n                                                        (click)=\"processMultipleRows('APPROVED')\"\n                                                        class=\"mat-button-custom\">\n                                                        <mat-icon class=\"col-white\">check</mat-icon>\n                                                    </button>\n                                                </div>\n                                            </li>\n                                            <li *ngIf=\"selection.selected.length > 0\">\n                                                <div class=\"m-l-10\" matTooltip=\"REJECT\">\n                                                    <button mat-mini-fab color=\"warn\"\n                                                        (click)=\"processMultipleRows('REJECTED')\"\n                                                        class=\"mat-button-custom\">\n                                                        <mat-icon class=\"col-white\">cancel</mat-icon>\n                                                    </button>\n                                                </div>\n                                            </li>\n                                            <li *ngIf=\"selection.selected.length > 0\">\n                                                <div class=\"m-l-10\" matTooltip=\"RETURN\">\n                                                    <button mat-mini-fab color=\"accent\"\n                                                        (click)=\"processMultipleRows('RETURNED')\"\n                                                        class=\"mat-button-custom\">\n                                                        <mat-icon class=\"col-white\">undo</mat-icon>\n                                                    </button>\n                                                </div>\n                                            </li>\n                                        </ul>\n                                    </div>\n                                    <div class=\"col-4\">\n                                        <ul class=\"header-buttons\">\n                                            <li>\n                                                <div class=\"export-button m-l-10\" matTooltip=\"XLSX\">\n                                                    <img src=\"assets/images/icons/xlsx.png\" alt=\"\"\n                                                        (click)=\"exporter.exportTable('xlsx', {fileName:'assets-list', sheet: 'sheet1'})\" />\n                                                </div>\n                                            </li>\n                                            <li>\n                                                <div class=\"export-button m-l-10\" matTooltip=\"CSV\">\n                                                    <img src=\"assets/images/icons/csv.png\" alt=\"\"\n                                                        (click)=\"exporter.exportTable('csv')\" />\n                                                </div>\n                                            </li>\n                                            <li>\n                                                <div class=\"export-button m-l-10\" matTooltip=\"JSON\">\n                                                    <img src=\"assets/images/icons/json.png\" alt=\"\"\n                                                        (click)=\"exporter.exportTable('json')\" />\n                                                </div>\n                                            </li>\n                                            <li>\n                                                <div class=\"export-button m-l-10\" matTooltip=\"TXT\">\n                                                    <img src=\"assets/images/icons/txt.png\" alt=\"\"\n                                                        (click)=\"exporter.exportTable('txt')\" />\n                                                </div>\n                                            </li>\n                                        </ul>\n                                    </div>\n                                </div>\n                            </div>\n\n                            <div class=\"materialTableHeader mt-2 mx-2\">\n                                <div class=\"row\">\n                                    <div class=\"col-2\">\n                                        <form [formGroup]=\"Form\">\n                                            <div class=\"row\">\n                                                <div class=\"col-9\">\n                                                    <mat-form-field class=\"example-full-width\" appearance=\"fill\">\n                                                        <mat-label>Year</mat-label>\n                                                        <input matInput formControlName=\"year\" />\n                                                        <mat-error *ngIf=\"\n                                                    Form.get('year').hasError('required')\n                                                  \">\n                                                            Please Enter Year\n                                                        </mat-error>\n                                                    </mat-form-field>\n                                                </div>\n\n                                            </div>\n                                        </form>\n                                    </div>\n                                    <div class=\"col-2\">\n                                        <form [formGroup]=\"Form\">\n                                            <mat-form-field class=\"example-full-width\" appearance=\"fill\">\n                                                <mat-label>Month</mat-label>\n                                                <mat-select formControlName=\"month\">\n                                                    <mat-option *ngFor=\"let month of months\" [value]=\"month\">{{\n                                                        month }}</mat-option>\n                                                </mat-select>\n                                                <mat-error *ngIf=\"Form.get('month').hasError('required')\">Please select\n                                                    a month</mat-error>\n                                            </mat-form-field>\n                                        </form>\n                                    </div>\n\n\n                                </div>\n                            </div>\n\n                            <mat-table #table matTableExporter [dataSource]=\"dataSource\" matSort class=\"mat-cell\"\n                                #exporter=\"matTableExporter\">\n\n                                <ng-container matColumnDef=\"select\">\n                                    <mat-header-cell *matHeaderCellDef [ngClass]=\"'tbl-col-width-per-4'\">\n                                        <mat-checkbox color=\"primary\" (change)=\"$event ? masterToggle() : null\"\n                                            [checked]=\"selection.hasValue() && isAllSelected()\"\n                                            [indeterminate]=\"selection.hasValue() && !isAllSelected()\"\n                                            [ngClass]=\"'tbl-checkbox'\" (change)=\"expSelected()\">\n                                        </mat-checkbox>\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" [ngClass]=\"'tbl-col-width-per-4'\">\n                                        <mat-checkbox color=\"primary\" (click)=\"$event.stopPropagation()\"\n                                            (change)=\"$event ? selection.toggle(row) : null\"\n                                            [checked]=\"selection.isSelected(row)\" [ngClass]=\"'tbl-checkbox'\"\n                                            [aria-label]=\"checkboxLabel(row)\" (change)=\"expSelected()\">\n                                        </mat-checkbox>\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"id\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-10\">\n                                        ID\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-10\">\n                                        {{ row.id }}\n                                    </mat-cell>\n                                </ng-container>\n                                <ng-container matColumnDef=\"empPf\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-10\">\n                                        Employee PF\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-10\">\n                                        {{ row.empPf }}\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"employeeName\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-10\">\n                                        Employee Name\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-10\">\n                                        {{ row.employeeName }}\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"fromdate\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-10\">\n                                        From Date\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-10\">\n                                        {{ row.fromdate }}\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"todate\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-10\">\n                                        To Date\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-10\">\n                                        {{ row.todate }}\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"salary\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-10\">\n                                        Salary\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-10\">\n                                        {{ row.salary }}\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"amount\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-10\">\n                                        Amount\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-10\">\n                                        {{ row.amount }}\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"rate\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-10\">\n                                        Rate\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-10\">\n                                        {{ row.rate }}\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"totalgratuity\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-10\">\n                                        Total Gratuity\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-10\">\n                                        {{ row.totalgratuity }}\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"periody\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-10\">\n                                        Period Year\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-10\">\n                                        {{ row.periody }}\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"periodm\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-10\">\n                                        Period Month\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-10\">\n                                        {{ row.periodm }}\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"payrollCode\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-10\">\n                                        Payroll Code\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-10\">\n                                        {{ row.payrollCode }}\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"generatedon\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-10\">\n                                        Generated On\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-10\">\n                                        {{ row.generatedon }}\n                                    </mat-cell>\n                                </ng-container>\n                                <ng-container matColumnDef=\"postedTime\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Posted Time\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        {{ row.postedTime | date:'short' }}\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"status\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-10\">Status</mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row; let i = index\"\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-10\"\n                                        (click)=\"$event.stopPropagation()\">\n                                        <ng-container [ngSwitch]=\"row.status\">\n                                            <button *ngSwitchCase=\"'Posted'\"\n                                                class=\"badge badge-solid-blue btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-exclamation-circle\"></i>&nbsp;\n                                                {{ row.status }}\n                                            </button>\n                                            <button *ngSwitchCase=\"'Issued'\"\n                                                class=\"badge badge-solid-green btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-check-circle\"></i>&nbsp;\n                                                {{ row.status }}\n                                            </button>\n                                            <button *ngSwitchCase=\"'Inactive'\"\n                                                class=\"badge badge-solid-red btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-times-circle\"></i>&nbsp;\n                                                {{ row.status }}\n                                            </button>\n\n                                            <button *ngSwitchDefault class=\"badge badge-solid-brown btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-question-circle\"></i>&nbsp;\n                                                {{ row.status }}\n                                            </button>\n                                        </ng-container>\n                                    </mat-cell>\n                                </ng-container>\n\n\n                                <ng-container matColumnDef=\"verifiedFlag\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Verified\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        <ng-container *ngIf=\"row.verifiedFlag === 'Y'; else notVerified\">\n                                            <button class=\"badge badge-solid-green btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-check\"></i>&nbsp; Verified\n                                            </button>\n                                        </ng-container>\n                                        <ng-template #notVerified>\n                                            <button class=\"badge badge-solid-red btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-times\"></i>&nbsp; Not Verified\n                                            </button>\n                                        </ng-template>\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"deletedFlag\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Deleted\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        <ng-container *ngIf=\"row.deletedFlag === 'Y'; else notDeleted\">\n                                            <button class=\"badge badge-solid-red btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-trash\"></i>&nbsp; Deleted\n                                            </button>\n                                        </ng-container>\n                                        <ng-template #notDeleted>\n                                            <button class=\"badge badge-solid-green btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-check\"></i>&nbsp; Active\n                                            </button>\n                                        </ng-template>\n                                    </mat-cell>\n                                </ng-container>\n\n\n\n\n\n\n\n                                <ng-container matColumnDef=\"action\">\n                                    <mat-header-cell class=\"column-nowrap psl-3 tbl-col-width-per-15 pr-0\"\n                                        *matHeaderCellDef>\n                                        Action\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row; let i = index\"\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-15 pr-0\">\n\n                                        <button mat-icon-button color=\"accent\" (click)=\"$event.stopPropagation()\"\n                                            (click)=\"mngRecord('Update',row)\" class=\"tbl-action-btn\">\n                                            <app-feather-icons [icon]=\"'edit'\" [class]=\"'tbl-fav-edit'\">\n                                            </app-feather-icons>\n                                        </button>\n\n                                        <button mat-icon-button color=\"primary\" (click)=\"$event.stopPropagation()\"\n                                            (click)=\"mngRecord('View',row)\" class=\"tbl-action-btn\">\n                                            <app-feather-icons [icon]=\"'eye'\" [class]=\"'tbl-fav-eye'\">\n                                            </app-feather-icons>\n                                        </button>\n                                        <!-- \n                                        <button mat-icon-button color=\"primary\" (click)=\"$event.stopPropagation()\"\n                                            (click)=\"lockOrUnlockAccount(row)\" class=\"tbl-action-btn\">\n                                            <mat-icon>{{ row.isAcctActive === 'Y' ? 'lock' : 'lock_open' }}</mat-icon>\n                                        </button> -->\n\n                                        <button mat-icon-button color=\"accent\" (click)=\"$event.stopPropagation()\"\n                                            (click)=\"deleteRecord(row.id)\" class=\"tbl-action-btn\">\n                                            <app-feather-icons [icon]=\"'trash-2'\" [class]=\"'tbl-fav-delete'\">\n                                            </app-feather-icons>\n                                        </button>\n                                    </mat-cell>\n                                </ng-container>\n                                <mat-header-row *matHeaderRowDef=\"displayedColumns\">\n                                </mat-header-row>\n                                <mat-row *matRowDef=\"let row; columns: displayedColumns;\"  \n                                    [style.cursor]=\"'pointer'\" matRipple>\n                                </mat-row>\n\n\n                                <tr *matNoDataRow>\n                                    <td colspan=\"{{ displayedColumns.length }}\"> No data matching the filter \"{{ input\n                                        }}\"</td>\n                                </tr>\n                            </mat-table>\n                            <div class=\"m-2 mx-2\" *ngIf=\"loading || downloadLoading\">\n                                <mat-progress-bar color=\"primary\" mode=\"indeterminate\">\n                                </mat-progress-bar>\n                            </div>\n                            <div *ngIf=\"loading\" class=\"tbl-spinner\">\n                                <mat-progress-spinner color=\"primary\" [diameter]=\"40\" mode=\"indeterminate\">\n                                </mat-progress-spinner>\n                            </div>\n\n                            <mat-paginator [pageSize]=\"10\" [pageSizeOptions]=\"[2, 5, 10, 20, 30, 40, 50, 100]\"\n                                aria-label=\"Select page of users\">\n                            </mat-paginator>\n\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</section>","import { SelectionModel } from '@angular/cdk/collections';\nimport { HttpParams } from '@angular/common/http';\nimport { Component, OnInit, ViewChild } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { MatDialog, MatDialogConfig } from '@angular/material/dialog';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { Router } from '@angular/router';\nimport { Subject, takeUntil, Subscription } from 'rxjs';\nimport { MonthsService } from 'src/@core/Models/months/months.service';\nimport { NotificationServiceService } from 'src/@core/Models/Notification/notification-service.service';\nimport { CustomAllowanceService } from 'src/app/erp-hr/data/payroll-services/custom-allowance.service';\nimport { PayrollCircleService } from 'src/app/erp-hr/data/payroll-services/payroll-circle.service';\nimport { SnackbarService } from 'src/app/shared/services/snackbar.service';\nimport Swal from 'sweetalert2';\nimport { ManagePayrollAllowancesComponent } from '../allowance-payroll/manage-payroll-allowances/manage-payroll-allowances.component';\n\n@Component({\n  selector: 'app-open-payroll',\n  templateUrl: './open-payroll.component.html',\n  styleUrls: ['./open-payroll.component.sass']\n})\nexport class OpenPayrollComponent implements OnInit {\n\n  displayedColumns: string[] = [\n    // \"select\",\n    \"payrollCircleCode\",\n    \"periodY\",\n    \"periodM\",\n    \"openingDate\",\n\n    \"activeEmployees\",\n    \"totalOpeningGrossPay\",\n    \"totalOpeningDeductions\",\n    \"totalOpeningAllowances\",\n\n    \"openBy\",\n    \"status\",\n    // \"verifiedFlag\",\n    // \"deletedFlag\",\n    // \"action\",\n  ];\n\n  loading: boolean = false;\n  data: any;\n  error: any;\n  dialogConfig: any;\n  destroy$: Subject<boolean> = new Subject<boolean>();\n\n  dataSource!: MatTableDataSource<any>;\n  @ViewChild(MatPaginator) paginator!: MatPaginator;\n  @ViewChild(MatSort) sort!: MatSort;\n\n  selection = new SelectionModel<any>(true, []);\n\n  downloadLoading: boolean = false;\n  posting: boolean = false;\n  showForm: boolean = false;\n\n  Form: FormGroup\n  months: string[] = [\n    'January', 'February', 'March', 'April', 'May', 'June',\n    'July', 'August', 'September', 'October', 'November', 'December'\n  ];\n  constructor(\n    private dialog: MatDialog,\n    private notificationAPI: NotificationServiceService,\n    private payrollCircleAPi: PayrollCircleService,\n    private snackbar: SnackbarService,\n    private fb: FormBuilder\n  ) { }\n\n  ngOnInit(): void {\n\n    const currentYear = new Date().getFullYear();\n    const currentMonthIndex = new Date().getMonth();\n    const currentMonthName = this.months[currentMonthIndex];\n\n    this.Form = this.fb.group({\n      year: [currentYear.toString(), Validators.required],\n      month: [currentMonthName, Validators.required],\n    });\n    this.Form.valueChanges.subscribe(() => {\n      this.getData();\n    });\n\n    this.getData();\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next(true);\n    this.destroy$.complete();\n  }\n\n  getData() {\n    this.loading = true;\n    this.dataSource = new MatTableDataSource([]);\n    this.dataSource.paginator = this.paginator;\n    this.dataSource.sort = this.sort;\n\n    let params = new HttpParams()\n      .set(\"month\", this.Form.value.month)\n      .set(\"year\", this.Form.value.year);\n\n    this.payrollCircleAPi\n      .findAll()\n      .pipe(takeUntil(this.destroy$))\n      .subscribe({\n        next: (res) => {\n          if (res.statusCode === 200) {\n            this.data = res.entity;\n            console.log(\"Allowances displayed on table\", this.data);\n\n            this.loading = false;\n            this.dataSource = new MatTableDataSource(this.data);\n            this.dataSource.paginator = this.paginator;\n            this.dataSource.sort = this.sort;\n          } else {\n            this.loading = false;\n          }\n        },\n        error: (err) => {\n          this.loading = false;\n          this.notificationAPI.alertWarning(\n            \"Server Error: \" + err.message\n          );\n        },\n        complete: () => { },\n      });\n  }\n  refresh() {\n    this.getData();\n  }\n\n  mngRecord(action: any, record?: any) {\n    console.log(\"this.action:; \", action);\n    console.log(\"this.record:; \", record);\n\n    const dialogConfig = new MatDialogConfig();\n    dialogConfig.disableClose = false;\n    dialogConfig.disableClose = true;\n    dialogConfig.width = \"800px\";\n    dialogConfig.data = {\n      action: action,\n      record: record,\n    };\n    const dialogRef = this.dialog.open(ManagePayrollAllowancesComponent, dialogConfig);\n    dialogRef.afterClosed().subscribe((result) => {\n      console.log(\"result:::\", result);\n\n      this.getData();\n    });\n  }\n\n\n  input: any;\n  applyFilter(event: Event) {\n    const filterValue = (event.target as HTMLInputElement).value;\n    this.input = filterValue;\n    this.dataSource.filter = filterValue.trim().toLowerCase();\n    if (this.dataSource.paginator) {\n      this.dataSource.paginator.firstPage();\n    }\n  }\n\n  // ****************************************************************************************************************************\n  selectedRows: any[] = [];\n  atleastOneSelected: boolean = false;\n  isAllSelected() {\n    const numSelected = this.selection.selected.length;\n    const numRows = this.dataSource.data.length;\n    return numSelected === numRows;\n  }\n  masterToggle() {\n    if (this.isAllSelected()) {\n      this.selection.clear();\n      return;\n    }\n\n    this.selection.select(...this.dataSource.data);\n  }\n  checkboxLabel(row?: any): string {\n    if (!row) {\n      return `${this.isAllSelected() ? \"deselect\" : \"select\"} all`;\n    }\n    return `${this.selection.isSelected(row) ? \"deselect\" : \"select\"} row ${row.position + 1\n      }`;\n  }\n\n  expSelected() {\n    this.atleastOneSelected = true;\n    this.selectedRows = this.selection.selected;\n\n    console.log(\"this.selectedRows: \", this.selectedRows);\n  }\n\n  hasAccess: boolean = true;\n  processMultipleRows(status: any) {\n    let privilege = \"Validate Expenses\";\n\n    // this.hasAccess = this.accessControlService.hasPrivilege(\"FinanceModule\", [\n    //   privilege,\n    // ]);\n\n    if (this.hasAccess) {\n      Swal.fire({\n    title: '<span style=\"font-size: 20px;\">Enter Verifier Remarks</span>',\n    input: \"textarea\",\n    inputPlaceholder: \"Type your remarks here...\",\n    confirmButtonText: \"Submit\",\n    showCancelButton: true,\n    cancelButtonText: \"Cancel\",\n    icon: \"info\",\n\n    inputValidator: (value) => {\n          if (!value) {\n            return \"Please enter your remarks\";\n          }\n        },\n      }).then((result) => {\n        if (result.isConfirmed) {\n          const verifierRemarks = result.value;\n\n          const processedRows = this.selectedRows.map((element) => {\n            return {\n              id: element.id,\n              status: status,\n              verifierRemarks: verifierRemarks,\n            };\n          });\n\n          console.log(\"LOG: \", processedRows);\n\n          // this.payrollCircleAPi\n          //   .validateBulkAllowances(processedRows)\n          //   .pipe(takeUntil(this.destroy$))\n          //   .subscribe({\n          //     next: (res) => {\n          //       console.log(\"res: \", res);\n          //       if (res.statusCode == 201 || 200 || 302) {\n          //         this.snackbar.showNotification(\n          //           \"snackbar-success\",\n          //           res.message\n          //         );\n\n          //         this.selection = new SelectionModel<any>(true, []);\n          //         this.selection.clear();\n          //       } else {\n          //         this.snackbar.showNotification(\n          //           \"snackbar-danger\",\n          //           res.message\n          //         );\n          //       }\n          //     },\n          //     error: (err) => {\n          //       this.snackbar.showNotification(\"snackbar-danger\", err.message);\n          //     },\n          //     complete: () => {\n          //       this.getData();\n          //     },\n          //   }),\n          //   Subscription;\n        } else {\n          this.selection = new SelectionModel<any>(true, []);\n          this.selection.clear();\n        }\n      });\n    }\n  }\n\n  onSubmit() {\n    this.loading = true;\n    let param = new HttpParams()\n      .set('periodM', this.Form.value.month)\n      .set('periodY', this.Form.value.year)\n      .set('remarks', 'Init Payroll');\n    this.payrollCircleAPi.open(param)\n      .pipe(takeUntil(this.destroy$))\n      .subscribe({\n        next: (res) => {\n          console.log(\"res: \", res);\n          if (res.statusCode == 201) {\n            this.snackbar.showNotification(\n              \"snackbar-success\",\n              res.message\n            );\n          } else {\n            this.snackbar.showNotification(\n              \"snackbar-danger\",\n              res.message\n            );\n          }\n        },\n        error: (err) => {\n          this.snackbar.showNotification(\"snackbar-danger\", err.message);\n          this.loading = false;\n        },\n        complete: () => {\n          this.loading = false;\n          this.getData()\n        },\n      }),\n      Subscription;\n  }\n}\n\n\n// onSubmit(){\n//   if(this.isValidYear(this.year)){\n//     if (window.confirm('Are you sure you want to open payroll for this period? Year: '+this.year +' month: '+this.month)) {\n//     this.loading = true;\n//     let param = new HttpParams()\n//     .set('periodM', this.month)\n//     .set('periodY',this.year)\n//     .set('remarks','Init Payroll'); \n//     this.payrollCircleAPi.open(param).subscribe(res=>{\n//       this.loading = false;\n//       this.dataRes = res;\n//       if(this.dataRes.statusCode === 200 || this.dataRes.statusCode === 201 ){\n//         this.notificationAPI.alertSuccess(this.dataRes.message);\n//       }else{\n//         this.notificationAPI.alertWarning(this.dataRes.message);\n//       }\n//       this.getData();\n//     })\n//     }\n//   }else{\n//     this.notificationAPI.alertWarning(\"Invalid Year!\");\n//   }\n// }\n\n","<section class=\"content\">\n  <div class=\"content-block\">\n    <div class=\"block-header\">\n      <!-- breadcrumb -->\n      <app-breadcrumb [title]=\"'Open Payroll'\" [items]=\"['Payroll']\" [active_item]=\"'Open Payroll'\">\n      </app-breadcrumb>\n    </div>\n\n    <app-gen-widgets></app-gen-widgets>\n\n    <div class=\"row\">\n      <div class=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\">\n        <div class=\"card\">\n\n          <div class=\"body\">\n            <div class=\"table-responsive\">\n              <div class=\"materialTableHeader\">\n                <div class=\"row\">\n                  <div class=\"col-8\">\n                    <ul class=\"header-buttons-left ms-0\">\n                      <li class=\"dropdown\">\n                        <h2>Open Payroll</h2>\n                      </li>\n                      <li class=\"dropdown m-l-20\">\n                        <label for=\"search-input\"><i class=\"material-icons search-icon\">search</i></label>\n                        <input placeholder=\"Filter...\" type=\"text\" (keyup)=\"applyFilter($event)\" #filter\n                          class=\"browser-default search-field\" aria-label=\"Search box\">\n                      </li>\n                      <li>\n                        <div class=\"m-l-10\" matTooltip=\"ADD PAYROLL\">\n                          <button mat-mini-fab color=\"primary\" (click)=\"onSubmit()\">\n                            <mat-icon class=\"col-white\">add</mat-icon>\n                          </button>\n                        </div>\n                      </li>\n                      <li>\n                        <div class=\"m-l-10\" matTooltip=\"REFRESH\">\n                          <button mat-mini-fab color=\"primary\" (click)=\"refresh()\">\n                            <mat-icon class=\"col-white\">refresh</mat-icon>\n                          </button>\n                        </div>\n                      </li>\n                      <li *ngIf=\"selection.selected.length > 0\">\n                        <div class=\"m-l-10\" matTooltip=\"APPROVE\">\n                          <button mat-mini-fab color=\"primary\" (click)=\"processMultipleRows('APPROVED')\"\n                            class=\"mat-button-custom\">\n                            <mat-icon class=\"col-white\">check</mat-icon>\n                          </button>\n                        </div>\n                      </li>\n                      <li *ngIf=\"selection.selected.length > 0\">\n                        <div class=\"m-l-10\" matTooltip=\"REJECT\">\n                          <button mat-mini-fab color=\"warn\" (click)=\"processMultipleRows('REJECTED')\"\n                            class=\"mat-button-custom\">\n                            <mat-icon class=\"col-white\">cancel</mat-icon>\n                          </button>\n                        </div>\n                      </li>\n                      <li *ngIf=\"selection.selected.length > 0\">\n                        <div class=\"m-l-10\" matTooltip=\"RETURN\">\n                          <button mat-mini-fab color=\"accent\" (click)=\"processMultipleRows('RETURNED')\"\n                            class=\"mat-button-custom\">\n                            <mat-icon class=\"col-white\">undo</mat-icon>\n                          </button>\n                        </div>\n                      </li>\n                    </ul>\n                  </div>\n                  <div class=\"col-4\">\n                    <ul class=\"header-buttons\">\n                      <li>\n                        <div class=\"export-button m-l-10\" matTooltip=\"XLSX\">\n                          <img src=\"assets/images/icons/xlsx.png\" alt=\"\"\n                            (click)=\"exporter.exportTable('xlsx', {fileName:'assets-list', sheet: 'sheet1'})\" />\n                        </div>\n                      </li>\n                      <li>\n                        <div class=\"export-button m-l-10\" matTooltip=\"CSV\">\n                          <img src=\"assets/images/icons/csv.png\" alt=\"\" (click)=\"exporter.exportTable('csv')\" />\n                        </div>\n                      </li>\n                      <li>\n                        <div class=\"export-button m-l-10\" matTooltip=\"JSON\">\n                          <img src=\"assets/images/icons/json.png\" alt=\"\" (click)=\"exporter.exportTable('json')\" />\n                        </div>\n                      </li>\n                      <li>\n                        <div class=\"export-button m-l-10\" matTooltip=\"TXT\">\n                          <img src=\"assets/images/icons/txt.png\" alt=\"\" (click)=\"exporter.exportTable('txt')\" />\n                        </div>\n                      </li>\n                    </ul>\n                  </div>\n                </div>\n              </div>\n\n              <div class=\"materialTableHeader mt-2\">\n                <div class=\"row\">\n                  <div class=\"col-2\">\n                    <form [formGroup]=\"Form\">\n                      <div class=\"row\">\n                        <div class=\"col-9\">\n                          <mat-form-field class=\"example-full-width\" appearance=\"fill\">\n                            <mat-label>Year</mat-label>\n                            <input matInput formControlName=\"year\" />\n                            <mat-error *ngIf=\"\n                                                  Form.get('year').hasError('required')\n                                                \">\n                              Please Enter Year\n                            </mat-error>\n                          </mat-form-field>\n                        </div>\n\n                      </div>\n                    </form>\n                  </div>\n                  <div class=\"col-2\">\n                    <form [formGroup]=\"Form\">\n                      <mat-form-field class=\"example-full-width\" appearance=\"fill\">\n                        <mat-label>Month</mat-label>\n                        <mat-select formControlName=\"month\">\n                          <mat-option *ngFor=\"let month of months\" [value]=\"month\">{{\n                            month }}</mat-option>\n                        </mat-select>\n                        <mat-error *ngIf=\"Form.get('month').hasError('required')\">Please select\n                          a month</mat-error>\n                      </mat-form-field>\n                    </form>\n                  </div>\n\n\n\n                </div>\n              </div>\n\n              <mat-table #table matTableExporter [dataSource]=\"dataSource\" matSort class=\"mat-cell\"\n                #exporter=\"matTableExporter\">\n\n                <ng-container matColumnDef=\"select\">\n                  <mat-header-cell *matHeaderCellDef [ngClass]=\"'tbl-col-width-per-4'\">\n                    <mat-checkbox color=\"primary\" (change)=\"$event ? masterToggle() : null\"\n                      [checked]=\"selection.hasValue() && isAllSelected()\"\n                      [indeterminate]=\"selection.hasValue() && !isAllSelected()\" [ngClass]=\"'tbl-checkbox'\"\n                      (change)=\"expSelected()\">\n                    </mat-checkbox>\n                  </mat-header-cell>\n                  <mat-cell *matCellDef=\"let row\" [ngClass]=\"'tbl-col-width-per-4'\">\n                    <mat-checkbox color=\"primary\" (click)=\"$event.stopPropagation()\"\n                      (change)=\"$event ? selection.toggle(row) : null\" [checked]=\"selection.isSelected(row)\"\n                      [ngClass]=\"'tbl-checkbox'\" [aria-label]=\"checkboxLabel(row)\" (change)=\"expSelected()\">\n                    </mat-checkbox>\n                  </mat-cell>\n                </ng-container>\n\n\n                <!-- Payroll Circle Code -->\n                <ng-container matColumnDef=\"payrollCircleCode\">\n                  <mat-header-cell class=\"column-nowrap psl-3 tbl-col-width-per-15 pr-0\" *matHeaderCellDef>\n                    Payroll Circle Code\n                  </mat-header-cell>\n                  <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-15 pr-0\">\n                    {{ row.payrollCircleCode }}\n                  </mat-cell>\n                </ng-container>\n\n                <!-- Period Year -->\n                <ng-container matColumnDef=\"periodY\">\n                  <mat-header-cell class=\"column-nowrap psl-3 tbl-col-width-per-15 pr-0\" *matHeaderCellDef>\n                    Period Year\n                  </mat-header-cell>\n                  <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-15 pr-0\">\n                    {{ row.periodY }}\n                  </mat-cell>\n                </ng-container>\n\n                <!-- Period Month -->\n                <ng-container matColumnDef=\"periodM\">\n                  <mat-header-cell class=\"column-nowrap psl-3 tbl-col-width-per-15 pr-0\" *matHeaderCellDef>\n                    Period Month\n                  </mat-header-cell>\n                  <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-15 pr-0\">\n                    {{ row.periodM }}\n                  </mat-cell>\n                </ng-container>\n\n                <!-- Opening Date -->\n                <ng-container matColumnDef=\"openingDate\">\n                  <mat-header-cell class=\"column-nowrap psl-3 tbl-col-width-per-15 pr-0\" *matHeaderCellDef>\n                    Opening Date\n                  </mat-header-cell>\n                  <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-15 pr-0\">\n                    {{ row.openingDate }}\n                  </mat-cell>\n                </ng-container>\n\n                <!-- Opened By -->\n                <ng-container matColumnDef=\"openBy\">\n                  <mat-header-cell class=\"column-nowrap psl-3 tbl-col-width-per-20 pr-0\" *matHeaderCellDef>\n                    Opened By\n                  </mat-header-cell>\n                  <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20 pr-0\">\n                    {{ row.openBy }}\n                  </mat-cell>\n                </ng-container>\n\n                <!-- Active Employees -->\n                <ng-container matColumnDef=\"activeEmployees\">\n                  <mat-header-cell class=\"column-nowrap psl-3 tbl-col-width-per-25 pr-0\" *matHeaderCellDef>\n                    Active Employees\n                  </mat-header-cell>\n                  <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-25 pr-0\">\n                    {{ row.activeEmployees }}\n                  </mat-cell>\n                </ng-container>\n\n                <!-- Total Opening Gross Pay -->\n                <ng-container matColumnDef=\"totalOpeningGrossPay\">\n                  <mat-header-cell class=\"column-nowrap psl-3 tbl-col-width-per-20 pr-0\" *matHeaderCellDef>\n                    Opening Gross Pay\n                  </mat-header-cell>\n                  <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20 pr-0\">\n                    {{ row.totalOpeningGrossPay }}\n                  </mat-cell>\n                </ng-container>\n\n                <!-- Total Opening Deductions -->\n                <ng-container matColumnDef=\"totalOpeningDeductions\">\n                  <mat-header-cell class=\"column-nowrap psl-3 tbl-col-width-per-20 pr-0\" *matHeaderCellDef>\n                    Opening Deductions\n                  </mat-header-cell>\n                  <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20 pr-0\">\n                    {{ row.totalOpeningDeductions }}\n                  </mat-cell>\n                </ng-container>\n\n                <!-- Total Opening Allowances -->\n                <ng-container matColumnDef=\"totalOpeningAllowances\">\n                  <mat-header-cell class=\"column-nowrap psl-3 tbl-col-width-per-20 pr-0\" *matHeaderCellDef>\n                     Opening Allowances\n                  </mat-header-cell>\n                  <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20 pr-0\">\n                    {{ row.totalOpeningAllowances }}\n                  </mat-cell>\n                </ng-container>\n\n\n                <ng-container matColumnDef=\"postedTime\">\n                  <mat-header-cell *matHeaderCellDef mat-sort-header class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                    Posted Time\n                  </mat-header-cell>\n                  <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                    {{ row.postedTime | date:'short' }}\n                  </mat-cell>\n                </ng-container>\n\n                <ng-container matColumnDef=\"status\">\n                  <mat-header-cell *matHeaderCellDef mat-sort-header class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                    Status\n                  </mat-header-cell>\n                  <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                    <ng-container *ngIf=\"row.isClosed === 'Y'; else isOpen\">\n                      <button class=\"badge badge-solid-green btn btn btn-sm m-1\">\n                        <i class=\"fas fa-check\"></i>&nbsp; Closed\n                      </button>\n                    </ng-container>\n                    <ng-template #isOpen>\n                      <ng-container *ngIf=\"row.isOpen === 'Y'; else notOpen\">\n                        <button class=\"badge badge-solid-blue btn btn btn-sm m-1\">\n                          <i class=\"fas fa-door-open\"></i>&nbsp; Open\n                        </button>\n                      </ng-container>\n                      <ng-template #notOpen>\n                        <button class=\"badge badge-solid-red btn btn btn-sm m-1\">\n                          <i class=\"fas fa-times\"></i>&nbsp; Not Open\n                        </button>\n                      </ng-template>\n                    </ng-template>\n                  </mat-cell>\n                </ng-container>\n\n                \n                <ng-container matColumnDef=\"verifiedFlag\">\n                  <mat-header-cell *matHeaderCellDef mat-sort-header class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                    Verified\n                  </mat-header-cell>\n                  <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                    <ng-container *ngIf=\"row.verifiedFlag === 'Y'; else notVerified\">\n                      <button class=\"badge badge-solid-green btn btn btn-sm m-1\">\n                        <i class=\"fas fa-check\"></i>&nbsp; Verified\n                      </button>\n                    </ng-container>\n                    <ng-template #notVerified>\n                      <button class=\"badge badge-solid-red btn btn btn-sm m-1\">\n                        <i class=\"fas fa-times\"></i>&nbsp; Not Verified\n                      </button>\n                    </ng-template>\n                  </mat-cell>\n                </ng-container>\n\n                <ng-container matColumnDef=\"deletedFlag\">\n                  <mat-header-cell *matHeaderCellDef mat-sort-header class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                    Deleted\n                  </mat-header-cell>\n                  <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                    <ng-container *ngIf=\"row.deletedFlag === 'Y'; else notDeleted\">\n                      <button class=\"badge badge-solid-red btn btn btn-sm m-1\">\n                        <i class=\"fas fa-trash\"></i>&nbsp; Deleted\n                      </button>\n                    </ng-container>\n                    <ng-template #notDeleted>\n                      <button class=\"badge badge-solid-green btn btn btn-sm m-1\">\n                        <i class=\"fas fa-check\"></i>&nbsp; Active\n                      </button>\n                    </ng-template>\n                  </mat-cell>\n                </ng-container>\n\n\n\n\n\n\n\n                <ng-container matColumnDef=\"action\">\n                  <mat-header-cell class=\"column-nowrap psl-3 tbl-col-width-per-15 pr-0\" *matHeaderCellDef>\n                    Action\n                  </mat-header-cell>\n                  <mat-cell *matCellDef=\"let row; let i = index\" class=\"column-nowrap psl-3 tbl-col-width-per-15 pr-0\">\n\n                    <button mat-icon-button color=\"accent\" (click)=\"$event.stopPropagation()\"\n                      (click)=\"mngRecord('Update',row)\" class=\"tbl-action-btn\">\n                      <app-feather-icons [icon]=\"'edit'\" [class]=\"'tbl-fav-edit'\">\n                      </app-feather-icons>\n                    </button>\n\n                    <button mat-icon-button color=\"primary\" (click)=\"$event.stopPropagation()\"\n                      (click)=\"mngRecord('View',row)\" class=\"tbl-action-btn\">\n                      <app-feather-icons [icon]=\"'eye'\" [class]=\"'tbl-fav-eye'\">\n                      </app-feather-icons>\n                    </button>\n                    <!-- \n                                      <button mat-icon-button color=\"primary\" (click)=\"$event.stopPropagation()\"\n                                          (click)=\"lockOrUnlockAccount(row)\" class=\"tbl-action-btn\">\n                                          <mat-icon>{{ row.isAcctActive === 'Y' ? 'lock' : 'lock_open' }}</mat-icon>\n                                      </button> -->\n\n                    <button mat-icon-button color=\"accent\" (click)=\"$event.stopPropagation()\"\n                      (click)=\"deleteRecord(row.id)\" class=\"tbl-action-btn\">\n                      <app-feather-icons [icon]=\"'trash-2'\" [class]=\"'tbl-fav-delete'\">\n                      </app-feather-icons>\n                    </button>\n                  </mat-cell>\n                </ng-container>\n                <mat-header-row *matHeaderRowDef=\"displayedColumns\">\n                </mat-header-row>\n                <mat-row *matRowDef=\"let row; columns: displayedColumns;\"\n                  [style.cursor]=\"'pointer'\" matRipple>\n                </mat-row>\n\n\n                <tr *matNoDataRow>\n                  <td colspan=\"{{ displayedColumns.length }}\"> No data matching the filter \"{{ input\n                    }}\"</td>\n                </tr>\n              </mat-table>\n              <div class=\"m-2 mx-2\" *ngIf=\"loading || downloadLoading\">\n                <mat-progress-bar color=\"primary\" mode=\"indeterminate\">\n                </mat-progress-bar>\n              </div>\n              <div *ngIf=\"loading\" class=\"tbl-spinner\">\n                <mat-progress-spinner color=\"primary\" [diameter]=\"40\" mode=\"indeterminate\">\n                </mat-progress-spinner>\n              </div>\n\n              <mat-paginator [pageSize]=\"10\" [pageSizeOptions]=\"[2, 5, 10, 20, 30, 40, 50, 100]\"\n                aria-label=\"Select page of users\">\n              </mat-paginator>\n\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</section>","import { SelectionModel } from \"@angular/cdk/collections\";\nimport { HttpParams } from \"@angular/common/http\";\nimport { Component, OnInit, ViewChild } from \"@angular/core\";\nimport { FormGroup, FormBuilder, Validators } from \"@angular/forms\";\nimport { MatDialog, MatDialogConfig } from \"@angular/material/dialog\";\nimport { MatPaginator } from \"@angular/material/paginator\";\nimport { MatSort } from \"@angular/material/sort\";\nimport { MatTableDataSource } from \"@angular/material/table\";\nimport { Subject, takeUntil } from \"rxjs\";\nimport { NotificationServiceService } from \"src/@core/Models/Notification/notification-service.service\";\nimport { PayrollService } from \"src/app/erp-hr/data/payroll-services/payroll.service\";\nimport { ReportService } from \"src/app/erp-hr/data/payroll-services/report.service\";\nimport { SnackbarService } from \"src/app/shared/services/snackbar.service\";\nimport Swal from \"sweetalert2\";\nimport { ManagePayrollOtherDeductionsComponent } from \"../deductions-payroll/manage-payroll-other-deductions/manage-payroll-other-deductions.component\";\nimport { EmployeeService } from \"src/app/erp-hr/data/employee-services/employee-management.service\";\n\n@Component({\n  selector: \"app-p-nine-generation\",\n  templateUrl: \"./p-nine-generation.component.html\",\n  styleUrls: [\"./p-nine-generation.component.sass\"],\n})\nexport class PNineGenerationComponent implements OnInit {\n  displayedColumns: string[] = [\n    //\"select\",\n    \"id\",\n    \"pfNo\",\n    \"fullName\",\n    \"id_no\",\n    \"salary\",\n\n    \"status\",\n    // \"verifiedFlag\",\n    // \"deletedFlag\",\n    \"action\",\n  ];\n\n  loading: boolean = false;\n  data: any;\n  error: any;\n  dialogConfig: any;\n  destroy$: Subject<boolean> = new Subject<boolean>();\n\n  dataSource!: MatTableDataSource<any>;\n  @ViewChild(MatPaginator) paginator!: MatPaginator;\n  @ViewChild(MatSort) sort!: MatSort;\n\n  selection = new SelectionModel<any>(true, []);\n\n  downloadLoading: boolean = false;\n  posting: boolean = false;\n  showForm: boolean = false;\n\n  Form: FormGroup;\n  months: string[] = [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\",\n  ];\n  constructor(\n    private dialog: MatDialog,\n    private notificationAPI: NotificationServiceService,\n    private snackbar: SnackbarService,\n    private fb: FormBuilder,\n    private payrollService: PayrollService,\n    private reportAPI: ReportService,\n    private employeeService: EmployeeService\n  ) {}\n\n  ngOnInit(): void {\n    // const currentYear = new Date().getFullYear();\n    // const currentMonthIndex = new Date().getMonth();\n    // const currentMonthName = this.months[currentMonthIndex];\n\n    // this.Form = this.fb.group({\n    //   year: [currentYear.toString(), Validators.required],\n    //   month: [currentMonthName, Validators.required],\n    // });\n    // this.Form.valueChanges.subscribe(() => {\n    //   this.getData();\n    // });\n\n    this.getData();\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next(true);\n    this.destroy$.complete();\n  }\n\n  isFinal = \"Y\";\n  getData() {\n    this.loading = true;\n    this.dataSource = new MatTableDataSource([]);\n    this.dataSource.paginator = this.paginator;\n    this.dataSource.sort = this.sort;\n\n    this.loading = true;\n    let params = new HttpParams().set(\"status\", \"APPROVED\");\n\n    this.employeeService\n      .readByStatus(params)\n      .pipe(takeUntil(this.destroy$))\n      .subscribe({\n        next: (res) => {\n          if (res.statusCode === 302) {\n            console.log(\"res:: \", res);\n\n            this.dataSource = new MatTableDataSource(res.entity);\n            this.dataSource.paginator = this.paginator;\n            this.dataSource.sort = this.sort;\n          } else {\n            this.notificationAPI.alertWarning(res.message);\n\n            this.loading = false;\n          }\n        },\n        error: (err) => {\n          this.loading = false;\n          this.notificationAPI.alertWarning(\"Server Error: \" + err.message);\n        },\n        complete: () => {\n          this.loading = false;\n        },\n      });\n  }\n  refresh() {\n    this.getData();\n  }\n\n  mngRecord(action: any, record?: any) {\n    console.log(\"this.action:; \", action);\n    console.log(\"this.record:; \", record);\n\n    const dialogConfig = new MatDialogConfig();\n    dialogConfig.disableClose = false;\n    dialogConfig.disableClose = true;\n    dialogConfig.width = \"800px\";\n    dialogConfig.data = {\n      action: action,\n      record: record,\n    };\n    const dialogRef = this.dialog.open(\n      ManagePayrollOtherDeductionsComponent,\n      dialogConfig\n    );\n    dialogRef.afterClosed().subscribe((result) => {\n      console.log(\"result:::\", result);\n\n      this.getData();\n    });\n  }\n  deleteRecord(id: number) {\n    Swal.fire({\n      title: \"Are you sure?\",\n      text: \"THIS RECORD WILL BE DELETED PERMANENTLY!!\",\n      icon: \"warning\",\n      showCancelButton: true,\n      confirmButtonColor: \"#3085d6\",\n      cancelButtonColor: \"#d33\",\n      confirmButtonText: \"Yes, delete it!\",\n    }).then((result) => {\n      if (result.isConfirmed) {\n        this.loading = true;\n        // this.customDeductionService\n        //   .delete(id)\n        //   .pipe(takeUntil(this.destroy$))\n        //   .subscribe({\n        //     next: (res) => {\n        //       if (res.statusCode == 200) {\n        //         this.getData();\n        //         this.loading = false;\n        //         this.notificationAPI.alertSuccess(\n        //           \"RECORD DELETED SUCCESSFULLY\"\n        //         );\n        //       } else {\n        //         this.getData();\n        //         this.loading = false;\n        //         this.notificationAPI.alertWarning(res.message);\n        //       }\n        //     },\n        //     error: (err) => {\n        //       this.loading = false;\n        //       this.notificationAPI.alertSuccess(\"Server Error: \" + err.message);\n        //     },\n        //     complete: () => {},\n        //   });\n      }\n    });\n  }\n\n  input: any;\n  applyFilter(event: Event) {\n    const filterValue = (event.target as HTMLInputElement).value;\n    this.input = filterValue;\n    this.dataSource.filter = filterValue.trim().toLowerCase();\n    if (this.dataSource.paginator) {\n      this.dataSource.paginator.firstPage();\n    }\n  }\n\n  // ****************************************************************************************************************************\n  selectedRows: any[] = [];\n  atleastOneSelected: boolean = false;\n  isAllSelected() {\n    const numSelected = this.selection.selected.length;\n    const numRows = this.dataSource.data.length;\n    return numSelected === numRows;\n  }\n  masterToggle() {\n    if (this.isAllSelected()) {\n      this.selection.clear();\n      return;\n    }\n\n    this.selection.select(...this.dataSource.data);\n  }\n  checkboxLabel(row?: any): string {\n    if (!row) {\n      return `${this.isAllSelected() ? \"deselect\" : \"select\"} all`;\n    }\n    return `${this.selection.isSelected(row) ? \"deselect\" : \"select\"} row ${\n      row.position + 1\n    }`;\n  }\n\n  expSelected() {\n    this.atleastOneSelected = true;\n    this.selectedRows = this.selection.selected;\n\n    console.log(\"this.selectedRows: \", this.selectedRows);\n  }\n\n  isLoading: boolean = false;\n  hasAccess: boolean = true;\n  processMultipleRows() {\n    // Personal\n    // Workmail\n    // Swal.fire({\n    //   title: \"Select Email Type\",\n    //   input: \"select\",\n    //   inputOptions: {\n    //     Personal: \"Personal\",\n    //     Workmail: \"Workmail\",\n    //   },\n    //   inputPlaceholder: \"Select Email Type\",\n    //   confirmButtonText: \"Submit\",\n    //   showCancelButton: true,\n    //   cancelButtonText: \"Cancel\",\n    //   preConfirm: (selectedUserType) => {\n    //     return new Promise<void>((resolve, reject) => {\n    //       if (this.hasAccess) {\n    //         Swal.fire({\n    //           title: \"Confirm Submission\",\n    //           text: \"Are you sure you want to process emails for selected records?\",\n    //           icon: \"question\",\n    //           showCancelButton: true,\n    //           confirmButtonText: \"Submit\",\n    //           cancelButtonText: \"Cancel\",\n    //         }).then((result) => {\n    //           if (result.isConfirmed) {\n    //             const processedRows = this.selection.selected.map((element) => {\n    //               return {\n    //                 payrollCode: element.payrollId,\n    //               };\n    //             });\n\n    //             console.log(\"LOG: \", processedRows);\n\n    //             let params = { emailType: selectedUserType };\n\n    //             this.payrollService\n    //               .processPayslipEmails(params, processedRows)\n    //               .pipe(takeUntil(this.destroy$))\n    //               .subscribe({\n    //                 next: (res) => {\n    //                   console.log(\"res: \", res);\n    //                   if (\n    //                     res.statusCode == 201 ||\n    //                     res.statusCode.statusCode == 200 ||\n    //                     res.statusCode.statusCode == 302\n    //                   ) {\n    //                     this.notificationAPI.alertSuccess(res.message);\n\n    //                     this.selection = new SelectionModel<any>(true, []);\n    //                     this.selection.clear();\n    //                   } else {\n    //                     this.notificationAPI.alertWarning(res.message);\n    //                   }\n    //                 },\n    //                 error: (err) => {\n    //                   this.notificationAPI.alertWarning(err.message);\n\n    //                   this.selection = new SelectionModel<any>(true, []);\n    //                   this.selection.clear();\n    //                   this.getData();\n    //                   resolve();\n    //                 },\n    //                 complete: () => {\n    //                   this.selection = new SelectionModel<any>(true, []);\n    //                   this.selection.clear();\n    //                   this.getData();\n    //                   resolve();\n    //                 },\n    //               });\n    //           } else {\n    //             this.selection = new SelectionModel<any>(true, []);\n    //             this.selection.clear();\n    //             reject();\n    //           }\n    //         });\n    //       } else {\n    //         resolve();\n    //       }\n    //     });\n    //   },\n    // });\n  }\n\n  //******************************************************************************************** */\n  getPayslip(id: number) {\n    this.loading = true;\n    this.reportAPI.payslip(id).subscribe({\n      next: (value) => {\n        this.loading = false;\n        this.notificationAPI.alertSuccess(\"Downloading Payslip Report\");\n        let url = window.URL.createObjectURL(value.data);\n        let a = document.createElement(\"a\");\n        document.body.appendChild(a);\n        a.setAttribute(\"style\", \"display: none\");\n        a.setAttribute(\"target\", \"blank\");\n        a.href = url;\n        a.download = value.filename;\n        a.click();\n        window.URL.revokeObjectURL(url);\n        a.remove();\n      },\n      error: (err) => {\n        this.loading = false;\n        this.notificationAPI.alertWarning(\"NO PAYSLIP REPORT FOUND\");\n      },\n      complete: () => {},\n    });\n  }\n\n  download(row) {\n    Swal.fire({\n      title: \"Generate Employee P9 Form\",\n      html: `\n        <input id=\"swal-input1\" class=\"swal2-input\" type=\"number\" placeholder=\"Enter Year\">\n      `,\n      showCancelButton: true,\n      confirmButtonText: \"Submit\",\n      showLoaderOnConfirm: true,\n      icon: \"info\",\n      preConfirm: () => {\n        const year = (<HTMLInputElement>document.getElementById(\"swal-input1\"))\n          .value;\n        if (!year) {\n          Swal.showValidationMessage(\"Year is required\");\n        }\n        return year;\n      },\n    }).then((result) => {\n      if (result.isConfirmed) {\n        this.downloadP9(row, result.value);\n      }\n    });\n  }\n\n  downloadP9(row, year) {\n    this.loading = true;\n    let params = new HttpParams().set(\"period_y\", year.toString()).set(\"empPF\", row.empNo.toString());\n    this.reportAPI.generateEmployeeP9form(params).subscribe(\n      (res) => {\n        this.loading = false;\n        if (res.statusCode === 404) {\n          this.notificationAPI.alertWarning(res.message);\n        } else {\n          this.notificationAPI.alertSuccess(\"Downloading Employee P9-FORM\");\n          let url = window.URL.createObjectURL(res.data);\n          let a = document.createElement(\"a\");\n          document.body.appendChild(a);\n          a.setAttribute(\"style\", \"display: none\");\n          a.setAttribute(\"target\", \"blank\");\n          a.href = url;\n          a.download = res.filename;\n          a.click();\n          window.URL.revokeObjectURL(url);\n          a.remove();\n        }\n      },\n      (err) => {\n        this.loading = false;\n        this.notificationAPI.alertWarning(\"NO DATA FOUND\");\n      }\n    );\n  }\n\n  \n}\n","<section class=\"content\">\n    <div class=\"content-block\">\n        <div class=\"block-header\">\n            <!-- breadcrumb -->\n            <app-breadcrumb [title]=\"'Process P-9'\" [items]=\"['Payroll']\" [active_item]=\"'Process P-9'\">\n            </app-breadcrumb>\n        </div>\n\n        <app-gen-widgets></app-gen-widgets>\n\n        <div class=\"row\">\n            <div class=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\">\n                <div class=\"card\">\n                    <div class=\"body\">\n                        <div class=\"table-responsive\">\n                            <div class=\"materialTableHeader\">\n                                <div class=\"row\">\n                                    <div class=\"col-8\">\n                                        <ul class=\"header-buttons-left ms-0\">\n                                            <li class=\"dropdown\">\n                                                <h2>Process P-9</h2>\n                                            </li>\n                                            <li class=\"dropdown m-l-20\">\n                                                <label for=\"search-input\"><i\n                                                        class=\"material-icons search-icon\">search</i></label>\n                                                <input placeholder=\"Filter...\" type=\"text\" (keyup)=\"applyFilter($event)\"\n                                                    #filter class=\"browser-default search-field\"\n                                                    aria-label=\"Search box\" />\n                                            </li>\n                                            <!-- <li>\n                                                <div class=\"m-l-10\" matTooltip=\"ADD\">\n                                                    <button mat-mini-fab color=\"primary\" (click)=\"mngRecord('Add', '')\">\n                                                        <mat-icon class=\"col-white\">add</mat-icon>\n                                                    </button>\n                                                </div>\n                                            </li> -->\n                                            <li>\n                                                <div class=\"m-l-10\" matTooltip=\"REFRESH\">\n                                                    <button mat-mini-fab color=\"primary\" (click)=\"refresh()\">\n                                                        <mat-icon class=\"col-white\">refresh</mat-icon>\n                                                    </button>\n                                                </div>\n                                            </li>\n                                            <li *ngIf=\"selection.selected.length > 0\">\n                                                <div class=\"m-l-10\" matTooltip=\"Process Emails\">\n                                                    <button mat-mini-fab color=\"primary\"\n                                                        (click)=\"processMultipleRows('EMAIL_PROCESSING')\"\n                                                        class=\"mat-button-custom\">\n                                                        <mat-icon class=\"col-white\">email</mat-icon>\n                                                    </button>\n                                                </div>\n                                            </li>\n\n                                        </ul>\n                                    </div>\n                                    <div class=\"col-4\">\n                                        <ul class=\"header-buttons\">\n                                            <li>\n                                                <div class=\"export-button m-l-10\" matTooltip=\"XLSX\">\n                                                    <img src=\"assets/images/icons/xlsx.png\" alt=\"\" (click)=\"\n                              exporter.exportTable('xlsx', {\n                                fileName: 'assets-list',\n                                sheet: 'sheet1'\n                              })\n                            \" />\n                                                </div>\n                                            </li>\n                                            <li>\n                                                <div class=\"export-button m-l-10\" matTooltip=\"CSV\">\n                                                    <img src=\"assets/images/icons/csv.png\" alt=\"\"\n                                                        (click)=\"exporter.exportTable('csv')\" />\n                                                </div>\n                                            </li>\n                                            <li>\n                                                <div class=\"export-button m-l-10\" matTooltip=\"JSON\">\n                                                    <img src=\"assets/images/icons/json.png\" alt=\"\"\n                                                        (click)=\"exporter.exportTable('json')\" />\n                                                </div>\n                                            </li>\n                                            <li>\n                                                <div class=\"export-button m-l-10\" matTooltip=\"TXT\">\n                                                    <img src=\"assets/images/icons/txt.png\" alt=\"\"\n                                                        (click)=\"exporter.exportTable('txt')\" />\n                                                </div>\n                                            </li>\n                                        </ul>\n                                    </div>\n                                </div>\n                            </div>\n\n                            <!-- <div class=\"materialTableHeader mt-2\">\n                                <div class=\"row\">\n                                    <div class=\"col-2\">\n                                        <form [formGroup]=\"Form\">\n                                            <div class=\"row\">\n                                                <div class=\"col-9\">\n                                                    <mat-form-field class=\"example-full-width\" appearance=\"fill\">\n                                                        <mat-label>Year</mat-label>\n                                                        <input matInput formControlName=\"year\" />\n                                                        <mat-error *ngIf=\"Form.get('year').hasError('required')\">\n                                                            Please Enter Year\n                                                        </mat-error>\n                                                    </mat-form-field>\n                                                </div>\n                                            </div>\n                                        </form>\n                                    </div>\n                                    <div class=\"col-2\">\n                                        <form [formGroup]=\"Form\">\n                                            <mat-form-field class=\"example-full-width\" appearance=\"fill\">\n                                                <mat-label>Month</mat-label>\n                                                <mat-select formControlName=\"month\">\n                                                    <mat-option *ngFor=\"let month of months\" [value]=\"month\">{{ month\n                                                        }}</mat-option>\n                                                </mat-select>\n                                                <mat-error *ngIf=\"Form.get('month').hasError('required')\">Please select\n                                                    a month</mat-error>\n                                            </mat-form-field>\n                                        </form>\n                                    </div>\n                                </div>\n                            </div> -->\n\n                            <div class=\"m-2 mx-2\" *ngIf=\"loading || downloadLoading\">\n                                <mat-progress-bar color=\"primary\" mode=\"indeterminate\">\n                                </mat-progress-bar>\n                            </div>\n\n                            <mat-table #table matTableExporter [dataSource]=\"dataSource\" matSort class=\"mat-cell\"\n                                #exporter=\"matTableExporter\">\n                                <ng-container matColumnDef=\"select\">\n                                    <mat-header-cell *matHeaderCellDef [ngClass]=\"'tbl-col-width-per-4'\">\n                                        <mat-checkbox color=\"primary\" (change)=\"$event ? masterToggle() : null\"\n                                            [checked]=\"selection.hasValue() && isAllSelected()\"\n                                            [indeterminate]=\"selection.hasValue() && !isAllSelected()\"\n                                            [ngClass]=\"'tbl-checkbox'\" (change)=\"expSelected()\">\n                                        </mat-checkbox>\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" [ngClass]=\"'tbl-col-width-per-4'\">\n                                        <mat-checkbox color=\"primary\" (click)=\"$event.stopPropagation()\"\n                                            (change)=\"$event ? selection.toggle(row) : null\"\n                                            [checked]=\"selection.isSelected(row)\" [ngClass]=\"'tbl-checkbox'\"\n                                            [aria-label]=\"checkboxLabel(row)\" (change)=\"expSelected()\">\n                                        </mat-checkbox>\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"id\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-10\">\n                                        ID\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-10\">\n                                        {{ row.id }}\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"pfNo\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        PF No\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        {{ row.empNo }}\n                                    </mat-cell>\n                                </ng-container>\n                                \n                                <ng-container matColumnDef=\"fullName\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Full Name\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        {{ row.firstName }} {{ row.middleName }}  {{ row.lastName }}\n                                    </mat-cell>\n                                </ng-container>\n                                \n                                <ng-container matColumnDef=\"id_no\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        ID No\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        {{ row.nationalId }}\n                                    </mat-cell>\n                                </ng-container>\n                                \n                                <ng-container matColumnDef=\"salary\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Salary\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        {{row.basicSalary | currency : 'Ksh.'}} \n                                    </mat-cell>\n                                </ng-container>\n                                \n\n                                <ng-container matColumnDef=\"postedTime\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Posted Time\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        {{ row.postedTime | date : \"short\" }}\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"status\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Status\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row; let i = index\"\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-20\"\n                                        (click)=\"$event.stopPropagation()\">\n                                        <ng-container [ngSwitch]=\"row.status\">\n                                            <button *ngSwitchCase=\"'APPROVED'\"\n                                                class=\"badge badge-solid-green btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-check-circle\"></i>&nbsp;\n                                                {{ row.status }}\n                                            </button>\n                                            <button *ngSwitchCase=\"'REJECTED'\"\n                                                class=\"badge badge-solid-red btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-times-circle\"></i>&nbsp;\n                                                {{ row.status }}\n                                            </button>\n                                            <button *ngSwitchCase=\"'RETURNED'\"\n                                                class=\"badge badge-solid-brown btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-undo-alt\"></i>&nbsp;\n                                                {{ row.status }}\n                                            </button>\n                                            <button *ngSwitchCase=\"'PENDING'\"\n                                                class=\"badge badge-solid-blue btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-exclamation-circle\"></i>&nbsp;\n                                                {{ row.status }}\n                                            </button>\n                                            <button *ngSwitchDefault class=\"badge badge-solid-brown btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-question-circle\"></i>&nbsp;\n                                                {{ row.status }}\n                                            </button>\n                                        </ng-container>\n                                    </mat-cell>\n                                </ng-container>\n\n\n                                <ng-container matColumnDef=\"verifiedFlag\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Verified\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        <ng-container *ngIf=\"row.verifiedFlag === 'Y'; else notVerified\">\n                                            <button class=\"badge badge-solid-green btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-check\"></i>&nbsp; Verified\n                                            </button>\n                                        </ng-container>\n                                        <ng-template #notVerified>\n                                            <button class=\"badge badge-solid-red btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-times\"></i>&nbsp; Not Verified\n                                            </button>\n                                        </ng-template>\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"deletedFlag\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Deleted\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        <ng-container *ngIf=\"row.deletedFlag === 'Y'; else notDeleted\">\n                                            <button class=\"badge badge-solid-red btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-trash\"></i>&nbsp; Deleted\n                                            </button>\n                                        </ng-container>\n                                        <ng-template #notDeleted>\n                                            <button class=\"badge badge-solid-green btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-check\"></i>&nbsp; Active\n                                            </button>\n                                        </ng-template>\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"action\">\n                                    <mat-header-cell class=\"column-nowrap psl-3 tbl-col-width-per-15 pr-0\"\n                                        *matHeaderCellDef>\n                                        Action\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row; let i = index\"\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-15 pr-0\">\n                                        <button mat-icon-button color=\"accent\" (click)=\"download(row)\"\n                                            class=\"tbl-action-btn\">\n                                            <app-feather-icons [icon]=\"'download'\"\n                                                [class]=\"'tbl-download-pdf'\"></app-feather-icons>\n                                        </button>\n                                    </mat-cell>\n                                </ng-container>\n                                <mat-header-row *matHeaderRowDef=\"displayedColumns\">\n                                </mat-header-row>\n                                <mat-row *matRowDef=\"let row; columns: displayedColumns\" [style.cursor]=\"'pointer'\"\n                                    matRipple>\n                                </mat-row>\n\n                                <tr *matNoDataRow>\n                                    <td colspan=\"{{ displayedColumns.length }}\">\n                                        No data matching the filter \"{{ input }}\"\n                                    </td>\n                                </tr>\n                            </mat-table>\n\n                            <div *ngIf=\"loading\" class=\"tbl-spinner\">\n                                <mat-progress-spinner color=\"primary\" [diameter]=\"40\" mode=\"indeterminate\">\n                                </mat-progress-spinner>\n                            </div>\n\n                            <mat-paginator [pageSize]=\"10\" [pageSizeOptions]=\"[2, 5, 10, 20, 30, 40, 50, 100]\"\n                                aria-label=\"Select page of users\">\n                            </mat-paginator>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</section>","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-payroll-dashboard-page',\n  templateUrl: './payroll-dashboard-page.component.html',\n  styleUrls: ['./payroll-dashboard-page.component.sass']\n})\nexport class PayrollDashboardPageComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<section class=\"content\">\n    <div class=\"content-block\">\n      <div class=\"block-header\">\n        <app-breadcrumb [title]=\"'Payroll Dashboard'\" [items]=\"['Payroll']\" [active_item]=\"'Payroll Dashboard'\">\n        </app-breadcrumb>\n      </div>\n      <app-gen-widgets></app-gen-widgets>\n  \n      <app-payroll-dashboard></app-payroll-dashboard>\n    </div>\n  </section>\n  ","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { RoutePrivilegeGuard } from 'src/app/erp-procurement/data/services/_AccessControlAuthGuard.service';\nimport { PayrollDashboardPageComponent } from './payroll-dashboard-page/payroll-dashboard-page.component';\nimport { OpenPayrollComponent } from './open-payroll/open-payroll.component';\nimport { ReconcilePayrollComponent } from './reconcile-payroll/reconcile-payroll.component';\nimport { AllPayrollAllowancesComponent } from './allowance-payroll/all-payroll-allowances/all-payroll-allowances.component';\nimport { AllPayrollOtherDeductionsComponent } from './deductions-payroll/all-payroll-other-deductions/all-payroll-other-deductions.component';\nimport { AllPayrollStaffLoansComponent } from './staff-loans-payroll/all-payroll-staff-loans/all-payroll-staff-loans.component';\nimport { GeneratePayrollComponent } from './generate-payroll/generate-payroll.component';\nimport { ReportsPayrollComponent } from './reports-payroll/reports-payroll.component';\nimport { AllSalaryIncrementsComponent } from './salary-increment-payroll/all-salary-increments/all-salary-increments.component';\nimport { AllToFinanceComponent } from './to-finance-payroll/all-to-finance/all-to-finance.component';\nimport { ProcessPayslipsComponent } from './payslips/process-payslips/process-payslips.component';\nimport { ManagePayslipsComponent } from './payslips/manage-payslips/manage-payslips.component';\nimport { PNineGenerationComponent } from './p-nine-generation/p-nine-generation.component';\nimport { GratuityPayrollComponent } from './gratuity-payroll/gratuity-payroll.component';\nimport { ManageToFinanceComponent } from './to-finance-payroll/manage-to-finance/manage-to-finance.component';\nimport { ManageClosePayrollComponent } from './close-payrolls/manage-close-payroll/manage-close-payroll.component';\nimport { ClosePayrollComponent } from './close-payrolls/close-payroll/close-payroll.component';\n\nconst routes: Routes = [\n  {\n    path: \"payroll-dashboard\",\n    component: PayrollDashboardPageComponent,\n    canActivate: [RoutePrivilegeGuard],\n    data: {\n      clientName: \"HumanResourceModule\",\n      requiredPrivilege: [\"Dashboard\"],\n    },\n  },\n\n  {\n    path: \"open-payroll\",\n    component: OpenPayrollComponent,\n    canActivate: [RoutePrivilegeGuard],\n    data: {\n      clientName: \"HumanResourceModule\",\n      requiredPrivilege: [\"Dashboard\"],\n    },\n  },\n\n  {\n    path: \"salary-increment-payroll\",\n    component: AllSalaryIncrementsComponent,\n    canActivate: [RoutePrivilegeGuard],\n    data: {\n      clientName: \"HumanResourceModule\",\n      requiredPrivilege: [\"Dashboard\"],\n    },\n  },\n\n \n\n  {\n    path: \"allowance-payroll\",\n    component: AllPayrollAllowancesComponent,\n    canActivate: [RoutePrivilegeGuard],\n    data: {\n      clientName: \"HumanResourceModule\",\n      requiredPrivilege: [\"Dashboard\"],\n    },\n  },\n\n\n  {\n    path: \"deductions-payroll\",\n    component: AllPayrollOtherDeductionsComponent,\n    canActivate: [RoutePrivilegeGuard],\n    data: {\n      clientName: \"HumanResourceModule\",\n      requiredPrivilege: [\"Dashboard\"],\n    },\n  },\n\n  {\n    path: \"staff-loans-payroll\",\n    component: AllPayrollStaffLoansComponent,\n    canActivate: [RoutePrivilegeGuard],\n    data: {\n      clientName: \"HumanResourceModule\",\n      requiredPrivilege: [\"Dashboard\"],\n    },\n  },\n\n  {\n    path: \"generate-payroll\",\n    component: GeneratePayrollComponent,\n    canActivate: [RoutePrivilegeGuard],\n    data: {\n      clientName: \"HumanResourceModule\",\n      requiredPrivilege: [\"Dashboard\"],\n    },\n  },\n\n\n  {\n    path: \"reconcile-payroll\",\n    component: ReconcilePayrollComponent,\n    canActivate: [RoutePrivilegeGuard],\n    data: {\n      clientName: \"HumanResourceModule\",\n      requiredPrivilege: [\"Dashboard\"],\n    },\n  },\n\n\n  {\n    path: \"close-payroll\",\n    component: ClosePayrollComponent,\n    canActivate: [RoutePrivilegeGuard],\n    data: {\n      clientName: \"HumanResourceModule\",\n      requiredPrivilege: [\"Dashboard\"],\n    },\n  },\n  {\n    path: \"manage-close-payroll\",\n    component: ManageClosePayrollComponent,\n    canActivate: [RoutePrivilegeGuard],\n    data: {\n      clientName: \"HumanResourceModule\",\n      requiredPrivilege: [\"Dashboard\"],\n    },\n  },\n\n  {\n    path: \"reports-payroll\",\n    component: ReportsPayrollComponent,\n    canActivate: [RoutePrivilegeGuard],\n    data: {\n      clientName: \"HumanResourceModule\",\n      requiredPrivilege: [\"Dashboard\"],\n    },\n  },\n\n  {\n    path: \"to-finance-payroll\",\n    component: AllToFinanceComponent,\n    canActivate: [RoutePrivilegeGuard],\n    data: {\n      clientName: \"HumanResourceModule\",\n      requiredPrivilege: [\"Dashboard\"],\n    },\n  },\n  {\n    path: \"manage-to-finance-payroll\",\n    component: ManageToFinanceComponent,\n    canActivate: [RoutePrivilegeGuard],\n    data: {\n      clientName: \"HumanResourceModule\",\n      requiredPrivilege: [\"Dashboard\"],\n    },\n  },\n  {\n    path: \"manage-payslips-payroll\",\n    component: ManagePayslipsComponent,\n    canActivate: [RoutePrivilegeGuard],\n    data: {\n      clientName: \"HumanResourceModule\",\n      requiredPrivilege: [\"Dashboard\"],\n    },\n  },\n  {\n    path: \"process-payslips-payroll\",\n    component: ProcessPayslipsComponent,\n    canActivate: [RoutePrivilegeGuard],\n    data: {\n      clientName: \"HumanResourceModule\",\n      requiredPrivilege: [\"Dashboard\"],\n    },\n  },\n\n  {\n    path: \"process-p-9-payroll\",\n    component: PNineGenerationComponent,\n    canActivate: [RoutePrivilegeGuard],\n    data: {\n      clientName: \"HumanResourceModule\",\n      requiredPrivilege: [\"Dashboard\"],\n    },\n  },\n\n  {\n    path: \"gratuity-payroll\",\n    component: GratuityPayrollComponent,\n    canActivate: [RoutePrivilegeGuard],\n    data: {\n      clientName: \"HumanResourceModule\",\n      requiredPrivilege: [\"Dashboard\"],\n    },\n  },\n\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class PayrollRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { PayrollRoutingModule } from './payroll-routing.module';\n\nimport { ComponentsModule } from 'src/app/shared/components/components.module';\nimport { SharedModule } from 'src/app/shared/shared.module';\nimport { DashboardModule } from '../dashboard/dashboard.module';\nimport { PayrollDashboardPageComponent } from './payroll-dashboard-page/payroll-dashboard-page.component';\nimport { OpenPayrollComponent } from './open-payroll/open-payroll.component';\nimport { ReconcilePayrollComponent } from './reconcile-payroll/reconcile-payroll.component';\nimport { AllPayrollAllowancesComponent } from './allowance-payroll/all-payroll-allowances/all-payroll-allowances.component';\nimport { ManagePayrollAllowancesComponent } from './allowance-payroll/manage-payroll-allowances/manage-payroll-allowances.component';\nimport { AllPayrollOtherDeductionsComponent } from './deductions-payroll/all-payroll-other-deductions/all-payroll-other-deductions.component';\nimport { ManagePayrollOtherDeductionsComponent } from './deductions-payroll/manage-payroll-other-deductions/manage-payroll-other-deductions.component';\nimport { ManagePayrollStaffLoansComponent } from './staff-loans-payroll/manage-payroll-staff-loans/manage-payroll-staff-loans.component';\nimport { AllPayrollStaffLoansComponent } from './staff-loans-payroll/all-payroll-staff-loans/all-payroll-staff-loans.component';\nimport { GeneratePayrollComponent } from './generate-payroll/generate-payroll.component';\nimport { ReportsPayrollComponent } from './reports-payroll/reports-payroll.component';\nimport { ManageSalaryIncrementsComponent } from './salary-increment-payroll/manage-salary-increments/manage-salary-increments.component';\nimport { AllSalaryIncrementsComponent } from './salary-increment-payroll/all-salary-increments/all-salary-increments.component';\nimport { AllToFinanceComponent } from './to-finance-payroll/all-to-finance/all-to-finance.component';\nimport { ManagePayslipsComponent } from './payslips/manage-payslips/manage-payslips.component';\nimport { ProcessPayslipsComponent } from './payslips/process-payslips/process-payslips.component';\nimport { PNineGenerationComponent } from './p-nine-generation/p-nine-generation.component';\nimport { GratuityPayrollComponent } from './gratuity-payroll/gratuity-payroll.component';\nimport { ManagePayslipRecordComponent } from './payslips/dialogs/manage-payslip-record/manage-payslip-record.component';\nimport { ManageToFinanceComponent } from './to-finance-payroll/manage-to-finance/manage-to-finance.component';\nimport { ManageClosePayrollComponent } from './close-payrolls/manage-close-payroll/manage-close-payroll.component';\nimport { ClosePayrollComponent } from './close-payrolls/close-payroll/close-payroll.component';\n\n\n@NgModule({\n  declarations: [\n    PayrollDashboardPageComponent,\n    OpenPayrollComponent,\n    ReconcilePayrollComponent,\n    \n    AllPayrollAllowancesComponent,\n    ManagePayrollAllowancesComponent,\n    AllPayrollOtherDeductionsComponent,\n    ManagePayrollOtherDeductionsComponent,\n    ManagePayrollStaffLoansComponent,\n    AllPayrollStaffLoansComponent,\n    GeneratePayrollComponent,\n    ClosePayrollComponent,\n    //SalaryIncrementPayrollComponent,\n    ReportsPayrollComponent,\n   // AllSalaryInrementsComponent,\n    //ManageSalaryInrementsComponent,\n    ManageSalaryIncrementsComponent,\n    AllSalaryIncrementsComponent,\n    AllToFinanceComponent,\n    ManagePayslipsComponent,\n    ProcessPayslipsComponent,\n    PNineGenerationComponent,\n    GratuityPayrollComponent,\n    ManagePayslipRecordComponent,\n    ManageToFinanceComponent,\n    ManageClosePayrollComponent\n  ],\n  imports: [\n    CommonModule,\n    PayrollRoutingModule,\n\n\n    DashboardModule,\n    ComponentsModule,\n    SharedModule,\n  ],\n  exports: []\n})\nexport class PayrollModule { }\n","import { HttpParams } from '@angular/common/http';\nimport { Component, Inject, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA, MatDialog, MatDialogConfig } from '@angular/material/dialog';\nimport { Subject, takeUntil, Subscription } from 'rxjs';\nimport { CustomDeductionService } from 'src/app/erp-hr/data/payroll-services/custom-deduction.service';\nimport { PayrollService } from 'src/app/erp-hr/data/payroll-services/payroll.service';\nimport { EmployeesLookupComponent } from 'src/app/erp-hr/hr-lookups/configurations-lookups/employees-lookup/employees-lookup.component';\nimport { AllEmployeesComponent } from 'src/app/erp-hr/modules/employees/all-employees/all-employees.component';\nimport { FilesService } from 'src/app/shared/services/files.service';\nimport { SnackbarService } from 'src/app/shared/services/snackbar.service';\n\n@Component({\n  selector: 'app-manage-payslip-record',\n  templateUrl: './manage-payslip-record.component.html',\n  styleUrls: ['./manage-payslip-record.component.sass']\n})\nexport class ManagePayslipRecordComponent implements OnInit {\n\n  mngForm: FormGroup;\n\n  destroy$: Subject<boolean> = new Subject<boolean>();\n\n  downloadLoading: boolean = false;\n\n  pageFunction: string = \"Add\";\n\n  hideSubmit: boolean = false;\n  isLoading: boolean = true;\n\n  months: string[] = [\n    'January', 'February', 'March', 'April', 'May', 'June',\n    'July', 'August', 'September', 'October', 'November', 'December'\n  ];\n  constructor(\n    public dialogRef: MatDialogRef<AllEmployeesComponent>,\n    @Inject(MAT_DIALOG_DATA) public data,\n    private fb: FormBuilder,\n    private snackbar: SnackbarService,\n    private dialog: MatDialog,\n    private filesService: FilesService,\n    private payrollAPI: PayrollService,\n\n  ) {}\n\n  ngOnInit(): void {\n    console.log(\"LOG DATA = \", this.data);\n    this.pageFunction = this.data.action;\n    this.formData = this.data.record\n    this.generateForm(this.formData);\n\n    this.getPage();\n  }\n  ngAfterViewInit() {\n    if (this.data.action !== \"Add\") {\n      this.generateForm(this.formData);\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next(true);\n    this.destroy$.complete();\n  }\n\n  disableTransactionType: boolean = true;\n  getPage() {\n    this.disableTransactionType = true;\n    console.log(\"this.data.action :\", this.data.action);\n    if (this.data.action === \"Add\") {\n      this.isLoading = false;\n      this.generateForm(this.data.record);\n    } else if (this.data.action === \"Update\") {\n      this.generateForm(this.data.record);\n    } else if (this.data.action === \"View\") {\n      this.generateForm(this.data.record);\n      this.activateViewMode();\n    }\n    this.isLoading = false;\n  }\n\n  formData: any;\n\n  generateForm(formData?): void {\n    console.log(\"generateForm formData :: \", formData);\n    this.mngForm = this.fb.group({\n      id: [formData?.id ?? \"\"],\n      periodY: [formData?.periodY ?? \"\", Validators.required],\n      periodM: [formData?.periodM ?? \"\", Validators.required],\n      remarks: [\n        formData?.remarks ?? \"Payslips for this period is ready for release.\",\n        Validators.required,\n      ],\n      validsignature: [formData?.validsignature ?? \"\", Validators.required],\n    });\n  }\n\n  \n  viewMode: boolean = false;\n  activateViewMode() {\n    this.viewMode = true;\n  }\n\n  posting: boolean = false;\n\n  response: any;\n  submit() {\n    console.log(\"this.mngForm.value: \", this.mngForm.value);\n    this.posting = true;\n \n    \n    let param = new HttpParams()\n        .set('periodY',this.mngForm.value.periodY)\n        .set('periodM',this.mngForm.value.periodM)\n        .set('remarks',this.mngForm.value.remarks);\n        this.payrollAPI.releasePayslips(param)\n        .pipe(takeUntil(this.destroy$))\n        .subscribe({\n          next: (res) => {\n            this.response = res;\n            console.log(\"res: \", res);\n            if (res.statusCode == 200) {\n              this.snackbar.showNotification(\n                \"snackbar-success\",\n                res.message\n              );\n            } else {\n              this.snackbar.showNotification(\n                \"snackbar-danger\",\n                res.message\n              );\n            }\n          },\n          error: (err) => {\n            this.snackbar.showNotification(\"snackbar-danger\", err.message);\n          },\n          complete: () => {\n            this.posting = false;\n            setTimeout(() => {\n              this.onNoClick();\n            }, 3000);\n          },\n        }),\n        Subscription;\n\n  }\n\n  onNoClick(): void {\n    this.dialogRef.close({ event: \"close\", data: this.response });\n  }\n\n  selectedItem: any\n  employeeLookup() {\n    const dialogConfig = new MatDialogConfig();\n    dialogConfig.disableClose = false;\n    dialogConfig.disableClose = true;\n    dialogConfig.width = \"800px\";\n    dialogConfig.data = {\n      action: \"SingleEmployee\",\n      selected: this.selectedItem,\n    };\n    const dialogRef = this.dialog.open(EmployeesLookupComponent, dialogConfig);\n    dialogRef.afterClosed().subscribe((res) => {\n      if (res && res.data && res.data.length > 0) {\n        this.mngForm.patchValue({\n          employeePfNo: res.data[0].empNo,\n          \n        });\n      }\n    });\n  }\n \n}\n","<div class=\"addContainer\">\n    <div class=\"modalHeader\">\n      <div class=\"editRowModal\">\n        <div class=\"modalHeader clearfix\">\n          <img src=\"assets/images/em.png\" width=\"30px\" height=\"30px\" alt=\"\" />\n          <div class=\"modal-about\">\n            <div class=\"font-weight-bold p-t-5 ms-2 me-2 font-17\">\n              <strong>{{ pageFunction }} Payslips</strong>\n            </div>\n          </div>\n        </div>\n      </div>\n      <button mat-icon-button (click)=\"dialogRef.close()\" aria-label=\"Close dialog\">\n        <mat-icon>close</mat-icon>\n      </button>\n    </div>\n    <div mat-dialog-content>\n      <div class=\"m-2\" *ngIf=\"isLoading\">\n        <mat-progress-bar color=\"primary\" mode=\"indeterminate\">\n        </mat-progress-bar>\n      </div>\n  \n      <ng-container>\n        <h6 class=\"mx-2\">Payslip Details</h6>\n        \n        <form class=\"register-form mx-2\" [formGroup]=\"mngForm\">\n            <div class=\"row\">\n                <div class=\"col-xl-6 col-lg-6 col-md-6 col-sm-6 mb-1\">\n                  <mat-form-field class=\"example-full-width\" appearance=\"outline\">\n                    <mat-label>Period Month</mat-label>\n                    <mat-select formControlName=\"periodM\" required>\n                      <mat-option *ngFor=\"let item of months\" [value]=\"item\">{{ item }}</mat-option>\n                    </mat-select>\n                    <mat-error *ngIf=\"mngForm.get('periodM').hasError('required')\">Period Month is required</mat-error>\n                  </mat-form-field>\n                </div>\n              \n                <div class=\"col-xl-6 col-lg-6 col-md-6 col-sm-6 mb-1\">\n                  <mat-form-field class=\"example-full-width\" appearance=\"outline\">\n                    <mat-label>Period Year</mat-label>\n                    <input matInput formControlName=\"periodY\" required />\n                    <mat-error *ngIf=\"mngForm.get('periodY').hasError('required')\">Period Year is required</mat-error>\n                  </mat-form-field>\n                </div>\n              \n               \n              \n                \n\n                <div class=\"col-xl-12 col-lg-12 col-md-12 col-sm-12 mb-1\">\n                    <mat-form-field class=\"example-full-width\" appearance=\"outline\">\n                      <mat-label>Remarks</mat-label>\n                      <textarea matInput formControlName=\"remarks\" required></textarea>\n                      <mat-error *ngIf=\"mngForm.get('remarks').hasError('required')\">Remarks are required</mat-error>\n                    </mat-form-field>\n                  </div>\n              </div>\n\n              <div class=\"col-xl-12 col-lg-12 col-md-12 col-sm-12 mb-1\">\n                <mat-form-field class=\"example-full-width\" appearance=\"outline\">\n                  <mat-label>Valid Signature</mat-label>\n                  <input matInput formControlName=\"validsignature\" required />\n                  <mat-hint>Please type <strong>RELEASE PAYSLIP</strong></mat-hint>\n                  <mat-error *ngIf=\"mngForm.get('validsignature').hasError('required')\">Valid Signature is required</mat-error>\n                </mat-form-field>\n              </div>\n              \n          </form>\n          \n        <div class=\"row\" *ngIf=\"!viewMode\">\n          <div class=\"col-xl-12 col-lg-12 col-md-12 col-sm-12 mb-1\">\n            <div class=\"example-button-row\" align=\"end\">\n              <button class=\"btn-space\" mat-raised-button color=\"primary\" [class.auth-spinner]=\"posting\"\n                [disabled]=\"!mngForm.valid || posting\" (click)=\"submit()\">\n                {{ pageFunction }} Payslip Detail\n              </button>\n              <button mat-raised-button color=\"warn\" (click)=\"onNoClick()\" tabindex=\"-1\">\n                Cancel\n              </button>\n            </div>\n          </div>\n        </div>\n      </ng-container>\n    </div>\n  </div>","import { SelectionModel } from '@angular/cdk/collections';\nimport { HttpParams } from '@angular/common/http';\nimport { Component, OnInit, ViewChild } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { MatDialog, MatDialogConfig } from '@angular/material/dialog';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { Subject, takeUntil, Subscription } from 'rxjs';\nimport { NotificationServiceService } from 'src/@core/Models/Notification/notification-service.service';\nimport { CustomDeductionService } from 'src/app/erp-hr/data/payroll-services/custom-deduction.service';\nimport { SnackbarService } from 'src/app/shared/services/snackbar.service';\nimport Swal from 'sweetalert2';\nimport { ManagePayrollOtherDeductionsComponent } from '../../deductions-payroll/manage-payroll-other-deductions/manage-payroll-other-deductions.component';\nimport { PayrollCircleService } from 'src/app/erp-hr/data/payroll-services/payroll-circle.service';\nimport { ManagePayslipRecordComponent } from '../dialogs/manage-payslip-record/manage-payslip-record.component';\n\n@Component({\n  selector: 'app-manage-payslips',\n  templateUrl: './manage-payslips.component.html',\n  styleUrls: ['./manage-payslips.component.sass']\n})\nexport class ManagePayslipsComponent implements OnInit {\n\n  displayedColumns: string[] = [\n    // \"select\",\n    \"id\",\n\n    \"payrollCircleCode\",\n    \"periodY\",\n    \"periodM\",\n    \"closingDate\",\n    \"closedBy\",\n    \"isPayslipOpen\",\n    \"payslipOpenDate\",\n    \"payslipOpenBy\",\n\n    \"status\",\n    \"verifiedFlag\",\n    //  \"deletedFlag\",\n    \"action\",\n  ];\n\n  loading: boolean = false;\n  data: any;\n  error: any;\n  dialogConfig: any;\n  destroy$: Subject<boolean> = new Subject<boolean>();\n\n  dataSource!: MatTableDataSource<any>;\n  @ViewChild(MatPaginator) paginator!: MatPaginator;\n  @ViewChild(MatSort) sort!: MatSort;\n\n  selection = new SelectionModel<any>(true, []);\n\n  downloadLoading: boolean = false;\n  posting: boolean = false;\n  showForm: boolean = false;\n\n  Form: FormGroup;\n  months: string[] = [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\",\n  ];\n  constructor(\n    private dialog: MatDialog,\n    private notificationAPI: NotificationServiceService,\n    private customDeductionService: CustomDeductionService,\n    private snackbar: SnackbarService,\n    private fb: FormBuilder,\n    private payrollCircleAPi: PayrollCircleService,\n\n  ) { }\n\n  ngOnInit(): void {\n\n    this.getData();\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next(true);\n    this.destroy$.complete();\n  }\n\n  getData() {\n    this.loading = true;\n    this.dataSource = new MatTableDataSource([]);\n    this.dataSource.paginator = this.paginator;\n    this.dataSource.sort = this.sort;\n\n    this.payrollCircleAPi.findAll()\n      .pipe(takeUntil(this.destroy$))\n      .subscribe({\n        next: (res) => {\n          console.log(\"Data displayed on table\", res);\n\n          if (res.statusCode === 200) {\n            this.data = res.entity;\n            console.log(\"Data displayed on table\", this.data);\n\n            this.loading = false;\n            this.dataSource = new MatTableDataSource(this.data);\n            this.dataSource.paginator = this.paginator;\n            this.dataSource.sort = this.sort;\n          } else {\n            this.loading = false;\n          }\n        },\n        error: (err) => {\n          this.loading = false;\n          this.notificationAPI.alertWarning(\"Server Error: \" + err.message);\n        },\n        complete: () => { },\n      });\n  }\n  refresh() {\n    this.getData();\n  }\n\n  mngRecord(action: any, record?: any) {\n    console.log(\"this.action:; \", action);\n    console.log(\"this.record:; \", record);\n\n    const dialogConfig = new MatDialogConfig();\n    dialogConfig.disableClose = false;\n    dialogConfig.disableClose = true;\n    dialogConfig.width = \"800px\";\n    dialogConfig.data = {\n      action: action,\n      record: record,\n    };\n    const dialogRef = this.dialog.open(\n      ManagePayslipRecordComponent,\n      dialogConfig\n    );\n    dialogRef.afterClosed().subscribe((result) => {\n      console.log(\"result:::\", result);\n\n      this.getData();\n    });\n  }\n\n\n  deleteRecord(id: number) {\n    Swal.fire({\n      title: \"Are you sure?\",\n      text: \"THIS RECORD WILL BE DELETED PERMANENTLY!!\",\n      icon: \"warning\",\n      showCancelButton: true,\n      confirmButtonColor: \"#3085d6\",\n      cancelButtonColor: \"#d33\",\n      confirmButtonText: \"Yes, delete it!\",\n    }).then((result) => {\n      if (result.isConfirmed) {\n        this.loading = true;\n        this.customDeductionService\n          .delete(id)\n          .pipe(takeUntil(this.destroy$))\n          .subscribe({\n            next: (res) => {\n              if (res.statusCode == 200) {\n                this.getData();\n                this.loading = false;\n                this.notificationAPI.alertSuccess(\n                  \"RECORD DELETED SUCCESSFULLY\"\n                );\n              } else {\n                this.getData();\n                this.loading = false;\n                this.notificationAPI.alertWarning(res.message);\n              }\n            },\n            error: (err) => {\n              this.loading = false;\n              this.notificationAPI.alertSuccess(\"Server Error: \" + err.message);\n            },\n            complete: () => { },\n          });\n      }\n    });\n  }\n\n  input: any;\n  applyFilter(event: Event) {\n    const filterValue = (event.target as HTMLInputElement).value;\n    this.input = filterValue;\n    this.dataSource.filter = filterValue.trim().toLowerCase();\n    if (this.dataSource.paginator) {\n      this.dataSource.paginator.firstPage();\n    }\n  }\n\n  // ****************************************************************************************************************************\n  selectedRows: any[] = [];\n  atleastOneSelected: boolean = false;\n  isAllSelected() {\n    const numSelected = this.selection.selected.length;\n    const numRows = this.dataSource.data.length;\n    return numSelected === numRows;\n  }\n  masterToggle() {\n    if (this.isAllSelected()) {\n      this.selection.clear();\n      return;\n    }\n\n    this.selection.select(...this.dataSource.data);\n  }\n  checkboxLabel(row?: any): string {\n    if (!row) {\n      return `${this.isAllSelected() ? \"deselect\" : \"select\"} all`;\n    }\n    return `${this.selection.isSelected(row) ? \"deselect\" : \"select\"} row ${row.position + 1\n      }`;\n  }\n\n  expSelected() {\n    this.atleastOneSelected = true;\n    this.selectedRows = this.selection.selected;\n\n    console.log(\"this.selectedRows: \", this.selectedRows);\n  }\n\n  hasAccess: boolean = true;\n  processMultipleRows(status: any) {\n    let privilege = \"Validate Expenses\";\n\n    // this.hasAccess = this.accessControlService.hasPrivilege(\"FinanceModule\", [\n    //   privilege,\n    // ]);\n\n    if (this.hasAccess) {\n      Swal.fire({\n    title: '<span style=\"font-size: 20px;\">Enter Verifier Remarks</span>',\n    input: \"textarea\",\n    inputPlaceholder: \"Type your remarks here...\",\n    confirmButtonText: \"Submit\",\n    showCancelButton: true,\n    cancelButtonText: \"Cancel\",\n    icon: \"info\",\n\n    inputValidator: (value) => {\n          if (!value) {\n            return \"Please enter your remarks\";\n          }\n        },\n      }).then((result) => {\n        if (result.isConfirmed) {\n          const verifierRemarks = result.value;\n\n          const processedRows = this.selectedRows.map((element) => {\n            return {\n              id: element.id,\n              status: status,\n              verifierRemarks: verifierRemarks,\n            };\n          });\n\n          console.log(\"LOG: \", processedRows);\n\n          this.customDeductionService\n            .validateBulkOtherDeductions(processedRows)\n            .pipe(takeUntil(this.destroy$))\n            .subscribe({\n              next: (res) => {\n                console.log(\"res: \", res);\n                if (res.statusCode == 201 || 200 || 302) {\n                  this.snackbar.showNotification(\n                    \"snackbar-success\",\n                    res.message\n                  );\n\n                  this.selection = new SelectionModel<any>(true, []);\n                  this.selection.clear();\n                } else {\n                  this.snackbar.showNotification(\n                    \"snackbar-danger\",\n                    res.message\n                  );\n                }\n              },\n              error: (err) => {\n                this.snackbar.showNotification(\"snackbar-danger\", err.message);\n              },\n              complete: () => {\n                this.getData();\n              },\n            }),\n            Subscription;\n        } else {\n          this.selection = new SelectionModel<any>(true, []);\n          this.selection.clear();\n        }\n      });\n    }\n  }\n}\n","<section class=\"content\">\n    <div class=\"content-block\">\n        <div class=\"block-header\">\n            <!-- breadcrumb -->\n            <app-breadcrumb [title]=\"'Manage Payslips'\" [items]=\"['Payroll']\" [active_item]=\"'Manage Payslips'\">\n            </app-breadcrumb>\n        </div>\n\n        <app-gen-widgets></app-gen-widgets>\n\n        <div class=\"row\">\n            <div class=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\">\n                <div class=\"card\">\n\n                    <div class=\"body\">\n                        <div class=\"table-responsive\">\n                            <div class=\"materialTableHeader\">\n                                <div class=\"row\">\n                                    <div class=\"col-8\">\n                                        <ul class=\"header-buttons-left ms-0\">\n                                            <li class=\"dropdown\">\n                                                <h2>Manage Payslips</h2>\n                                            </li>\n                                            <li class=\"dropdown m-l-20\">\n                                                <label for=\"search-input\"><i\n                                                        class=\"material-icons search-icon\">search</i></label>\n                                                <input placeholder=\"Filter...\" type=\"text\" (keyup)=\"applyFilter($event)\"\n                                                    #filter class=\"browser-default search-field\"\n                                                    aria-label=\"Search box\">\n                                            </li>\n                                            <li>\n                                                <div class=\"m-l-10\" matTooltip=\"ADD\">\n                                                    <button mat-mini-fab color=\"primary\" (click)=\"mngRecord('Add','')\">\n                                                        <mat-icon class=\"col-white\">add</mat-icon>\n                                                    </button>\n                                                </div>\n                                            </li>\n                                            <li>\n                                                <div class=\"m-l-10\" matTooltip=\"REFRESH\">\n                                                    <button mat-mini-fab color=\"primary\" (click)=\"refresh()\">\n                                                        <mat-icon class=\"col-white\">refresh</mat-icon>\n                                                    </button>\n                                                </div>\n                                            </li>\n                                            <li *ngIf=\"selection.selected.length > 0\">\n                                                <div class=\"m-l-10\" matTooltip=\"APPROVE\">\n                                                    <button mat-mini-fab color=\"primary\"\n                                                        (click)=\"processMultipleRows('APPROVED')\"\n                                                        class=\"mat-button-custom\">\n                                                        <mat-icon class=\"col-white\">check</mat-icon>\n                                                    </button>\n                                                </div>\n                                            </li>\n                                            <li *ngIf=\"selection.selected.length > 0\">\n                                                <div class=\"m-l-10\" matTooltip=\"REJECT\">\n                                                    <button mat-mini-fab color=\"warn\"\n                                                        (click)=\"processMultipleRows('REJECTED')\"\n                                                        class=\"mat-button-custom\">\n                                                        <mat-icon class=\"col-white\">cancel</mat-icon>\n                                                    </button>\n                                                </div>\n                                            </li>\n                                            <li *ngIf=\"selection.selected.length > 0\">\n                                                <div class=\"m-l-10\" matTooltip=\"RETURN\">\n                                                    <button mat-mini-fab color=\"accent\"\n                                                        (click)=\"processMultipleRows('RETURNED')\"\n                                                        class=\"mat-button-custom\">\n                                                        <mat-icon class=\"col-white\">undo</mat-icon>\n                                                    </button>\n                                                </div>\n                                            </li>\n                                        </ul>\n                                    </div>\n                                    <div class=\"col-4\">\n                                        <ul class=\"header-buttons\">\n                                            <li>\n                                                <div class=\"export-button m-l-10\" matTooltip=\"XLSX\">\n                                                    <img src=\"assets/images/icons/xlsx.png\" alt=\"\"\n                                                        (click)=\"exporter.exportTable('xlsx', {fileName:'assets-list', sheet: 'sheet1'})\" />\n                                                </div>\n                                            </li>\n                                            <li>\n                                                <div class=\"export-button m-l-10\" matTooltip=\"CSV\">\n                                                    <img src=\"assets/images/icons/csv.png\" alt=\"\"\n                                                        (click)=\"exporter.exportTable('csv')\" />\n                                                </div>\n                                            </li>\n                                            <li>\n                                                <div class=\"export-button m-l-10\" matTooltip=\"JSON\">\n                                                    <img src=\"assets/images/icons/json.png\" alt=\"\"\n                                                        (click)=\"exporter.exportTable('json')\" />\n                                                </div>\n                                            </li>\n                                            <li>\n                                                <div class=\"export-button m-l-10\" matTooltip=\"TXT\">\n                                                    <img src=\"assets/images/icons/txt.png\" alt=\"\"\n                                                        (click)=\"exporter.exportTable('txt')\" />\n                                                </div>\n                                            </li>\n                                        </ul>\n                                    </div>\n                                </div>\n                            </div>\n\n\n                            <mat-table #table matTableExporter [dataSource]=\"dataSource\" matSort class=\"mat-cell\"\n                                #exporter=\"matTableExporter\">\n\n                                <ng-container matColumnDef=\"select\">\n                                    <mat-header-cell *matHeaderCellDef [ngClass]=\"'tbl-col-width-per-4'\">\n                                        <mat-checkbox color=\"primary\" (change)=\"$event ? masterToggle() : null\"\n                                            [checked]=\"selection.hasValue() && isAllSelected()\"\n                                            [indeterminate]=\"selection.hasValue() && !isAllSelected()\"\n                                            [ngClass]=\"'tbl-checkbox'\" (change)=\"expSelected()\">\n                                        </mat-checkbox>\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" [ngClass]=\"'tbl-col-width-per-4'\">\n                                        <mat-checkbox color=\"primary\" (click)=\"$event.stopPropagation()\"\n                                            (change)=\"$event ? selection.toggle(row) : null\"\n                                            [checked]=\"selection.isSelected(row)\" [ngClass]=\"'tbl-checkbox'\"\n                                            [aria-label]=\"checkboxLabel(row)\" (change)=\"expSelected()\">\n                                        </mat-checkbox>\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"id\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-10\">\n                                        ID\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-10\">\n                                        {{ row.id }}\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"payrollCircleCode\">\n                                    <mat-header-cell class=\"column-nowrap psl-3 tbl-col-width-per-10 pr-0\"\n                                        *matHeaderCellDef mat-sort-header> Payroll Circle Code </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\"\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-10 pr-0\"> {{ row.payrollCircleCode\n                                        }} </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"periodY\">\n                                    <mat-header-cell class=\"column-nowrap psl-3 tbl-col-width-per-10 pr-0\"\n                                        *matHeaderCellDef mat-sort-header> Period Year </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\"\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-10 pr-0\"> {{ row.periodY }}\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"periodM\">\n                                    <mat-header-cell class=\"column-nowrap psl-3 tbl-col-width-per-10 pr-0\"\n                                        *matHeaderCellDef mat-sort-header> Period Month </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\"\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-10 pr-0\"> {{ row.periodM }}\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"closingDate\">\n                                    <mat-header-cell class=\"column-nowrap psl-3 tbl-col-width-per-10 pr-0\"\n                                        *matHeaderCellDef mat-sort-header> Closing Date </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\"\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-10 pr-0\"> {{ row.closingDate }}\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"closedBy\">\n                                    <mat-header-cell class=\"column-nowrap psl-3 tbl-col-width-per-10 pr-0\"\n                                        *matHeaderCellDef mat-sort-header> Closed By </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\"\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-10 pr-0\"> {{ row.closedBy }}\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"isPayslipOpen\">\n                                    <mat-header-cell class=\"column-nowrap psl-3 tbl-col-width-per-10 pr-0\"\n                                        *matHeaderCellDef mat-sort-header> Is Payslip Open </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\"\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-10 pr-0\"> {{ row.isPayslipOpen }}\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"payslipOpenDate\">\n                                    <mat-header-cell class=\"column-nowrap psl-3 tbl-col-width-per-10 pr-0\"\n                                        *matHeaderCellDef mat-sort-header> Payslip Open Date </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\"\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-10 pr-0\"> {{ row.payslipOpenDate }}\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"payslipOpenBy\">\n                                    <mat-header-cell class=\"column-nowrap psl-3 tbl-col-width-per-10 pr-0\"\n                                        *matHeaderCellDef mat-sort-header> Payslip Open By </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\"\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-10 pr-0\"> {{ row.payslipOpenBy }}\n                                    </mat-cell>\n                                </ng-container>\n\n\n\n\n                                <ng-container matColumnDef=\"postedTime\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Posted Time\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        {{ row.postedTime | date:'short' }}\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"status\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Status\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        <ng-container *ngIf=\"row.isClosed === 'Y'; else isOpen\">\n                                            <button class=\"badge badge-solid-green btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-check\"></i>&nbsp; Closed\n                                            </button>\n                                        </ng-container>\n                                        <ng-template #isOpen>\n                                            <ng-container *ngIf=\"row.isOpen === 'Y'; else notOpen\">\n                                                <button class=\"badge badge-solid-blue btn btn btn-sm m-1\">\n                                                    <i class=\"fas fa-door-open\"></i>&nbsp; Open\n                                                </button>\n                                            </ng-container>\n                                            <ng-template #notOpen>\n                                                <button class=\"badge badge-solid-red btn btn btn-sm m-1\">\n                                                    <i class=\"fas fa-times\"></i>&nbsp; Not Open\n                                                </button>\n                                            </ng-template>\n                                        </ng-template>\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"verifiedFlag\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Verified\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        <ng-container *ngIf=\"row.verifiedFlag === 'Y'; else notVerified\">\n                                            <button class=\"badge badge-solid-green btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-check\"></i>&nbsp; Verified\n                                            </button>\n                                        </ng-container>\n                                        <ng-template #notVerified>\n                                            <button class=\"badge badge-solid-red btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-times\"></i>&nbsp; Not Verified\n                                            </button>\n                                        </ng-template>\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"deletedFlag\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Deleted\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        <ng-container *ngIf=\"row.deletedFlag === 'Y'; else notDeleted\">\n                                            <button class=\"badge badge-solid-red btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-trash\"></i>&nbsp; Deleted\n                                            </button>\n                                        </ng-container>\n                                        <ng-template #notDeleted>\n                                            <button class=\"badge badge-solid-green btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-check\"></i>&nbsp; Active\n                                            </button>\n                                        </ng-template>\n                                    </mat-cell>\n                                </ng-container>\n\n\n\n\n\n\n\n                                <ng-container matColumnDef=\"action\">\n                                    <mat-header-cell class=\"column-nowrap psl-3 tbl-col-width-per-15 pr-0\"\n                                        *matHeaderCellDef>\n                                        Action\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row; let i = index\"\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-15 pr-0\">\n\n                                        <button mat-icon-button color=\"accent\" (click)=\"$event.stopPropagation()\"\n                                            (click)=\"mngRecord('Update',row)\" class=\"tbl-action-btn\">\n                                            <app-feather-icons [icon]=\"'edit'\" [class]=\"'tbl-fav-edit'\">\n                                            </app-feather-icons>\n                                        </button>\n\n\n                                    </mat-cell>\n                                </ng-container>\n                                <mat-header-row *matHeaderRowDef=\"displayedColumns\">\n                                </mat-header-row>\n                                <mat-row *matRowDef=\"let row; columns: displayedColumns;\"  \n                                    [style.cursor]=\"'pointer'\" matRipple>\n                                </mat-row>\n\n\n                                <tr *matNoDataRow>\n                                    <td colspan=\"{{ displayedColumns.length }}\"> No data matching the filter \"{{ input\n                                        }}\"</td>\n                                </tr>\n                            </mat-table>\n                            <div class=\"m-2 mx-2\" *ngIf=\"loading || downloadLoading\">\n                                <mat-progress-bar color=\"primary\" mode=\"indeterminate\">\n                                </mat-progress-bar>\n                            </div>\n                            <div *ngIf=\"loading\" class=\"tbl-spinner\">\n                                <mat-progress-spinner color=\"primary\" [diameter]=\"40\" mode=\"indeterminate\">\n                                </mat-progress-spinner>\n                            </div>\n\n                            <mat-paginator [pageSize]=\"10\" [pageSizeOptions]=\"[2, 5, 10, 20, 30, 40, 50, 100]\"\n                                aria-label=\"Select page of users\">\n                            </mat-paginator>\n\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</section>","import { SelectionModel } from \"@angular/cdk/collections\";\nimport { HttpParams } from \"@angular/common/http\";\nimport { Component, OnInit, ViewChild } from \"@angular/core\";\nimport { FormGroup, FormBuilder, Validators } from \"@angular/forms\";\nimport { MatDialog, MatDialogConfig } from \"@angular/material/dialog\";\nimport { MatPaginator } from \"@angular/material/paginator\";\nimport { MatSort } from \"@angular/material/sort\";\nimport { MatTableDataSource } from \"@angular/material/table\";\nimport { Subject, takeUntil, Subscription } from \"rxjs\";\nimport { NotificationServiceService } from \"src/@core/Models/Notification/notification-service.service\";\nimport { CustomDeductionService } from \"src/app/erp-hr/data/payroll-services/custom-deduction.service\";\nimport { SnackbarService } from \"src/app/shared/services/snackbar.service\";\nimport Swal from \"sweetalert2\";\nimport { ManagePayrollOtherDeductionsComponent } from \"../../deductions-payroll/manage-payroll-other-deductions/manage-payroll-other-deductions.component\";\nimport { PayrollService } from \"src/app/erp-hr/data/payroll-services/payroll.service\";\nimport { ReportService } from \"src/app/erp-hr/data/payroll-services/report.service\";\n\n@Component({\n  selector: \"app-process-payslips\",\n  templateUrl: \"./process-payslips.component.html\",\n  styleUrls: [\"./process-payslips.component.sass\"],\n})\nexport class ProcessPayslipsComponent implements OnInit {\n  displayedColumns: string[] = [\n    \"select\",\n    \"id\",\n\n    \"payrollId\",\n    \"employeeId\",\n    \"name\",\n    \"empStartDate\",\n    \"workingDays\",\n    \"grossSalary\",\n    \"netSalary\",\n\n    \"status\",\n    // \"verifiedFlag\",\n    // \"deletedFlag\",\n    \"action\",\n  ];\n\n  loading: boolean = false;\n  data: any;\n  error: any;\n  dialogConfig: any;\n  destroy$: Subject<boolean> = new Subject<boolean>();\n\n  dataSource!: MatTableDataSource<any>;\n  @ViewChild(MatPaginator) paginator!: MatPaginator;\n  @ViewChild(MatSort) sort!: MatSort;\n\n  selection = new SelectionModel<any>(true, []);\n\n  downloadLoading: boolean = false;\n  posting: boolean = false;\n  showForm: boolean = false;\n\n  Form: FormGroup;\n  months: string[] = [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\",\n  ];\n  constructor(\n    private dialog: MatDialog,\n    private notificationAPI: NotificationServiceService,\n    private snackbar: SnackbarService,\n    private fb: FormBuilder,\n    private payrollService: PayrollService,\n    private reportAPI: ReportService\n  ) {}\n\n  ngOnInit(): void {\n    const currentYear = new Date().getFullYear();\n    const currentMonthIndex = new Date().getMonth();\n    const currentMonthName = this.months[currentMonthIndex];\n\n    this.Form = this.fb.group({\n      year: [currentYear.toString(), Validators.required],\n      month: [currentMonthName, Validators.required],\n    });\n    this.Form.valueChanges.subscribe(() => {\n      this.getData();\n    });\n\n    this.getData();\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next(true);\n    this.destroy$.complete();\n  }\n\n  isFinal = \"Y\";\n  getData() {\n    this.loading = true;\n    this.dataSource = new MatTableDataSource([]);\n    this.dataSource.paginator = this.paginator;\n    this.dataSource.sort = this.sort;\n\n    this.loading = true;\n    let params = new HttpParams()\n      .set(\"periodY\", this.Form.value.year)\n      .set(\"period_m\", this.Form.value.month)\n      .set(\"status\", \"Approved\")\n      .set(\"is_final\", this.isFinal);\n\n    this.payrollService\n      .getPayslips(params)\n      .pipe(takeUntil(this.destroy$))\n      .subscribe({\n        next: (res) => {\n          if (res.statusCode === 302) {\n            console.log(\"res:: \", res);\n\n            this.dataSource = new MatTableDataSource(res.entity);\n            this.dataSource.paginator = this.paginator;\n            this.dataSource.sort = this.sort;\n          } else {\n            this.notificationAPI.alertWarning(res.message);\n\n            this.loading = false;\n          }\n        },\n        error: (err) => {\n          this.loading = false;\n          this.notificationAPI.alertWarning(\"Server Error: \" + err.message);\n        },\n        complete: () => {\n          this.loading = false;\n        },\n      });\n  }\n  refresh() {\n    this.getData();\n  }\n\n  mngRecord(action: any, record?: any) {\n    console.log(\"this.action:; \", action);\n    console.log(\"this.record:; \", record);\n\n    const dialogConfig = new MatDialogConfig();\n    dialogConfig.disableClose = false;\n    dialogConfig.disableClose = true;\n    dialogConfig.width = \"800px\";\n    dialogConfig.data = {\n      action: action,\n      record: record,\n    };\n    const dialogRef = this.dialog.open(\n      ManagePayrollOtherDeductionsComponent,\n      dialogConfig\n    );\n    dialogRef.afterClosed().subscribe((result) => {\n      console.log(\"result:::\", result);\n\n      this.getData();\n    });\n  }\n  deleteRecord(id: number) {\n    Swal.fire({\n      title: \"Are you sure?\",\n      text: \"THIS RECORD WILL BE DELETED PERMANENTLY!!\",\n      icon: \"warning\",\n      showCancelButton: true,\n      confirmButtonColor: \"#3085d6\",\n      cancelButtonColor: \"#d33\",\n      confirmButtonText: \"Yes, delete it!\",\n    }).then((result) => {\n      if (result.isConfirmed) {\n        this.loading = true;\n        // this.customDeductionService\n        //   .delete(id)\n        //   .pipe(takeUntil(this.destroy$))\n        //   .subscribe({\n        //     next: (res) => {\n        //       if (res.statusCode == 200) {\n        //         this.getData();\n        //         this.loading = false;\n        //         this.notificationAPI.alertSuccess(\n        //           \"RECORD DELETED SUCCESSFULLY\"\n        //         );\n        //       } else {\n        //         this.getData();\n        //         this.loading = false;\n        //         this.notificationAPI.alertWarning(res.message);\n        //       }\n        //     },\n        //     error: (err) => {\n        //       this.loading = false;\n        //       this.notificationAPI.alertSuccess(\"Server Error: \" + err.message);\n        //     },\n        //     complete: () => {},\n        //   });\n      }\n    });\n  }\n\n  input: any;\n  applyFilter(event: Event) {\n    const filterValue = (event.target as HTMLInputElement).value;\n    this.input = filterValue;\n    this.dataSource.filter = filterValue.trim().toLowerCase();\n    if (this.dataSource.paginator) {\n      this.dataSource.paginator.firstPage();\n    }\n  }\n\n  // ****************************************************************************************************************************\n  selectedRows: any[] = [];\n  atleastOneSelected: boolean = false;\n  isAllSelected() {\n    const numSelected = this.selection.selected.length;\n    const numRows = this.dataSource.data.length;\n    return numSelected === numRows;\n  }\n  masterToggle() {\n    if (this.isAllSelected()) {\n      this.selection.clear();\n      return;\n    }\n\n    this.selection.select(...this.dataSource.data);\n  }\n  checkboxLabel(row?: any): string {\n    if (!row) {\n      return `${this.isAllSelected() ? \"deselect\" : \"select\"} all`;\n    }\n    return `${this.selection.isSelected(row) ? \"deselect\" : \"select\"} row ${\n      row.position + 1\n    }`;\n  }\n\n  expSelected() {\n    this.atleastOneSelected = true;\n    this.selectedRows = this.selection.selected;\n\n    console.log(\"this.selectedRows: \", this.selectedRows);\n  }\n\n  isLoading: boolean = false;\n  hasAccess: boolean = true;\n  processMultipleRows() {\n    // Personal\n    // Workmail\n    Swal.fire({\n      title: \"Select Email Type\",\n      input: \"select\",\n      inputOptions: {\n        Personal: \"Personal\",\n        Workmail: \"Workmail\",\n      },\n      inputPlaceholder: \"Select Email Type\",\n      confirmButtonText: \"Submit\",\n      showCancelButton: true,\n      cancelButtonText: \"Cancel\",\n      preConfirm: (selectedUserType) => {\n        return new Promise<void>((resolve, reject) => {\n          if (this.hasAccess) {\n            Swal.fire({\n              title: \"Confirm Submission\",\n              text: \"Are you sure you want to process emails for selected records?\",\n              icon: \"question\",\n              showCancelButton: true,\n              confirmButtonText: \"Submit\",\n              cancelButtonText: \"Cancel\",\n            }).then((result) => {\n              if (result.isConfirmed) {\n                const processedRows = this.selection.selected.map((element) => {\n                  return {\n                    payrollCode: element.payrollId,\n                  };\n                });\n\n                console.log(\"LOG: \", processedRows);\n\n                let params = { emailType: selectedUserType };\n\n                this.payrollService\n                  .processPayslipEmails(params, processedRows)\n                  .pipe(takeUntil(this.destroy$))\n                  .subscribe({\n                    next: (res) => {\n                      console.log(\"res: \", res);\n                      if (\n                        res.statusCode == 200\n                      ) {\n                        this.notificationAPI.alertSuccess(res.message);\n\n                        this.selection = new SelectionModel<any>(true, []);\n                        this.selection.clear();\n                      } else {\n                        this.notificationAPI.alertWarning(res.message);\n                      }\n                    },\n                    error: (err) => {\n                      this.notificationAPI.alertWarning(err.message);\n\n                      this.selection = new SelectionModel<any>(true, []);\n                      this.selection.clear();\n                      this.getData();\n                      resolve();\n                    },\n                    complete: () => {\n                      this.selection = new SelectionModel<any>(true, []);\n                      this.selection.clear();\n                      this.getData();\n                      resolve();\n                    },\n                  });\n              } else {\n                this.selection = new SelectionModel<any>(true, []);\n                this.selection.clear();\n                reject();\n              }\n            });\n          } else {\n            resolve();\n          }\n        });\n      },\n    });\n  }\n\n  //******************************************************************************************** */\n  getPayslip(id: number) {\n    this.loading = true;\n    this.reportAPI.payslip(id).subscribe({\n      next: (value) => {\n        this.loading = false;\n        this.notificationAPI.alertSuccess(\"Downloading Payslip Report\");\n        let url = window.URL.createObjectURL(value.data);\n        let a = document.createElement(\"a\");\n        document.body.appendChild(a);\n        a.setAttribute(\"style\", \"display: none\");\n        a.setAttribute(\"target\", \"blank\");\n        a.href = url;\n        a.download = value.filename;\n        a.click();\n        window.URL.revokeObjectURL(url);\n        a.remove();\n      },\n      error: (err) => {\n        this.loading = false;\n        this.notificationAPI.alertWarning(\"NO PAYSLIP REPORT FOUND\");\n      },\n      complete: () => {},\n    });\n  }\n}\n","<section class=\"content\">\n    <div class=\"content-block\">\n        <div class=\"block-header\">\n            <!-- breadcrumb -->\n            <app-breadcrumb [title]=\"'Process Payslips'\" [items]=\"['Payroll']\" [active_item]=\"'Process Payslips'\">\n            </app-breadcrumb>\n        </div>\n\n        <app-gen-widgets></app-gen-widgets>\n\n        <div class=\"row\">\n            <div class=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\">\n                <div class=\"card\">\n                    <div class=\"body\">\n                        <div class=\"table-responsive\">\n                            <div class=\"materialTableHeader\">\n                                <div class=\"row\">\n                                    <div class=\"col-8\">\n                                        <ul class=\"header-buttons-left ms-0\">\n                                            <li class=\"dropdown\">\n                                                <h2>Process Payslips</h2>\n                                            </li>\n                                            <li class=\"dropdown m-l-20\">\n                                                <label for=\"search-input\"><i\n                                                        class=\"material-icons search-icon\">search</i></label>\n                                                <input placeholder=\"Filter...\" type=\"text\" (keyup)=\"applyFilter($event)\"\n                                                    #filter class=\"browser-default search-field\"\n                                                    aria-label=\"Search box\" />\n                                            </li>\n                                            <!-- <li>\n                                                <div class=\"m-l-10\" matTooltip=\"ADD\">\n                                                    <button mat-mini-fab color=\"primary\" (click)=\"mngRecord('Add', '')\">\n                                                        <mat-icon class=\"col-white\">add</mat-icon>\n                                                    </button>\n                                                </div>\n                                            </li> -->\n                                            <li>\n                                                <div class=\"m-l-10\" matTooltip=\"REFRESH\">\n                                                    <button mat-mini-fab color=\"primary\" (click)=\"refresh()\">\n                                                        <mat-icon class=\"col-white\">refresh</mat-icon>\n                                                    </button>\n                                                </div>\n                                            </li>\n                                            <li *ngIf=\"selection.selected.length > 0\">\n                                                <div class=\"m-l-10\" matTooltip=\"Process Emails\">\n                                                    <button mat-mini-fab color=\"primary\"\n                                                        (click)=\"processMultipleRows('EMAIL_PROCESSING')\"\n                                                        class=\"mat-button-custom\">\n                                                        <mat-icon class=\"col-white\">email</mat-icon>\n                                                    </button>\n                                                </div>\n                                            </li>\n\n                                        </ul>\n                                    </div>\n                                    <div class=\"col-4\">\n                                        <ul class=\"header-buttons\">\n                                            <li>\n                                                <div class=\"export-button m-l-10\" matTooltip=\"XLSX\">\n                                                    <img src=\"assets/images/icons/xlsx.png\" alt=\"\" (click)=\"\n                              exporter.exportTable('xlsx', {\n                                fileName: 'assets-list',\n                                sheet: 'sheet1'\n                              })\n                            \" />\n                                                </div>\n                                            </li>\n                                            <li>\n                                                <div class=\"export-button m-l-10\" matTooltip=\"CSV\">\n                                                    <img src=\"assets/images/icons/csv.png\" alt=\"\"\n                                                        (click)=\"exporter.exportTable('csv')\" />\n                                                </div>\n                                            </li>\n                                            <li>\n                                                <div class=\"export-button m-l-10\" matTooltip=\"JSON\">\n                                                    <img src=\"assets/images/icons/json.png\" alt=\"\"\n                                                        (click)=\"exporter.exportTable('json')\" />\n                                                </div>\n                                            </li>\n                                            <li>\n                                                <div class=\"export-button m-l-10\" matTooltip=\"TXT\">\n                                                    <img src=\"assets/images/icons/txt.png\" alt=\"\"\n                                                        (click)=\"exporter.exportTable('txt')\" />\n                                                </div>\n                                            </li>\n                                        </ul>\n                                    </div>\n                                </div>\n                            </div>\n\n                            <div class=\"materialTableHeader mt-2\">\n                                <div class=\"row\">\n                                    <div class=\"col-2\">\n                                        <form [formGroup]=\"Form\">\n                                            <div class=\"row\">\n                                                <div class=\"col-9\">\n                                                    <mat-form-field class=\"example-full-width\" appearance=\"fill\">\n                                                        <mat-label>Year</mat-label>\n                                                        <input matInput formControlName=\"year\" />\n                                                        <mat-error *ngIf=\"Form.get('year').hasError('required')\">\n                                                            Please Enter Year\n                                                        </mat-error>\n                                                    </mat-form-field>\n                                                </div>\n                                            </div>\n                                        </form>\n                                    </div>\n                                    <div class=\"col-2\">\n                                        <form [formGroup]=\"Form\">\n                                            <mat-form-field class=\"example-full-width\" appearance=\"fill\">\n                                                <mat-label>Month</mat-label>\n                                                <mat-select formControlName=\"month\">\n                                                    <mat-option *ngFor=\"let month of months\" [value]=\"month\">{{ month\n                                                        }}</mat-option>\n                                                </mat-select>\n                                                <mat-error *ngIf=\"Form.get('month').hasError('required')\">Please select\n                                                    a month</mat-error>\n                                            </mat-form-field>\n                                        </form>\n                                    </div>\n                                </div>\n                            </div>\n\n                            <div class=\"m-2 mx-2\" *ngIf=\"loading || downloadLoading\">\n                                <mat-progress-bar color=\"primary\" mode=\"indeterminate\">\n                                </mat-progress-bar>\n                            </div>\n\n                            <mat-table #table matTableExporter [dataSource]=\"dataSource\" matSort class=\"mat-cell\"\n                                #exporter=\"matTableExporter\">\n                                <ng-container matColumnDef=\"select\">\n                                    <mat-header-cell *matHeaderCellDef [ngClass]=\"'tbl-col-width-per-4'\">\n                                        <mat-checkbox color=\"primary\" (change)=\"$event ? masterToggle() : null\"\n                                            [checked]=\"selection.hasValue() && isAllSelected()\"\n                                            [indeterminate]=\"selection.hasValue() && !isAllSelected()\"\n                                            [ngClass]=\"'tbl-checkbox'\" (change)=\"expSelected()\">\n                                        </mat-checkbox>\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" [ngClass]=\"'tbl-col-width-per-4'\">\n                                        <mat-checkbox color=\"primary\" (click)=\"$event.stopPropagation()\"\n                                            (change)=\"$event ? selection.toggle(row) : null\"\n                                            [checked]=\"selection.isSelected(row)\" [ngClass]=\"'tbl-checkbox'\"\n                                            [aria-label]=\"checkboxLabel(row)\" (change)=\"expSelected()\">\n                                        </mat-checkbox>\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"id\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-10\">\n                                        ID\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-10\">\n                                        {{ row.id }}\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"payrollId\">\n                                    <mat-header-cell class=\"column-nowrap psl-3 tbl-col-width-per-14 pr-0\"\n                                        *matHeaderCellDef mat-sort-header>\n                                        Payroll ID\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\"\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-14 pr-0\">\n                                        {{ row.payrollId }}\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"employeeId\">\n                                    <mat-header-cell class=\"column-nowrap psl-3 tbl-col-width-per-14 pr-0\"\n                                        *matHeaderCellDef mat-sort-header>\n                                        Employee ID\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\"\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-14 pr-0\">\n                                        {{ row.empNo }}\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"name\">\n                                    <mat-header-cell class=\"column-nowrap psl-3 tbl-col-width-per-14 pr-0\"\n                                        *matHeaderCellDef mat-sort-header>\n                                        Name\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\"\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-14 pr-0\">\n                                        {{ row.firstName }}\n                                        {{ row.middleName }}\n                                        {{ row.lastName }}\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"empStartDate\">\n                                    <mat-header-cell class=\"column-nowrap psl-3 tbl-col-width-per-14 pr-0\"\n                                        *matHeaderCellDef mat-sort-header>\n                                        Employment Start Date\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\"\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-14 pr-0\">\n                                        {{ row.empStartDate }}\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"workingDays\">\n                                    <mat-header-cell class=\"column-nowrap psl-3 tbl-col-width-per-14 pr-0\"\n                                        *matHeaderCellDef mat-sort-header>\n                                        Working Days\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\"\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-14 pr-0\">\n                                        {{ row.workingDays }}\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"grossSalary\">\n                                    <mat-header-cell class=\"column-nowrap psl-3 tbl-col-width-per-14 pr-0\"\n                                        *matHeaderCellDef mat-sort-header>\n                                        Gross Salary\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\"\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-14 pr-0\">\n                                        {{ row.grossPay }}\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"netSalary\">\n                                    <mat-header-cell class=\"column-nowrap psl-3 tbl-col-width-per-14 pr-0\"\n                                        *matHeaderCellDef mat-sort-header>\n                                        Net Salary\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\"\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-14 pr-0\">\n                                        {{ row.netSalary }}\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"postedTime\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Posted Time\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        {{ row.postedTime | date : \"short\" }}\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"status\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Status\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row; let i = index\"\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-20\"\n                                        (click)=\"$event.stopPropagation()\">\n                                        <ng-container [ngSwitch]=\"row.status\">\n                                            <button *ngSwitchCase=\"'APPROVED'\"\n                                                class=\"badge badge-solid-green btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-check-circle\"></i>&nbsp;\n                                                {{ row.status }}\n                                            </button>\n                                            <button *ngSwitchCase=\"'REJECTED'\"\n                                                class=\"badge badge-solid-red btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-times-circle\"></i>&nbsp;\n                                                {{ row.status }}\n                                            </button>\n                                            <button *ngSwitchCase=\"'RETURNED'\"\n                                                class=\"badge badge-solid-brown btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-undo-alt\"></i>&nbsp;\n                                                {{ row.status }}\n                                            </button>\n                                            <button *ngSwitchCase=\"'PENDING'\"\n                                                class=\"badge badge-solid-blue btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-exclamation-circle\"></i>&nbsp;\n                                                {{ row.status }}\n                                            </button>\n                                            <button *ngSwitchDefault class=\"badge badge-solid-brown btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-question-circle\"></i>&nbsp;\n                                                {{ row.status }}\n                                            </button>\n                                        </ng-container>\n                                    </mat-cell>\n                                </ng-container>\n                                <ng-container matColumnDef=\"verifiedFlag\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Verified\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        <ng-container *ngIf=\"row.verifiedFlag === 'Y'; else notVerified\">\n                                            <button class=\"badge badge-solid-green btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-check\"></i>&nbsp; Verified\n                                            </button>\n                                        </ng-container>\n                                        <ng-template #notVerified>\n                                            <button class=\"badge badge-solid-red btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-times\"></i>&nbsp; Not Verified\n                                            </button>\n                                        </ng-template>\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"deletedFlag\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Deleted\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        <ng-container *ngIf=\"row.deletedFlag === 'Y'; else notDeleted\">\n                                            <button class=\"badge badge-solid-red btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-trash\"></i>&nbsp; Deleted\n                                            </button>\n                                        </ng-container>\n                                        <ng-template #notDeleted>\n                                            <button class=\"badge badge-solid-green btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-check\"></i>&nbsp; Active\n                                            </button>\n                                        </ng-template>\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"action\">\n                                    <mat-header-cell class=\"column-nowrap psl-3 tbl-col-width-per-15 pr-0\"\n                                        *matHeaderCellDef>\n                                        Action\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row; let i = index\"\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-15 pr-0\">\n                                        <button mat-icon-button color=\"accent\" (click)=\"getPayslip(row.id)\"\n                                            class=\"tbl-action-btn\">\n                                            <app-feather-icons [icon]=\"'download'\"\n                                                [class]=\"'tbl-download-pdf'\"></app-feather-icons>\n                                        </button>\n                                    </mat-cell>\n                                </ng-container>\n                                <mat-header-row *matHeaderRowDef=\"displayedColumns\">\n                                </mat-header-row>\n                                <mat-row *matRowDef=\"let row; columns: displayedColumns\" [style.cursor]=\"'pointer'\"\n                                    matRipple>\n                                </mat-row>\n\n                                <tr *matNoDataRow>\n                                    <td colspan=\"{{ displayedColumns.length }}\">\n                                        No data matching the filter \"{{ input }}\"\n                                    </td>\n                                </tr>\n                            </mat-table>\n\n                            <div *ngIf=\"loading\" class=\"tbl-spinner\">\n                                <mat-progress-spinner color=\"primary\" [diameter]=\"40\" mode=\"indeterminate\">\n                                </mat-progress-spinner>\n                            </div>\n\n                            <mat-paginator [pageSize]=\"10\" [pageSizeOptions]=\"[2, 5, 10, 20, 30, 40, 50, 100]\"\n                                aria-label=\"Select page of users\">\n                            </mat-paginator>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</section>","import { SelectionModel } from \"@angular/cdk/collections\";\nimport { HttpParams } from \"@angular/common/http\";\nimport { Component, OnInit, ViewChild } from \"@angular/core\";\nimport { FormGroup, FormBuilder, Validators } from \"@angular/forms\";\nimport { MatDialog, MatDialogConfig } from \"@angular/material/dialog\";\nimport { MatPaginator } from \"@angular/material/paginator\";\nimport { MatSort } from \"@angular/material/sort\";\nimport { MatTableDataSource } from \"@angular/material/table\";\nimport { Router } from \"@angular/router\";\nimport { Subject, takeUntil, Subscription } from \"rxjs\";\nimport { MonthsService } from \"src/@core/Models/months/months.service\";\nimport { NotificationServiceService } from \"src/@core/Models/Notification/notification-service.service\";\nimport { DepartmentService } from \"src/app/erp-hr/data/configuration-services/department.service\";\nimport { JobgroupService } from \"src/app/erp-hr/data/configuration-services/jobgroup.service\";\nimport { PayrollService } from \"src/app/erp-hr/data/payroll-services/payroll.service\";\nimport { ReportService } from \"src/app/erp-hr/data/payroll-services/report.service\";\nimport { PrivilegeService } from \"src/app/erp-hr/data/PrivilegeService\";\nimport { DepartmentsLookupComponent } from \"src/app/erp-hr/hr-lookups/configurations-lookups/departments-lookup/departments-lookup.component\";\nimport { JobRolesLookupComponent } from \"src/app/erp-hr/hr-lookups/configurations-lookups/job-roles-lookup/job-roles-lookup.component\";\nimport { SnackbarService } from \"src/app/shared/services/snackbar.service\";\nimport Swal from \"sweetalert2\";\n\n@Component({\n  selector: \"app-reconcile-payroll\",\n  templateUrl: \"./reconcile-payroll.component.html\",\n  styleUrls: [\"./reconcile-payroll.component.sass\"],\n})\nexport class ReconcilePayrollComponent implements OnInit {\n  displayedColumns: string[] = [\n    \"select\",\n    \"index\",\n    \"payrollId\",\n    \"employeeId\",\n    \"name\",\n    \"isDisabled\",\n    \"empStartDate\",\n    \"employment_terms\",\n    \"workingDays\",\n    \"basicSalary\",\n    \"grossSalary\",\n    // \"nhif\",\n    // \"nssf_tier1\",\n    // \"nssf_tier2\",\n    // \"nssf_employee\",\n    // \"chargeablePay\",\n    // \"taxableCharge\",\n    // \"insuranceRelief\",\n    // \"personalRelief\",\n    // \"employee_pension\",\n    // \"pension_relief\",\n    // \"paye\",\n    // \"employee_house_levy\",\n    \"netSalary\",\n    \"hrVerifierStatus\",\n    \"seniorHrVerifierStatus\",\n    \"action\",\n  ];\n\n  loading: boolean = false;\n  data: any;\n  error: any;\n  dialogConfig: any;\n  destroy$: Subject<boolean> = new Subject<boolean>();\n\n  dataSource!: MatTableDataSource<any>;\n  @ViewChild(MatPaginator) paginator!: MatPaginator;\n  @ViewChild(MatSort) sort!: MatSort;\n\n  selection = new SelectionModel<any>(true, []);\n\n  downloadLoading: boolean = false;\n  posting: boolean = false;\n  showForm: boolean = false;\n\n  Form: FormGroup;\n  months: string[] = [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\",\n  ];\n  constructor(\n    private dialog: MatDialog,\n    private notificationAPI: NotificationServiceService,\n    private payrollService: PayrollService,\n    private snackbar: SnackbarService,\n    private fb: FormBuilder,\n    private reportAPI: ReportService\n  ) { }\n\n  ngOnInit(): void {\n    const currentYear = new Date().getFullYear();\n    const currentMonthIndex = new Date().getMonth();\n    const currentMonthName = this.months[currentMonthIndex];\n\n    this.Form = this.fb.group({\n      year: [currentYear.toString(), Validators.required],\n      month: [currentMonthName, Validators.required],\n      department: [\"All\"],\n      jobGroup: [\"All\"],\n      status: \"All\",\n    });\n    this.Form.valueChanges.subscribe(() => {\n      this.getData();\n    });\n\n    this.getData();\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next(true);\n    this.destroy$.complete();\n  }\n\n  //**************************************************************************************************** */\n  statuses: any[] = [\n    { name: \"All\" },\n    { name: \"Pending\" },\n    { name: \"Approved\" },\n    { name: \"Rejected\" },\n  ];\n\n  allPayroll: any;\n  approvedPayroll: any;\n  pendingApproval: any;\n  rejectedPayroll: any;\n  payrollProcessorPending: any;\n  payrollProcessorApproved: any;\n  hrManagerPending: any;\n  hrManagerApproved: any;\n  overallPending: any;\n  overallApproved: any;\n  overallRejected: any;\n  isFinal = \"N\";\n  selectedStatus: string = \"PENDING\";\n  getSelectSelectedStatus() {\n    // this.getData();\n  }\n  getSelectedStatus(status: any) {\n    this.Form.patchValue({\n      status: status,\n    });\n\n    //  this.getData();\n  }\n  getSelectedApprover(approver: any) {\n    this.Form.patchValue({\n      approver: approver,\n    });\n\n    this.getData();\n  }\n  getData() {\n    this.loading = true;\n    this.dataSource = new MatTableDataSource([]);\n    this.dataSource.paginator = this.paginator;\n    this.dataSource.sort = this.sort;\n\n    this.selectedStatus = this.Form.value.status;\n\n    let params = new HttpParams()\n      .set(\"periodY\", this.Form.value.year)\n      .set(\"period_m\", this.Form.value.month)\n      .set(\"status\", this.Form.value.status)\n      .set(\"is_final\", this.isFinal);\n\n    this.payrollService\n      .getPayrollsData(params)\n      .pipe(takeUntil(this.destroy$))\n      .subscribe({\n        next: (res) => {\n          console.log(\"res:: \", res);\n          this.loading = false;\n\n          if (res.statusCode === 302) {\n            this.data = res.entity;\n\n            // this.dataSource = new MatTableDataSource(this.data);\n            //   this.dataSource.paginator = this.paginator;\n            //   this.dataSource.sort = this.sort;\n\n            if (Array.isArray(this.data) && this.data.length > 0) {\n              if (this.Form.value.department != \"All\") {\n                this.data = this.data.filter(\n                  (item: any) =>\n                    item.department_id == this.Form.value.department\n                );\n              }\n              if (this.Form.value.jobGroup != \"All\") {\n                this.data = this.data.filter(\n                  (item: any) => item.jobGroupFk == this.Form.value.jobGroup\n                );\n              }\n\n              this.allPayroll = this.data.length;\n              this.payrollProcessorPending = this.data.filter(\n                (item: any) => item.hr_verifier_status === \"Pending\"\n              ).length;\n              this.payrollProcessorApproved = this.data.filter(\n                (item: any) => item.hr_verifier_status === \"Approved\"\n              ).length;\n              this.hrManagerPending = this.data.filter(\n                (item: any) => item.senior_hr_verifier_status === \"Pending\"\n              ).length;\n              this.hrManagerApproved = this.data.filter(\n                (item: any) => item.senior_hr_verifier_status === \"Approved\"\n              ).length;\n              this.overallPending = this.data.filter(\n                (item: any) => item.status === \"Pending\"\n              ).length;\n              this.overallApproved = this.data.filter(\n                (item: any) => item.status === \"Approved\"\n              ).length;\n              this.overallRejected = this.data.filter(\n                (item: any) => item.status === \"Rejected\"\n              ).length;\n\n              this.dataSource = new MatTableDataSource(this.data);\n              this.dataSource.paginator = this.paginator;\n              this.dataSource.sort = this.sort;\n            } else {\n              this.notificationAPI.alertWarning(this.data.message);\n              this.dataSource = new MatTableDataSource([]);\n            }\n          } else {\n            this.notificationAPI.alertWarning(\n              \"No Data Matching entered filter parameters!\"\n            );\n            this.dataSource = new MatTableDataSource(this.data?.entity || []);\n          }\n        },\n        error: (err) => {\n          this.loading = false;\n          this.notificationAPI.alertWarning(\"Server Error: \" + err.message);\n        },\n        complete: () => { },\n      });\n  }\n  refresh() {\n    this.getData();\n  }\n\n  input: any;\n  applyFilter(event: Event) {\n    const filterValue = (event.target as HTMLInputElement).value;\n    this.input = filterValue;\n    this.dataSource.filter = filterValue.trim().toLowerCase();\n    if (this.dataSource.paginator) {\n      this.dataSource.paginator.firstPage();\n    }\n  }\n\n  // ****************************************************************************************************************************\n  // LOOKUPS\n  // ****************************************************************************************************************************\n\n  jobRoleLookup() {\n    const dialogConfig = new MatDialogConfig();\n    dialogConfig.disableClose = false;\n    dialogConfig.disableClose = true;\n    dialogConfig.width = \"800px\";\n    dialogConfig.data = {\n      action: \"SingleEmployee\",\n    };\n    const dialogRef = this.dialog.open(JobRolesLookupComponent, dialogConfig);\n    dialogRef.afterClosed().subscribe((res) => {\n      if (res && res.data && res.data.length > 0) {\n        this.Form.patchValue({\n          jobGroup: res.data[0].id,\n        });\n      }\n    });\n  }\n  departmentLookup() {\n    const dialogConfig = new MatDialogConfig();\n    dialogConfig.disableClose = false;\n    dialogConfig.disableClose = true;\n    dialogConfig.width = \"800px\";\n    dialogConfig.data = {\n      action: \"SingleDepartment\",\n    };\n    const dialogRef = this.dialog.open(\n      DepartmentsLookupComponent,\n      dialogConfig\n    );\n    dialogRef.afterClosed().subscribe((res) => {\n      if (res && res.data && res.data.length > 0) {\n        this.Form.patchValue({\n          department: res.data[0].id,\n        });\n      }\n    });\n  }\n  // ****************************************************************************************************************************\n  selectedRows: any[] = [];\n  atleastOneSelected: boolean = false;\n  isAllSelected() {\n    const numSelected = this.selection.selected.length;\n    const numRows = this.dataSource.data.length;\n    return numSelected === numRows;\n  }\n  masterToggle() {\n    if (this.isAllSelected()) {\n      this.selection.clear();\n      return;\n    }\n\n    this.selection.select(...this.dataSource.data);\n  }\n  checkboxLabel(row?: any): string {\n    if (!row) {\n      return `${this.isAllSelected() ? \"deselect\" : \"select\"} all`;\n    }\n    return `${this.selection.isSelected(row) ? \"deselect\" : \"select\"} row ${row.position + 1\n      }`;\n  }\n\n  expSelected() {\n    this.atleastOneSelected = true;\n    this.selectedRows = this.selection.selected;\n\n    console.log(\"this.selectedRows: \", this.selectedRows);\n  }\n\n  hasAccess: boolean = true;\n  processMultipleRows(status: any) {\n    let privilege = \"Validate Expenses\";\n\n    // this.hasAccess = this.accessControlService.hasPrivilege(\"FinanceModule\", [\n    //   privilege,\n    // ]);\n\n    if (this.hasAccess) {\n\n      Swal.fire({\n        title: '<span style=\"font-size: 20px;\">Enter Details Below: </span>',\n        html:\n          '<select id=\"approverSelect\" class=\"swal2-select\">' +\n          '<option value=\"\" disabled selected>Select Approver</option>' +\n          '<option value=\"Senior Hr Payroll Approver\">Senior Hr Payroll Approver</option>' +\n          '<option value=\"Hr Payroll Approver\">Hr Payroll Approver</option>' +\n          '</select>' +\n          '<textarea id=\"remarks\" class=\"swal2-textarea\" placeholder=\"Type your remarks here...\" style=\"margin-top: 15px;\"></textarea>',\n        icon: \"info\",\n        confirmButtonText: \"Submit\",\n        showCancelButton: true,\n        cancelButtonText: \"Cancel\",\n        preConfirm: () => {\n          const approverSelect = Swal.getPopup().querySelector('#approverSelect') as HTMLSelectElement;\n          const approver = approverSelect.value;\n\n          const remarksTextarea = Swal.getPopup().querySelector('#remarks') as HTMLTextAreaElement;\n          const verifierRemarks = remarksTextarea.value;\n\n          if (!approver) {\n            Swal.showValidationMessage('Please select an approver');\n          }\n          if (!verifierRemarks) {\n            Swal.showValidationMessage('Please enter your remarks');\n          }\n\n          return { approver, verifierRemarks };\n        }\n      }).then((result) => {\n        if (result.isConfirmed) {\n          const { approver, verifierRemarks } = result.value;\n\n\n          const processedRows = this.selectedRows.map((element) => {\n            return {\n              id: element.id,\n              status: status,\n              verifierRemarks: verifierRemarks,\n            };\n          });\n\n          let params = { approver: approver }\n          this.payrollService\n            .updateState(params, processedRows)\n            .pipe(takeUntil(this.destroy$))\n            .subscribe({\n              next: (res) => {\n                console.log(\"res: \", res);\n                if (res.statusCode == 201 || res.statusCode == 200 || res.statusCode == 302) {\n                  this.snackbar.showNotification(\"snackbar-success\", res.message);\n                  this.selection = new SelectionModel<any>(true, []);\n                  this.selection.clear();\n                } else {\n                  this.snackbar.showNotification(\"snackbar-danger\", res.message);\n                }\n              },\n              error: (err) => {\n                this.snackbar.showNotification(\"snackbar-danger\", err.message);\n                this.selection = new SelectionModel<any>(true, []);\n          this.selection.clear();\n              },\n              complete: () => {\n                this.getData();\n              },\n            });\n        } else {\n          this.selection = new SelectionModel<any>(true, []);\n          this.selection.clear();\n        }\n      });\n\n    }\n  }\n\n  //********************************************************************************************************** */\n  deleteRecord(payrollId: any) {\n    let params = { payrollId: payrollId };\n    Swal.fire({\n      title: \"Are you sure?\",\n      text: \"THIS RECORD WILL BE DELETED PERMANENTLY!!\",\n      icon: \"warning\",\n      showCancelButton: true,\n      confirmButtonColor: \"#3085d6\",\n      cancelButtonColor: \"#d33\",\n      confirmButtonText: \"Yes, delete it!\",\n    }).then((result) => {\n      if (result.isConfirmed) {\n        this.loading = true;\n        this.payrollService\n          .delete(params)\n          .pipe(takeUntil(this.destroy$))\n          .subscribe({\n            next: (res) => {\n              if (res.statusCode == 200) {\n                this.getData();\n                this.loading = false;\n                this.notificationAPI.alertSuccess(\n                  \"RECORD DELETED SUCCESSFULLY\"\n                );\n              } else {\n                this.getData();\n                this.loading = false;\n                this.notificationAPI.alertWarning(res.message);\n              }\n            },\n            error: (err) => {\n              this.loading = false;\n              this.notificationAPI.alertSuccess(\"Server Error: \" + err.message);\n            },\n            complete: () => { },\n          });\n      }\n    });\n  }\n  reRunPayroll(row: any) {\n    Swal.fire({\n      title: \"Re-run Payroll\",\n      text: \"Please provide your comments before re-running the payroll.\",\n      input: \"textarea\",\n      inputLabel: \"Comments\",\n      inputPlaceholder: \"Enter your comments here...\",\n      inputAttributes: {\n        \"aria-label\": \"Enter your comments here\",\n      },\n      icon: \"info\",\n      showCancelButton: true,\n      confirmButtonText: \"Re-run\",\n      preConfirm: (comments) => {\n        if (!comments) {\n          Swal.showValidationMessage(\"Comments are required\");\n        }\n        return { comments: comments };\n      },\n    }).then((result) => {\n      if (result.isConfirmed) {\n        const comments = result.value.comments;\n\n        let data = {\n          basic_salary: row.grossPay,\n          comments: comments,\n          payrollId: row.payrollId,\n        };\n\n        console.log('data:: ',data)\n        this.payrollService.rerunPayroll(data).subscribe((res) => {\n          this.getData();\n          if (res.statusCode === 200) {\n            this.notificationAPI.alertSuccess(res.message);\n          } else {\n            this.notificationAPI.alertWarning(res.message);\n          }\n        });\n      }\n    });\n  }\n  // {\n  //   \"payrollId\": \"string\",\n  //   \"comments\": \"string\"\n  // }\n  showRecordDetails(row) {\n    const content = `\n    <div style=\"font-family: Arial, sans-serif; text-align: left;\">\n      <table style=\"width: 100%;\">\n        <tr>\n          <td><strong>Payroll ID:</strong></td>\n          <td>${row.payrollId}</td>\n          <td><strong>Cost Center Code:</strong></td>\n          <td>${row.costCenterCode}</td>\n        </tr>\n        <tr>\n          <td><strong>Payroll Circle Code:</strong></td>\n          <td>${row.payrollCircleCode}</td>\n          <td><strong>Employee No:</strong></td>\n          <td>${row.empNo}</td>\n        </tr>\n        <tr>\n          <td><strong>Start Date:</strong></td>\n          <td>${row.empStartDate}</td>\n          <td><strong>Employment Terms:</strong></td>\n          <td>${row.employmentTerms}</td>\n        </tr>\n        <tr>\n          <td><strong>Residential Status:</strong></td>\n          <td>${row.residentialStatus}</td>\n          <td><strong>Employee Type:</strong></td>\n          <td>${row.employeeType}</td>\n        </tr>\n        <tr>\n          <td><strong>Type of Housing:</strong></td>\n          <td>${row.typeOfHousing}</td>\n          <td><strong>Branch Code:</strong></td>\n          <td>${row.branchCode}</td>\n        </tr>\n        <tr>\n          <td><strong>Department ID:</strong></td>\n          <td>${row.departmentId}</td>\n          <td><strong>Job Group:</strong></td>\n          <td>${row.jobGroupFk}</td>\n        </tr>\n        <tr>\n          <td><strong>Work Type:</strong></td>\n          <td>${row.workType}</td>\n          <td><strong>Working Days:</strong></td>\n          <td>${row.workingDays}</td>\n        </tr>\n        <tr>\n          <td><strong>First Name:</strong></td>\n          <td>${row.firstName}</td>\n          <td><strong>Middle Name:</strong></td>\n          <td>${row.middleName}</td>\n        </tr>\n        <tr>\n          <td><strong>Last Name:</strong></td>\n          <td>${row.lastName}</td>\n          <td><strong>Other Names:</strong></td>\n          <td>${row.otherNames}</td>\n        </tr>\n        <tr>\n          <td><strong>ID No:</strong></td>\n          <td>${row.idNo}</td>\n          <td><strong>Account No:</strong></td>\n          <td>${row.acctNo}</td>\n        </tr>\n        <tr>\n          <td><strong>Bank:</strong></td>\n          <td>${row.bank}</td>\n          <td><strong>NSSF No:</strong></td>\n          <td>${row.nssfNo}</td>\n        </tr>\n        <tr>\n          <td><strong>NHIF No:</strong></td>\n          <td>${row.nhifNo}</td>\n          <td><strong>PIN No:</strong></td>\n          <td>${row.pinNo}</td>\n        </tr>\n        <tr>\n          <td><strong>Period:</strong></td>\n          <td>${row.periodM} ${row.periodY}</td>\n          <td><strong>Basic Salary:</strong></td>\n          <td>${row.basicSalary}</td>\n        </tr>\n        <tr>\n          <td><strong>NSSF Tier 1:</strong></td>\n          <td>${row.nssfTier1}</td>\n          <td><strong>NSSF Tier 2:</strong></td>\n          <td>${row.nssfTier2}</td>\n        </tr>\n        <tr>\n          <td><strong>NSSF Employee:</strong></td>\n          <td>${row.nssfEmployee}</td>\n          <td><strong>NSSF Employer:</strong></td>\n          <td>${row.nssfEmployer}</td>\n        </tr>\n        <tr>\n          <td><strong>NHIF:</strong></td>\n          <td>${row.nhif}</td>\n          <td><strong>PAYE:</strong></td>\n          <td>${row.paye}</td>\n        </tr>\n        <tr>\n          <td><strong>HELB:</strong></td>\n          <td>${row.helb}</td>\n          <td><strong>Total Allowance:</strong></td>\n          <td>${row.totalAllowance}</td>\n        </tr>\n        <tr>\n          <td><strong>Total Earnings:</strong></td>\n          <td>${row.totalEarnings}</td>\n          <td><strong>Staff Loan:</strong></td>\n          <td>${row.hasStaffLoan}</td>\n        </tr>\n        <tr>\n          <td><strong>Total Staff Loan Deduction:</strong></td>\n          <td>${row.totalStaffLoanDeduction}</td>\n          <td><strong>Total Outstanding Staff Loan:</strong></td>\n          <td>${row.totalOutStandingStaffLoan}</td>\n        </tr>\n        <tr>\n          <td><strong>Taxable Custom Deduction:</strong></td>\n          <td>${row.taxableCustomDeduction}</td>\n          <td><strong>Non-Taxable Custom Deduction:</strong></td>\n          <td>${row.nonTaxableCustomDeduction}</td>\n        </tr>\n        <tr>\n          <td><strong>Net Salary:</strong></td>\n          <td>${row.netSalary}</td>\n          <td><strong>Total Non-Cash Benefit:</strong></td>\n          <td>${row.totalNonCashBenefit}</td>\n        </tr>\n        <tr>\n          <td><strong>Value of Quarters:</strong></td>\n          <td>${row.valueOfQuarters}</td>\n          <td><strong>Gross Pay:</strong></td>\n          <td>${row.grossPay}</td>\n        </tr>\n        <tr>\n          <td><strong>Prorated Basic Pay:</strong></td>\n          <td>${row.proratedBasicPay}</td>\n          <td><strong>Carry Forward GP:</strong></td>\n          <td>${row.carryForwardGP}</td>\n        </tr>\n        <tr>\n          <td><strong>DCRS E1:</strong></td>\n          <td>${row.dcrsE1}</td>\n          <td><strong>DCRS Actual E2:</strong></td>\n          <td>${row.dcrsActualE2}</td>\n        </tr>\n        <tr>\n          <td><strong>DCRS Fixed E3:</strong></td>\n          <td>${row.dcrsFixedE3}</td>\n          <td><strong>Owner Occupied Interests:</strong></td>\n          <td>${row.ownerOccupiedInterests}</td>\n        </tr>\n        <tr>\n          <td><strong>Retirement and Owner Occupied Interests:</strong></td>\n          <td>${row.retirementAndOwnerOccupiedInterests}</td>\n          <td><strong>Chargeable Pay:</strong></td>\n          <td>${row.chargeablePay}</td>\n        </tr>\n        <tr>\n          <td><strong>Taxable Custom Allowance:</strong></td>\n          <td>${row.taxableCustomAllowance}</td>\n          <td><strong>Non-Taxable Custom Allowance:</strong></td>\n          <td>${row.nonTaxableCustomAllowance}</td>\n        </tr>\n        <tr>\n          <td><strong>Housing Allowance:</strong></td>\n          <td>${row.housingAllowance}</td>\n          <td><strong>Employee House Levy:</strong></td>\n          <td>${row.employeeHouseLevy}</td>\n        </tr>\n        <tr>\n          <td><strong>Employer House Levy:</strong></td>\n          <td>${row.employerHouseLevy}</td>\n          <td><strong>Transport Allowance:</strong></td>\n          <td>${row.transportAllowance}</td>\n        </tr>\n        <tr>\n          <td><strong>Leave Allowances:</strong></td>\n          <td>${row.leaveAllowances}</td>\n          <td><strong>Overtime Allowances:</strong></td>\n          <td>${row.overtimeAllowances}</td>\n        </tr>\n        <tr>\n          <td><strong>Directors Fee:</strong></td>\n          <td>${row.directorsFee}</td>\n          <td><strong>Lump Sum Payment:</strong></td>\n          <td>${row.lumpSumPayment}</td>\n        </tr>\n        <tr>\n          <td><strong>Other Allowance:</strong></td>\n          <td>${row.otherAllowance}</td>\n          <td><strong>Gratuity:</strong></td>\n          <td>${row.gratuity}</td>\n        </tr>\n        <tr>\n          <td><strong>Value of Car Benefit:</strong></td>\n          <td>${row.valueOfCarBenefit}</td>\n          <td><strong>Tax Charged:</strong></td>\n          <td>${row.taxCharged}</td>\n        </tr>\n        <tr>\n          <td><strong>Personal Relief:</strong></td>\n          <td>${row.personalRelief}</td>\n          <td><strong>Insurance Relief:</strong></td>\n          <td>${row.insuranceRelief}</td>\n        </tr>\n        <tr>\n          <td><strong>Total Relief:</strong></td>\n          <td>${row.totalRelief}</td>\n          <td><strong>Pension Employee Voluntary:</strong></td>\n          <td>${row.pensionEmployeeVoluntary}</td>\n        </tr>\n        <tr>\n          <td><strong>Pension Employee:</strong></td>\n          <td>${row.pensionEmployee}</td>\n          <td><strong>Pension Employer:</strong></td>\n          <td>${row.pensionEmployer}</td>\n        </tr>\n        <tr>\n          <td><strong>Pension Relief:</strong></td>\n          <td>${row.pensionRelief}</td>\n          <td><strong>Accumulated Pension:</strong></td>\n          <td>${row.accumulatedPension}</td>\n        </tr>\n        <tr>\n          <td><strong>SACCO Deductions:</strong></td>\n          <td>${row.saccoDeductions}</td>\n          <td><strong>Leave Deduction:</strong></td>\n          <td>${row.leaveDeduction}</td>\n        </tr>\n        <tr>\n          <td><strong>Total Cash Earning:</strong></td>\n          <td>${row.totalCashEarning}</td>\n          <td><strong>Total Deductions Net Salary:</strong></td>\n          <td>${row.totalDeductionsNetSalary}</td>\n        </tr>\n        <tr>\n          <td><strong>Mortgage:</strong></td>\n          <td>${row.mortgage}</td>\n          <td><strong>Mortgage Relief:</strong></td>\n          <td>${row.mortgageRelief}</td>\n        </tr>\n        <tr>\n          <td><strong>Outsourced:</strong></td>\n          <td>${row.outSourced}</td>\n          <td><strong>Disabled Reg No:</strong></td>\n          <td>${row.disabledRegNo}</td>\n        </tr>\n        <tr>\n          <td><strong>Is Disabled:</strong></td>\n          <td>${row.isDisabled}</td>\n          <td><strong>Account Name:</strong></td>\n          <td>${row.accountName}</td>\n        </tr>\n        <tr>\n          <td><strong>Status:</strong></td>\n          <td>${row.status}</td>\n          <td><strong>HR Verifier Status:</strong></td>\n          <td>${row.hrVerifierStatus}</td>\n        </tr>\n        <tr>\n          <td><strong>Senior HR Verifier Status:</strong></td>\n          <td>${row.seniorHrVerifierStatus}</td>\n        </tr>\n      </table>\n    </div>\n  `;\n\n    Swal.fire({\n      title: 'Record Details',\n      html: content,\n      icon: 'info',\n      confirmButtonText: 'Close'\n    });\n  }\n\n  //********************************************************************************************************** */\n  downloadSummaryExcel() {\n    let filename = \"PAYROLL_SUMMARY\";\n    if (this.Form.value.year == null || this.Form.value.month == null) {\n      this.notificationAPI.alertWarning(\n        \"You must provide Year and Month for the report to be generated!\"\n      );\n    } else {\n\n      let department = 0\n      if (this.Form.value.department === 'All') {\n        department = 0;\n      } else {\n        department = this.Form.value.department;\n      }\n\n      let jobGroup = 0\n      if (this.Form.value.jobGroup === 'All') {\n        jobGroup = 0;\n      } else {\n        jobGroup = this.Form.value.jobGroupFk;\n      }\n\n      let params = new HttpParams()\n        .set(\"period_y\", this.Form.value.year)\n        .set(\"period_m\", this.Form.value.month)\n        .set(\"departmentFk\", department)\n        .set(\"jobGroupFk\", jobGroup)\n        .set(\"reportType\", \"OVERALL\")\n        .set(\"isFinal\", this.isFinal);\n      this.loading = true;\n      this.reportAPI.generate(params).subscribe((data) => {\n        if (data.statusCode == \"404\") {\n          this.notificationAPI.alertWarning(data.message);\n        } else {\n          let extension = \"xlsx\";\n          this.saveToFileSystem(\n            filename,\n            data,\n            this.Form.value.year,\n            this.Form.value.month,\n            extension\n          );\n        }\n        this.loading = false;\n      });\n    }\n  }\n  private saveToFileSystem(\n    filename: any,\n    response: any,\n    year,\n    month,\n    extension\n  ) {\n    const blob = new Blob([response], { type: \"application/vnd.ms-excel\" });\n    const url = window.URL.createObjectURL(blob);\n    const anchor = document.createElement(\"a\");\n    anchor.download = filename + \"_for_\" + year + \"_\" + month + \".\" + extension;\n    anchor.href = url;\n    anchor.click();\n  }\n}\n","<section class=\"content\">\n  <div class=\"content-block\">\n    <div class=\"block-header\">\n      <app-breadcrumb [title]=\"'Reconcile Payroll'\" [items]=\"['Payroll']\" [active_item]=\"'Reconcile Payroll'\">\n      </app-breadcrumb>\n    </div>\n    <app-gen-widgets></app-gen-widgets>\n\n    <div class=\"row\">\n      <div class=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\">\n        <div class=\"card\">\n          <div class=\"body\">\n            <div class=\"table-responsive\">\n              <div class=\"materialTableHeader\">\n                <div class=\"row\">\n                  <div class=\"col-8\">\n                    <ul class=\"header-buttons-left ms-0\">\n                      <li class=\"dropdown\">\n                        <h2> Reconcile Payroll</h2>\n                      </li>\n                      <li class=\"dropdown m-l-20\">\n                        <label for=\"search-input\"><i class=\"material-icons search-icon\">search</i></label>\n                        <input placeholder=\"Filter...\" type=\"text\" (keyup)=\"applyFilter($event)\" #filter\n                          class=\"browser-default search-field\" aria-label=\"Search box\" />\n                      </li>\n\n                      <li>\n                        <div class=\"m-l-10\" matTooltip=\"REFRESH\">\n                          <button mat-mini-fab color=\"primary\" (click)=\"refresh()\">\n                            <mat-icon class=\"col-white\">refresh</mat-icon>\n                          </button>\n                        </div>\n                      </li>\n                      <li *ngIf=\"selection.selected.length > 0\">\n                        <div class=\"m-l-10\" matTooltip=\"APPROVE\">\n                          <button mat-mini-fab color=\"primary\" (click)=\"processMultipleRows('APPROVED')\"\n                            class=\"mat-button-custom\">\n                            <mat-icon class=\"col-white\">check</mat-icon>\n                          </button>\n                        </div>\n                      </li>\n                      <li *ngIf=\"selection.selected.length > 0\">\n                        <div class=\"m-l-10\" matTooltip=\"REJECT\">\n                          <button mat-mini-fab color=\"warn\" (click)=\"processMultipleRows('REJECTED')\"\n                            class=\"mat-button-custom\">\n                            <mat-icon class=\"col-white\">cancel</mat-icon>\n                          </button>\n                        </div>\n                      </li>\n                      <li *ngIf=\"selection.selected.length > 0\">\n                        <div class=\"m-l-10\" matTooltip=\"RETURN\">\n                          <button mat-mini-fab color=\"accent\" (click)=\"processMultipleRows('RETURNED')\"\n                            class=\"mat-button-custom\">\n                            <mat-icon class=\"col-white\">undo</mat-icon>\n                          </button>\n                        </div>\n                      </li>\n\n\n                    </ul>\n                  </div>\n                  <div class=\"col-4\">\n                    <ul class=\"header-buttons\">\n                      <li>\n                        <div class=\"export-button m-l-10\" matTooltip=\"XLSX\">\n                          <img src=\"assets/images/icons/xlsx.png\" alt=\"\" (click)=\"\n                              exporter.exportTable('xlsx', {\n                                fileName: 'assets-list',\n                                sheet: 'sheet1'\n                              })\n                            \" />\n                        </div>\n                      </li>\n                      <li>\n                        <div class=\"export-button m-l-10\" matTooltip=\"CSV\">\n                          <img src=\"assets/images/icons/csv.png\" alt=\"\" (click)=\"exporter.exportTable('csv')\" />\n                        </div>\n                      </li>\n                      <li>\n                        <div class=\"export-button m-l-10\" matTooltip=\"JSON\">\n                          <img src=\"assets/images/icons/json.png\" alt=\"\" (click)=\"exporter.exportTable('json')\" />\n                        </div>\n                      </li>\n                      <li>\n                        <div class=\"export-button m-l-10\" matTooltip=\"TXT\">\n                          <img src=\"assets/images/icons/txt.png\" alt=\"\" (click)=\"exporter.exportTable('txt')\" />\n                        </div>\n                      </li>\n                    </ul>\n                  </div>\n                </div>\n              </div>\n              <div class=\"materialTableHeader mt-2\">\n                <form [formGroup]=\"Form\">\n                  <div class=\"row\">\n                    <div class=\"col-2\">\n                      <div class=\"row\">\n\n                        <mat-form-field class=\"example-full-width\" appearance=\"outline\">\n                          <mat-label>Year</mat-label>\n                          <input matInput formControlName=\"year\" />\n                          <mat-error *ngIf=\"Form.get('year').hasError('required')\">\n                            Please Enter Year\n                          </mat-error>\n                        </mat-form-field>\n\n                      </div>\n                    </div>\n                    <div class=\"col-2\">\n                      <mat-form-field class=\"example-full-width\" appearance=\"outline\">\n                        <mat-label>Month</mat-label>\n                        <mat-select formControlName=\"month\">\n                          <mat-option *ngFor=\"let month of months\" [value]=\"month\">{{ month }}</mat-option>\n                        </mat-select>\n                        <mat-error *ngIf=\"Form.get('month').hasError('required')\">Please select a month</mat-error>\n                      </mat-form-field>\n                    </div>\n\n                    <div class=\"col-2\">\n                      <mat-form-field class=\"example-full-width\" appearance=\"outline\">\n                        <mat-label>Department</mat-label>\n                        <input matInput formControlName=\"department\" />\n                        <mat-icon matSuffix (click)=\"departmentLookup()\">search</mat-icon>\n                        <mat-error *ngIf=\"\n                            Form.get('department').invalid &&\n                            Form.get('department').touched\n                          \">\n                          Please enter a department\n                        </mat-error>\n                      </mat-form-field>\n                    </div>\n                    <div class=\"col-2\">\n                      <mat-form-field class=\"example-full-width\" appearance=\"outline\">\n                        <mat-label>Job Level</mat-label>\n                        <input matInput formControlName=\"jobGroup\" />\n                        <mat-icon matSuffix (click)=\"jobRoleLookup()\">search</mat-icon>\n                        <mat-error *ngIf=\"\n                            Form.get('jobGroup').invalid &&\n                            Form.get('jobGroup').touched\n                          \">\n                          Please enter a job level\n                        </mat-error>\n                      </mat-form-field>\n                    </div>\n\n                    <div class=\"col-2\">\n                      <mat-form-field class=\"example-full-width\" appearance=\"outline\">\n                        <mat-label>Status</mat-label>\n                        <mat-select formControlName=\"status\">\n                          <mat-option *ngFor=\"let status of statuses\" [value]=\"status.name\">{{ status.name\n                            }}</mat-option>\n                        </mat-select>\n                        <mat-error *ngIf=\"Form.get('status').hasError('required')\">Please select a status</mat-error>\n                      </mat-form-field>\n                    </div>\n\n                    <div class=\"col-2\">\n                      <button class=\"btn-space mt-2\" mat-raised-button color=\"primary\" (click)=\"downloadSummaryExcel()\">\n                        <mat-icon>cloud_download</mat-icon>\n                        Payroll Summary\n                      </button>\n                    </div>\n                  </div>\n                </form>\n              </div>\n\n              <!-- <div class=\"row mt-3 mx-2 justify-content-center\">\n                <div class=\"col-md-2 col-sm-12\">\n                  <div class=\"card\">\n                    <div class=\"card-header\">\n                      Payroll records\n                    </div>\n                    <div class=\"card-body\">\n                      <h2 class=\"card-title\"><a>Total payroll: <strong>{{allPayroll}}</strong></a></h2>\n                      <h2 class=\"card-title\"><a>Rejected: <strong>{{overallRejected}}</strong></a></h2>\n                    </div>\n                  </div>\n                </div>\n               \n                <div class=\"col-md-2 col-sm-12\">\n                  <div class=\"card\">\n                    <div class=\"card-header\">\n                      HR Payroll Processor\n                    </div>\n                    <div class=\"card-body\">\n                      <h2 class=\"card-title\"><a>Pending: <strong>{{this.payrollProcessorPending}}</strong></a></h2>\n                      <h2 class=\"card-title\"><a>Approved: <strong>{{this.payrollProcessorApproved}}</strong></a></h2>\n                    </div>\n                  </div>\n                </div>\n                <div class=\"col-md-2 col-sm-12\">\n                  <div class=\"card\">\n                    <div class=\"card-header\">\n                      Senior HR Manager\n                    </div>\n                    <div class=\"card-body\">\n                      <h2 class=\"card-title\"> <a>Pending: <strong>{{this.hrManagerPending}}</strong></a></h2>\n                      <h2 class=\"card-title\"><a>Approved: <strong>{{this.hrManagerApproved}}</strong></a></h2>\n                    </div>\n                  </div>\n                </div>\n                <div class=\"col-md-2 col-sm-12\">\n                  <div class=\"card\">\n                    <div class=\"card-header\">\n                      Overall Status\n                    </div>\n                    <div class=\"card-body\">\n                      <h2 class=\"card-title\"><a>Pending: <strong>{{this.overallPending}}</strong></a></h2>\n                      <h2 class=\"card-title\"><a>Approved: <strong>{{overallApproved}}</strong></a></h2>\n                    </div>\n                  </div>\n                </div>\n              </div> -->\n              <mat-table #table matTableExporter [dataSource]=\"dataSource\" matSort class=\"mat-cell\"\n                #exporter=\"matTableExporter\">\n                <ng-container matColumnDef=\"select\">\n                  <mat-header-cell *matHeaderCellDef mat-sticky=\"start\" [ngClass]=\"'tbl-col-width-per-4'\">\n                    <mat-checkbox color=\"primary\" (change)=\"$event ? masterToggle() : null\"\n                      [checked]=\"selection.hasValue() && isAllSelected()\"\n                      [indeterminate]=\"selection.hasValue() && !isAllSelected()\" [ngClass]=\"'tbl-checkbox'\"\n                      (change)=\"expSelected()\">\n                    </mat-checkbox>\n                  </mat-header-cell>\n                  <mat-cell *matCellDef=\"let row\" [ngClass]=\"'tbl-col-width-per-4'\">\n                    <mat-checkbox color=\"primary\" (click)=\"$event.stopPropagation()\"\n                      (change)=\"$event ? selection.toggle(row) : null\" [checked]=\"selection.isSelected(row)\"\n                      [ngClass]=\"'tbl-checkbox'\" [aria-label]=\"checkboxLabel(row)\" (change)=\"expSelected()\">\n                    </mat-checkbox>\n                  </mat-cell>\n                </ng-container>\n\n                <ng-container matColumnDef=\"index\">\n                  <mat-header-cell *matHeaderCellDef mat-sort-header class=\"column-nowrap psl-3 tbl-col-width-per-10\">\n                    Index\n                  </mat-header-cell>\n                  <mat-cell *matCellDef=\"let row; let i = index\" class=\"column-nowrap psl-3 tbl-col-width-per-10\">\n                    {{ i + 1 }}\n                  </mat-cell>\n                </ng-container>\n\n\n                <ng-container matColumnDef=\"payrollId\">\n                  <mat-header-cell *matHeaderCellDef mat-sort-header class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                    Payroll ID\n                  </mat-header-cell>\n                  <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                    {{ row.payrollId }}\n                  </mat-cell>\n                </ng-container>\n\n                <ng-container matColumnDef=\"employeeId\">\n                  <mat-header-cell *matHeaderCellDef mat-sort-header class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                    Employee PF\n                  </mat-header-cell>\n                  <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                    {{ row.empNo }}\n                  </mat-cell>\n                </ng-container>\n\n                <ng-container matColumnDef=\"name\">\n                  <mat-header-cell *matHeaderCellDef mat-sort-header class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                    Name\n                  </mat-header-cell>\n                  <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                    {{ row.firstName }} {{ row.middleName }} {{ row.lastName }}\n                  </mat-cell>\n                </ng-container>\n\n                <ng-container matColumnDef=\"isDisabled\">\n                  <mat-header-cell *matHeaderCellDef mat-sort-header class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                    Is Disabled\n                  </mat-header-cell>\n                  <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                    {{ row.isDisabled }}\n                  </mat-cell>\n                </ng-container>\n\n                <ng-container matColumnDef=\"empStartDate\">\n                  <mat-header-cell *matHeaderCellDef mat-sort-header class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                    Employee Start Date\n                  </mat-header-cell>\n                  <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                    {{ row.empStartDate }}\n                  </mat-cell>\n                </ng-container>\n\n                <ng-container matColumnDef=\"employment_terms\">\n                  <mat-header-cell *matHeaderCellDef mat-sort-header class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                    Employment Terms\n                  </mat-header-cell>\n                  <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                    {{ row.employmentTerms }}\n                  </mat-cell>\n                </ng-container>\n\n                <ng-container matColumnDef=\"workingDays\">\n                  <mat-header-cell *matHeaderCellDef mat-sort-header class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                    Working Days\n                  </mat-header-cell>\n                  <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                    {{ row.workingDays }}\n                  </mat-cell>\n                </ng-container>\n\n                <ng-container matColumnDef=\"basicSalary\">\n                  <mat-header-cell *matHeaderCellDef mat-sort-header class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                    Basic Salary\n                  </mat-header-cell>\n                  <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                    {{ row.basicSalary }}\n                  </mat-cell>\n                </ng-container>\n\n                <ng-container matColumnDef=\"grossSalary\">\n                  <mat-header-cell *matHeaderCellDef mat-sort-header class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                    Gross Salary\n                  </mat-header-cell>\n                  <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                    {{ row.grossPay }}\n                  </mat-cell>\n                </ng-container>\n\n                <ng-container matColumnDef=\"nhif\">\n                  <mat-header-cell *matHeaderCellDef mat-sort-header class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                    NHIF\n                  </mat-header-cell>\n                  <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                    {{ row.nhif }}\n                  </mat-cell>\n                </ng-container>\n\n                <ng-container matColumnDef=\"nssf_tier1\">\n                  <mat-header-cell *matHeaderCellDef mat-sort-header class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                    NSSF Tier 1\n                  </mat-header-cell>\n                  <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                    {{ row.nssf_tier1 }}\n                  </mat-cell>\n                </ng-container>\n\n                <ng-container matColumnDef=\"nssf_tier2\">\n                  <mat-header-cell *matHeaderCellDef mat-sort-header class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                    NSSF Tier 2\n                  </mat-header-cell>\n                  <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                    {{ row.nssf_tier2 }}\n                  </mat-cell>\n                </ng-container>\n\n                <ng-container matColumnDef=\"nssf_employee\">\n                  <mat-header-cell *matHeaderCellDef mat-sort-header class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                    NSSF Employee\n                  </mat-header-cell>\n                  <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                    {{ row.nssf_employee }}\n                  </mat-cell>\n                </ng-container>\n\n                <ng-container matColumnDef=\"chargeablePay\">\n                  <mat-header-cell *matHeaderCellDef mat-sort-header class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                    Chargeable Pay\n                  </mat-header-cell>\n                  <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                    {{ row.chargeablePay }}\n                  </mat-cell>\n                </ng-container>\n\n                <ng-container matColumnDef=\"taxableCharge\">\n                  <mat-header-cell *matHeaderCellDef mat-sort-header class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                    Taxable Charge\n                  </mat-header-cell>\n                  <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                    {{ row.taxableCharge }}\n                  </mat-cell>\n                </ng-container>\n\n                <ng-container matColumnDef=\"insuranceRelief\">\n                  <mat-header-cell *matHeaderCellDef mat-sort-header class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                    Insurance Relief\n                  </mat-header-cell>\n                  <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                    {{ row.insuranceRelief }}\n                  </mat-cell>\n                </ng-container>\n\n                <ng-container matColumnDef=\"personalRelief\">\n                  <mat-header-cell *matHeaderCellDef mat-sort-header class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                    Personal Relief\n                  </mat-header-cell>\n                  <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                    {{ row.personalRelief }}\n                  </mat-cell>\n                </ng-container>\n\n                <ng-container matColumnDef=\"employee_pension\">\n                  <mat-header-cell *matHeaderCellDef mat-sort-header class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                    Employee Pension\n                  </mat-header-cell>\n                  <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                    {{ row.employee_pension }}\n                  </mat-cell>\n                </ng-container>\n\n                <ng-container matColumnDef=\"pension_relief\">\n                  <mat-header-cell *matHeaderCellDef mat-sort-header class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                    Pension Relief\n                  </mat-header-cell>\n                  <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                    {{ row.pension_relief }}\n                  </mat-cell>\n                </ng-container>\n\n                <ng-container matColumnDef=\"paye\">\n                  <mat-header-cell *matHeaderCellDef mat-sort-header class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                    PAYE\n                  </mat-header-cell>\n                  <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                    {{ row.paye }}\n                  </mat-cell>\n                </ng-container>\n\n                <ng-container matColumnDef=\"employee_house_levy\">\n                  <mat-header-cell *matHeaderCellDef mat-sort-header class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                    Employee House Levy\n                  </mat-header-cell>\n                  <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                    {{ row.employee_house_levy }}\n                  </mat-cell>\n                </ng-container>\n\n                <ng-container matColumnDef=\"netSalary\">\n                  <mat-header-cell *matHeaderCellDef mat-sort-header class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                    Net Salary\n                  </mat-header-cell>\n                  <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                    {{ row.netSalary }}\n                  </mat-cell>\n                </ng-container>\n\n                <ng-container matColumnDef=\"hrVerifierStatus\">\n                  <mat-header-cell *matHeaderCellDef mat-sort-header class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                    HR Status\n                  </mat-header-cell>\n                  <mat-cell *matCellDef=\"let row; let i = index\" class=\"column-nowrap psl-3 tbl-col-width-per-20\"\n                    (click)=\"$event.stopPropagation()\">\n                    <ng-container [ngSwitch]=\"row.hrVerifierStatus\">\n                      <button *ngSwitchCase=\"'APPROVED'\" class=\"badge badge-solid-green btn btn btn-sm m-1\">\n                        <i class=\"fas fa-check-circle\"></i>&nbsp;\n                        {{ row.hrVerifierStatus }}\n                      </button>\n                      <button *ngSwitchCase=\"'REJECTED'\" class=\"badge badge-solid-red btn btn btn-sm m-1\">\n                        <i class=\"fas fa-times-circle\"></i>&nbsp;\n                        {{ row.hrVerifierStatus }}\n                      </button>\n                      <button *ngSwitchCase=\"'RETURNED'\" class=\"badge badge-solid-brown btn btn btn-sm m-1\">\n                        <i class=\"fas fa-undo-alt\"></i>&nbsp;\n                        {{ row.hrVerifierStatus }}\n                      </button>\n                      <button *ngSwitchCase=\"'PENDING'\" class=\"badge badge-solid-blue btn btn btn-sm m-1\">\n                        <i class=\"fas fa-exclamation-circle\"></i>&nbsp;\n                        {{ row.hrVerifierStatus }}\n                      </button>\n                      <button *ngSwitchDefault class=\"badge badge-solid-brown btn btn btn-sm m-1\">\n                        <i class=\"fas fa-question-circle\"></i>&nbsp;\n                        {{ row.hrVerifierStatus }}\n                      </button>\n                    </ng-container>\n                  </mat-cell>\n                </ng-container>\n                <ng-container matColumnDef=\"seniorHrVerifierStatus\">\n                  <mat-header-cell *matHeaderCellDef mat-sort-header class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                    Senior Hr Status\n                  </mat-header-cell>\n                  <mat-cell *matCellDef=\"let row; let i = index\" class=\"column-nowrap psl-3 tbl-col-width-per-20\"\n                    (click)=\"$event.stopPropagation()\">\n                    <ng-container [ngSwitch]=\"row.seniorHrVerifierStatus\">\n                      <button *ngSwitchCase=\"'APPROVED'\" class=\"badge badge-solid-green btn btn btn-sm m-1\">\n                        <i class=\"fas fa-check-circle\"></i>&nbsp;\n                        {{ row.seniorHrVerifierStatus }}\n                      </button>\n                      <button *ngSwitchCase=\"'REJECTED'\" class=\"badge badge-solid-red btn btn btn-sm m-1\">\n                        <i class=\"fas fa-times-circle\"></i>&nbsp;\n                        {{ row.seniorHrVerifierStatus }}\n                      </button>\n                      <button *ngSwitchCase=\"'RETURNED'\" class=\"badge badge-solid-brown btn btn btn-sm m-1\">\n                        <i class=\"fas fa-undo-alt\"></i>&nbsp;\n                        {{ row.seniorHrVerifierStatus }}\n                      </button>\n                      <button *ngSwitchCase=\"'PENDING'\" class=\"badge badge-solid-blue btn btn btn-sm m-1\">\n                        <i class=\"fas fa-exclamation-circle\"></i>&nbsp;\n                        {{ row.seniorHrVerifierStatus }}\n                      </button>\n                      <button *ngSwitchDefault class=\"badge badge-solid-brown btn btn btn-sm m-1\">\n                        <i class=\"fas fa-question-circle\"></i>&nbsp;\n                        {{ row.seniorHrVerifierStatus }}\n                      </button>\n                    </ng-container>\n                  </mat-cell>\n                </ng-container>\n\n\n                <ng-container matColumnDef=\"action\">\n                  <mat-header-cell class=\"column-nowrap psl-3 tbl-col-width-per-15 pr-0\" *matHeaderCellDef>\n                    Action\n                  </mat-header-cell>\n                  <mat-cell *matCellDef=\"let row; let i = index\" class=\"column-nowrap psl-3 tbl-col-width-per-15 pr-0\">\n\n                    <button mat-icon-button color=\"primary\" (click)=\"$event.stopPropagation()\"\n                      (click)=\"showRecordDetails(row)\" class=\"tbl-action-btn\">\n                      <app-feather-icons [icon]=\"'eye'\" [class]=\"'tbl-fav-eye'\">\n                      </app-feather-icons>\n                    </button>\n\n                    <button matTooltip=\"RE RUN PAYROLL\" mat-icon-button color=\"primary\"\n                      (click)=\"$event.stopPropagation()\" (click)=\"reRunPayroll( row)\" class=\"tbl-action-btn\">\n                      <app-feather-icons [icon]=\"'refresh-cw'\" [class]=\"'tbl-fav-reload'\"></app-feather-icons>\n                    </button>\n\n\n                    <button matTooltip=\"DELETE\" mat-icon-button color=\"accent\" (click)=\"$event.stopPropagation()\"\n                      (click)=\"deleteRecord(row.payrollId)\" class=\"tbl-action-btn\">\n                      <app-feather-icons [icon]=\"'trash-2'\" [class]=\"'tbl-fav-delete'\">\n                      </app-feather-icons>\n                    </button>\n                  </mat-cell>\n                </ng-container>\n                <mat-header-row *matHeaderRowDef=\"displayedColumns\">\n                </mat-header-row>\n                <mat-row *matRowDef=\"let row; columns: displayedColumns\" (click)=\"showRecordDetails(row)\"\n                  [style.cursor]=\"'pointer'\" matRipple>\n                </mat-row>\n\n                <tr *matNoDataRow>\n                  <td colspan=\"{{ displayedColumns.length }}\">\n                    No data matching the filter \"{{ input }}\"\n                  </td>\n                </tr>\n              </mat-table>\n\n\n              <div class=\"m-2 mx-2\" *ngIf=\"loading || downloadLoading\">\n                <mat-progress-bar color=\"primary\" mode=\"indeterminate\">\n                </mat-progress-bar>\n              </div>\n              <div *ngIf=\"loading\" class=\"tbl-spinner\">\n                <mat-progress-spinner color=\"primary\" [diameter]=\"40\" mode=\"indeterminate\">\n                </mat-progress-spinner>\n              </div>\n\n              <mat-paginator [pageSize]=\"10\" [pageSizeOptions]=\"[2, 5, 10, 20, 30, 40, 50, 100]\"\n                aria-label=\"Select page of users\">\n              </mat-paginator>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</section>","import { SelectionModel } from \"@angular/cdk/collections\";\nimport { HttpParams } from \"@angular/common/http\";\nimport { Component, OnInit, ViewChild } from \"@angular/core\";\nimport { FormGroup, FormBuilder, Validators } from \"@angular/forms\";\nimport { MatDialog, MatDialogConfig } from \"@angular/material/dialog\";\nimport { MatPaginator } from \"@angular/material/paginator\";\nimport { MatSort } from \"@angular/material/sort\";\nimport { MatTableDataSource } from \"@angular/material/table\";\nimport { Subject, takeUntil, Subscription } from \"rxjs\";\nimport { NotificationServiceService } from \"src/@core/Models/Notification/notification-service.service\";\nimport { PayrollService } from \"src/app/erp-hr/data/payroll-services/payroll.service\";\nimport { ReportService } from \"src/app/erp-hr/data/payroll-services/report.service\";\nimport { DepartmentsLookupComponent } from \"src/app/erp-hr/hr-lookups/configurations-lookups/departments-lookup/departments-lookup.component\";\nimport { JobRolesLookupComponent } from \"src/app/erp-hr/hr-lookups/configurations-lookups/job-roles-lookup/job-roles-lookup.component\";\nimport { SnackbarService } from \"src/app/shared/services/snackbar.service\";\nimport Swal from \"sweetalert2\";\n\n@Component({\n  selector: \"app-reports-payroll\",\n  templateUrl: \"./reports-payroll.component.html\",\n  styleUrls: [\"./reports-payroll.component.sass\"],\n})\nexport class ReportsPayrollComponent implements OnInit {\n  displayedColumns: string[] = [\n    \"select\",\n    \"index\",\n    \"payrollId\",\n    \"employeeId\",\n    \"name\",\n    \"isDisabled\",\n    \"empStartDate\",\n    \"employment_terms\",\n    \"workingDays\",\n    \"basicSalary\",\n    \"grossSalary\",\n    // \"nhif\",\n    // \"nssf_tier1\",\n    // \"nssf_tier2\",\n    // \"nssf_employee\",\n    // \"chargeablePay\",\n    // \"taxableCharge\",\n    // \"insuranceRelief\",\n    // \"personalRelief\",\n    // \"employee_pension\",\n    // \"pension_relief\",\n    // \"paye\",\n    // \"employee_house_levy\",\n    \"netSalary\",\n    \"HrStatus\",\n    \"SeniorHrStatus\",\n    \"status\",\n    \"action\",\n  ];\n\n  loading: boolean = false;\n  error: any;\n  dialogConfig: any;\n  destroy$: Subject<boolean> = new Subject<boolean>();\n\n  dataSource!: MatTableDataSource<any>;\n  @ViewChild(MatPaginator) paginator!: MatPaginator;\n  @ViewChild(MatSort) sort!: MatSort;\n\n  selection = new SelectionModel<any>(true, []);\n\n  downloadLoading: boolean = false;\n  posting: boolean = false;\n  showForm: boolean = false;\n\n  Form: FormGroup;\n  months: string[] = [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\",\n  ];\n  constructor(\n    private dialog: MatDialog,\n    private notificationAPI: NotificationServiceService,\n    private payrollService: PayrollService,\n    private snackbar: SnackbarService,\n    private fb: FormBuilder,\n    private reportAPI: ReportService\n  ) {}\n\n  ngOnInit(): void {\n    const currentYear = new Date().getFullYear();\n    const currentMonthIndex = new Date().getMonth();\n    const currentMonthName = this.months[currentMonthIndex];\n\n    this.Form = this.fb.group({\n      year: [currentYear.toString(), Validators.required],\n      month: [currentMonthName, Validators.required],\n      department: [\"ALL\"],\n      jobGroup: [\"ALL\"],\n      status: [\"ALL\"],\n      approver: [\"Hr Payroll Verifier\"],\n    });\n    this.Form.valueChanges.subscribe(() => {\n      this.getData();\n    });\n\n    this.getData();\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next(true);\n    this.destroy$.complete();\n  }\n\n  //**************************************************************************************************** */\n\n  allPayroll: any;\n  approvedPayroll: any;\n  pendingApproval: any;\n  rejectedPayroll: any;\n  payrollProcessorPending: any;\n  payrollProcessorApproved: any;\n  hrManagerPending: any;\n  hrManagerApproved: any;\n  overallPending: any;\n  overallApproved: any;\n  overallRejected: any;\n  isFinal = \"Y\";\n  selectedStatus: string = \"PENDING\";\n  selectedApprover: string = \"Hr Payroll Verifier\";\n\n  reqStatuses: any[] = [\n    { name: \"ALL\" },\n    { name: \"PENDING\" },\n    { name: \"APPROVED\" },\n    { name: \"RETURNED\" },\n    { name: \"REJECTED\" },\n  ];\n  reqApprovers: any[] = [\n    { name: \"Hr Payroll Verifier\" },\n    { name: \"Senior Hr Payroll Verifier\" },\n  ];\n  getSelectSelectedStatus() {\n    // this.getData();\n  }\n  getSelectedStatus(status: any) {\n    this.Form.patchValue({\n      status: status,\n    });\n\n    //  this.getData();\n  }\n  getSelectedApprover(approver: any) {\n    this.Form.patchValue({\n      approver: approver,\n    });\n\n    this.getData();\n  }\n\n  noData = true;\n  //data: any;\n\n  getData() {\n    this.loading = true;\n    this.dataSource = new MatTableDataSource([]);\n    this.dataSource.paginator = this.paginator;\n    this.dataSource.sort = this.sort;\n\n    this.selectedStatus = this.Form.value.status;\n    this.selectedApprover = this.Form.value.approver;\n\n    let params = new HttpParams()\n      .set(\"periodY\", this.Form.value.year)\n      .set(\"period_m\", this.Form.value.month)\n      .set(\"status\", \"Approved\")\n      .set(\"is_final\", this.isFinal)\n      .set(\"approver\", this.Form.value.approver);\n\n    this.payrollService\n      .getPayrollsData(params)\n      .pipe(takeUntil(this.destroy$))\n      .subscribe({\n        next: (res) => {\n          console.log(\"res:: \", res);\n          this.loading = false;\n\n          if (res.statusCode == 302) {\n            if (res.entity != null || res.entity > 0) {\n              if (this.Form.value.department != \"ALL\") {\n                res.entity.filter(\n                  (item: any) =>\n                    item.department_id == this.Form.value.department\n                );\n              }\n              if (this.Form.value.jobGroup != \"ALL\") {\n                res.entity.filter(\n                  (item: any) => item.jobGroupFk == this.Form.value.jobGroup\n                );\n              }\n              //this.allPayroll = res.entity;\n              this.payrollProcessorPending = res.entity.filter(\n                (item: any) => item.hr_verifier_status == \"PENDING\"\n              ).length;\n              this.payrollProcessorApproved = res.entity.filter(\n                (item: any) => item.hr_verifier_status == \"APPROVED\"\n              ).length;\n              this.hrManagerPending = res.entity.filter(\n                (item: any) => item.senior_hr_verifier_status == \"PENDING\"\n              ).length;\n              this.hrManagerApproved = res.entity.filter(\n                (item: any) => item.senior_hr_verifier_status == \"APPROVED\"\n              ).length;\n              this.overallPending = res.entity.filter(\n                (item: any) => item.status == \"PENDING\"\n              ).length;\n              this.overallApproved = res.entity.filter(\n                (item: any) => item.status == \"APPROVED\"\n              ).length;\n              this.overallRejected = res.entity.filter(\n                (item: any) => item.status == \"REJECTED\"\n              ).length;\n\n              this.dataSource = new MatTableDataSource(res.entity);\n              this.dataSource.paginator = this.paginator;\n              this.dataSource.sort = this.sort;\n            }\n          } else {\n            this.notificationAPI.alertWarning(res.message);\n\n            this.loading = false;\n          }\n        },\n        error: (err) => {\n          this.loading = false;\n          this.notificationAPI.alertWarning(\"Server Error: \" + err.message);\n        },\n        complete: () => {},\n      });\n  }\n  refresh() {\n    this.getData();\n  }\n\n  input: any;\n  applyFilter(event: Event) {\n    const filterValue = (event.target as HTMLInputElement).value;\n    this.input = filterValue;\n    this.dataSource.filter = filterValue.trim().toLowerCase();\n    if (this.dataSource.paginator) {\n      this.dataSource.paginator.firstPage();\n    }\n  }\n\n  // ****************************************************************************************************************************\n  // LOOKUPS\n  // ****************************************************************************************************************************\n\n  jobRoleLookup() {\n    const dialogConfig = new MatDialogConfig();\n    dialogConfig.disableClose = false;\n    dialogConfig.disableClose = true;\n    dialogConfig.width = \"800px\";\n    dialogConfig.data = {\n      action: \"SingleEmployee\",\n    };\n    const dialogRef = this.dialog.open(JobRolesLookupComponent, dialogConfig);\n    dialogRef.afterClosed().subscribe((res) => {\n      if (res && res.data && res.data.length > 0) {\n        this.Form.patchValue({\n          jobGroup: res.data[0].id,\n        });\n      }\n    });\n  }\n  departmentLookup() {\n    const dialogConfig = new MatDialogConfig();\n    dialogConfig.disableClose = false;\n    dialogConfig.disableClose = true;\n    dialogConfig.width = \"800px\";\n    dialogConfig.data = {\n      action: \"SingleDepartment\",\n    };\n    const dialogRef = this.dialog.open(\n      DepartmentsLookupComponent,\n      dialogConfig\n    );\n    dialogRef.afterClosed().subscribe((res) => {\n      if (res && res.data && res.data.length > 0) {\n        this.Form.patchValue({\n          department: res.data[0].id,\n        });\n      }\n    });\n  }\n  // ****************************************************************************************************************************\n  selectedRows: any[] = [];\n  atleastOneSelected: boolean = false;\n  isAllSelected() {\n    const numSelected = this.selection.selected.length;\n    const numRows = this.dataSource.data.length;\n    return numSelected === numRows;\n  }\n  masterToggle() {\n    if (this.isAllSelected()) {\n      this.selection.clear();\n      return;\n    }\n\n    this.selection.select(...this.dataSource.data);\n  }\n  checkboxLabel(row?: any): string {\n    if (!row) {\n      return `${this.isAllSelected() ? \"deselect\" : \"select\"} all`;\n    }\n    return `${this.selection.isSelected(row) ? \"deselect\" : \"select\"} row ${\n      row.position + 1\n    }`;\n  }\n\n  expSelected() {\n    this.atleastOneSelected = true;\n    this.selectedRows = this.selection.selected;\n\n    console.log(\"this.selectedRows: \", this.selectedRows);\n  }\n\n  hasAccess: boolean = true;\n  processMultipleRows(status: any) {\n    let privilege = \"Validate Expenses\";\n\n    // this.hasAccess = this.accessControlService.hasPrivilege(\"FinanceModule\", [\n    //   privilege,\n    // ]);\n\n    if (this.hasAccess) {\n      Swal.fire({\n    title: '<span style=\"font-size: 20px;\">Enter Verifier Remarks</span>',\n    input: \"textarea\",\n    inputPlaceholder: \"Type your remarks here...\",\n    confirmButtonText: \"Submit\",\n    showCancelButton: true,\n    cancelButtonText: \"Cancel\",\n    icon: \"info\",\n\n    inputValidator: (value) => {\n          if (!value) {\n            return \"Please enter your remarks\";\n          }\n        },\n      }).then((result) => {\n        if (result.isConfirmed) {\n          const verifierRemarks = result.value;\n\n          const processedRows = this.selectedRows.map((element) => {\n            return {\n              id: element.id,\n              status: status,\n              verifierRemarks: verifierRemarks,\n            };\n          });\n\n          console.log(\"LOG: \", processedRows);\n\n          this.payrollService\n            .approvedSelectedPayrolls(processedRows)\n            .pipe(takeUntil(this.destroy$))\n            .subscribe({\n              next: (res) => {\n                console.log(\"res: \", res);\n                if (res.statusCode == 201 || 200 || 302) {\n                  this.snackbar.showNotification(\n                    \"snackbar-success\",\n                    res.message\n                  );\n\n                  this.selection = new SelectionModel<any>(true, []);\n                  this.selection.clear();\n                } else {\n                  this.snackbar.showNotification(\n                    \"snackbar-danger\",\n                    res.message\n                  );\n                }\n              },\n              error: (err) => {\n                this.snackbar.showNotification(\"snackbar-danger\", err.message);\n              },\n              complete: () => {\n                this.getData();\n              },\n            }),\n            Subscription;\n        } else {\n          this.selection = new SelectionModel<any>(true, []);\n          this.selection.clear();\n        }\n      });\n    }\n  }\n\n  //********************************************************************************************************** */\n  dataResp: any;\n\n  downloadCompanyRegisterExcel() {\n    let filename = \"COMPANY_REGISTER_SUMMARY\";\n    if (this.Form.value.year == null || this.Form.value.month == null) {\n      this.notificationAPI.alertWarning(\n        \"You must provide Year and Month for the report to be generated!\"\n      );\n    } else {\n      let params = new HttpParams()\n        .set(\"periodY\", this.Form.value.year)\n        .set(\"periodM\", this.Form.value.month);\n      this.loading = true;\n      this.reportAPI.generateRegister(params).subscribe((data) => {\n        this.dataResp = data;\n        console.log(this.dataResp);\n        if (this.dataResp.statusCode == \"404\") {\n          this.notificationAPI.alertWarning(this.dataResp.message);\n          this.loading = false;\n        } else {\n          let extension = \"xlsx\";\n          this.saveToFileSystem(\n            filename,\n            data,\n            this.Form.value.year,\n            this.Form.value.month,\n            extension\n          );\n          this.loading = false;\n        }\n        this.loading = false;\n      });\n    }\n  }\n  downloadCompanyMasterRegisterExcel() {\n    let filename = \"COMPANY_MASTER_REGISTER\";\n    if (this.Form.value.year == null || this.Form.value.month == null) {\n      this.notificationAPI.alertWarning(\n        \"You must provide Year and Month for the report to be generated!\"\n      );\n    } else {\n      let params = new HttpParams()\n        .set(\"periodY\", this.Form.value.year)\n        .set(\"periodM\", this.Form.value.month);\n      this.loading = true;\n      this.reportAPI.generateMasterRegister(params).subscribe((data) => {\n        this.dataResp = data;\n        console.log(this.dataResp);\n        if (this.dataResp.statusCode == \"404\") {\n          this.notificationAPI.alertWarning(this.dataResp.message);\n          this.loading = false;\n        } else {\n          let extension = \"xlsx\";\n          this.saveToFileSystem(\n            filename,\n            data,\n            this.Form.value.year,\n            this.Form.value.month,\n            extension\n          );\n          this.loading = false;\n        }\n        this.loading = false;\n      });\n    }\n  }\n\n  downloadSummaryExcel() {\n    let filename = \"FINAL_PAYROLL_SUMMARY\";\n    if (this.Form.value.year == null || this.Form.value.month == null) {\n      this.notificationAPI.alertWarning(\n        \"You must provide Year and Month for the report to be generated!\"\n      );\n    } else {\n      let params = new HttpParams()\n        .set(\"period_y\", this.Form.value.year)\n        .set(\"period_m\", this.Form.value.month)\n        .set(\"departmentFk\", this.Form.value.department)\n        .set(\"jobGroupFk\", this.Form.value.jobGroup)\n        .set(\"reportType\", \"OVERALL\")\n        .set(\"isFinal\", this.isFinal);\n      this.loading = true;\n      this.reportAPI.generate(params).subscribe((data) => {\n        if (data.statusCode == \"404\") {\n          this.notificationAPI.alertWarning(data.message);\n          this.loading = false;\n        } else {\n          let extension = \"xlsx\";\n          this.saveToFileSystem(\n            filename,\n            data,\n            this.Form.value.year,\n            this.Form.value.month,\n            extension\n          );\n          this.loading = false;\n        }\n        this.loading = false;\n      });\n    }\n  }\n\n  downloadBankFile() {\n    let filename = \"FINAL_BANK_FILE\";\n    if (this.Form.value.year == null || this.Form.value.month == null) {\n      this.notificationAPI.alertWarning(\n        \"You must provide Year and Month for the report to be generated!\"\n      );\n    } else {\n      let params = new HttpParams()\n        .set(\"period_y\", this.Form.value.year)\n        .set(\"period_m\", this.Form.value.month)\n        .set(\"departmentFk\", this.Form.value.department)\n        .set(\"jobGroupFk\", this.Form.value.jobGroup)\n        .set(\"reportType\", \"BANK_FILE\")\n        .set(\"isFinal\", this.isFinal);\n      this.loading = true;\n      this.reportAPI.generate(params).subscribe((data) => {\n        if (data.statusCode == \"404\") {\n          this.notificationAPI.alertWarning(data.message);\n          this.loading = false;\n        } else {\n          let extension = \"xlsx\";\n          this.saveToFileSystem(\n            filename,\n            data,\n            this.Form.value.year,\n            this.Form.value.month,\n            extension\n          );\n          this.loading = false;\n        }\n        this.loading = false;\n      });\n    }\n  }\n  downloadKraReturns(p: any) {\n    let filename = \"FINAL_\" + p;\n    if (this.Form.value.year == null || this.Form.value.month == null) {\n      this.notificationAPI.alertWarning(\n        \"You must provide Year and Month for the report to be generated!\"\n      );\n    } else {\n      let params = new HttpParams()\n        .set(\"period_y\", this.Form.value.year)\n        .set(\"period_m\", this.Form.value.month)\n        .set(\"departmentFk\", this.Form.value.department)\n        .set(\"jobGroupFk\", this.Form.value.jobGroup)\n        .set(\"reportType\", p)\n        .set(\"isFinal\", this.isFinal);\n      this.loading = true;\n      this.reportAPI.generate(params).subscribe((data) => {\n        if (data.statusCode == \"404\") {\n          this.notificationAPI.alertWarning(data.message);\n          this.loading = false;\n        } else {\n          let extension = \"csv\";\n          this.saveToFileSystem(\n            filename,\n            data,\n            this.Form.value.year,\n            this.Form.value.month,\n            extension\n          );\n          this.loading = false;\n        }\n        this.loading = false;\n      });\n    }\n  }\n  downloadHousinglevyReturns() {\n    let filename = \"FINAL_HOUSING_LEVY\";\n    if (this.Form.value.year == null || this.Form.value.month == null) {\n      this.notificationAPI.alertWarning(\n        \"You must provide Year and Month for the report to be generated!\"\n      );\n    } else {\n      let params = new HttpParams()\n        .set(\"period_y\", this.Form.value.year)\n        .set(\"period_m\", this.Form.value.month)\n        .set(\"departmentFk\", this.Form.value.department)\n        .set(\"jobGroupFk\", this.Form.value.jobGroup)\n        .set(\"reportType\", \"HOUSING LEVY\")\n        .set(\"isFinal\", this.isFinal);\n      this.loading = true;\n      this.reportAPI.generate(params).subscribe((data) => {\n        if (data.statusCode == \"404\") {\n          this.notificationAPI.alertWarning(data.message);\n          this.loading = false;\n        } else {\n          let extension = \"xlsx\";\n          this.saveToFileSystem(\n            filename,\n            data,\n            this.Form.value.year,\n            this.Form.value.month,\n            extension\n          );\n          this.loading = false;\n        }\n        this.loading = false;\n      });\n    }\n  }\n  downloadNhifReturns() {\n    let filename = \"FINAL_NHIF\";\n    if (this.Form.value.year == null || this.Form.value.month == null) {\n      this.notificationAPI.alertWarning(\n        \"You must provide Year and Month for the report to be generated!\"\n      );\n    } else {\n      let params = new HttpParams()\n        .set(\"period_y\", this.Form.value.year)\n        .set(\"period_m\", this.Form.value.month)\n        .set(\"departmentFk\", this.Form.value.department)\n        .set(\"jobGroupFk\", this.Form.value.jobGroup)\n        .set(\"reportType\", \"NHIF\")\n        .set(\"isFinal\", this.isFinal);\n      this.loading = true;\n      this.reportAPI.generate(params).subscribe((data) => {\n        if (data.statusCode == \"404\") {\n          this.notificationAPI.alertWarning(data.message);\n          this.loading = false;\n        } else {\n          let extension = \"xlsx\";\n          this.saveToFileSystem(\n            filename,\n            data,\n            this.Form.value.year,\n            this.Form.value.month,\n            extension\n          );\n          this.loading = false;\n        }\n        this.loading = false;\n      });\n    }\n  }\n\n  onDownloadNssfReturns() {\n    // this.dialogConfig = new MatDialogConfig();\n    // this.dialogConfig.disableClose = false;\n    // this.dialogConfig.autoFocus = true;\n    // const dialogRef = this.dialog.open(NssfReportDialogComponent,\n    //   {\n    //     width: '400px',\n    //     height: '200px',\n    //     data: {\n    //       year: this.Form.value.year,\n    //       month: this.Form.value.month\n    //     },\n    //   }\n    //   );\n  }\n  private saveToFileSystem(\n    filename: any,\n    response: any,\n    year,\n    month,\n    extension\n  ) {\n    const blob = new Blob([response], { type: \"application/vnd.ms-excel\" });\n    const url = window.URL.createObjectURL(blob);\n    const anchor = document.createElement(\"a\");\n    anchor.download = filename + \"_for_\" + year + \"_\" + month + \".\" + extension;\n    anchor.href = url;\n    anchor.click();\n  }\n\n  getPayslip(id: number) {\n    this.loading = true;\n    this.reportAPI.payslip(id).subscribe({\n      next: (value) => {\n        this.loading = false;\n        this.notificationAPI.alertSuccess(\"Downloading Payslip Report\");\n        let url = window.URL.createObjectURL(value.data);\n        let a = document.createElement(\"a\");\n        document.body.appendChild(a);\n        a.setAttribute(\"style\", \"display: none\");\n        a.setAttribute(\"target\", \"blank\");\n        a.href = url;\n        a.download = value.filename;\n        a.click();\n        window.URL.revokeObjectURL(url);\n        a.remove();\n      },\n      error: (err) => {\n        this.loading = false;\n        this.notificationAPI.alertWarning(\"NO PAYSLIP REPORT FOUND\");\n      },\n      complete: () => {},\n    });\n  }\n}\n","<section class=\"content\">\n    <div class=\"content-block\">\n        <div class=\"block-header\">\n            <app-breadcrumb [title]=\"'Payroll Reports'\" [items]=\"['Payroll']\" [active_item]=\"'Payroll Reports'\">\n            </app-breadcrumb>\n        </div>\n        <app-gen-widgets></app-gen-widgets>\n\n        <div class=\"row\">\n            <div class=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\">\n                <div class=\"card\">\n                    <div class=\"body\">\n                        <div class=\"table-responsive\">\n                            <div class=\"materialTableHeader\">\n                                <div class=\"row\">\n                                    <div class=\"col-8\">\n                                        <ul class=\"header-buttons-left ms-0\">\n                                            <li class=\"dropdown\">\n                                                <h2>Payroll Reports</h2>\n                                            </li>\n                                            <li class=\"dropdown m-l-20\">\n                                                <label for=\"search-input\"><i\n                                                        class=\"material-icons search-icon\">search</i></label>\n                                                <input placeholder=\"Filter...\" type=\"text\" (keyup)=\"applyFilter($event)\"\n                                                    #filter class=\"browser-default search-field\"\n                                                    aria-label=\"Search box\" />\n                                            </li>\n\n                                            <li>\n                                                <div class=\"m-l-10\" matTooltip=\"REFRESH\">\n                                                    <button mat-mini-fab color=\"primary\" (click)=\"refresh()\">\n                                                        <mat-icon class=\"col-white\">refresh</mat-icon>\n                                                    </button>\n                                                </div>\n                                            </li>\n                                            <!-- <li *ngIf=\"selection.selected.length > 0\">\n                                              <div class=\"m-l-10\" matTooltip=\"APPROVE\">\n                                                  <button mat-mini-fab color=\"primary\"\n                                                      (click)=\"processMultipleRows('APPROVED')\"\n                                                      class=\"mat-button-custom\">\n                                                      <mat-icon class=\"col-white\">check</mat-icon>\n                                                  </button>\n                                              </div>\n                                          </li>\n                                          <li *ngIf=\"selection.selected.length > 0\">\n                                              <div class=\"m-l-10\" matTooltip=\"REJECT\">\n                                                  <button mat-mini-fab color=\"warn\"\n                                                      (click)=\"processMultipleRows('REJECTED')\"\n                                                      class=\"mat-button-custom\">\n                                                      <mat-icon class=\"col-white\">cancel</mat-icon>\n                                                  </button>\n                                              </div>\n                                          </li>\n                                          <li *ngIf=\"selection.selected.length > 0\">\n                                              <div class=\"m-l-10\" matTooltip=\"RETURN\">\n                                                  <button mat-mini-fab color=\"accent\"\n                                                      (click)=\"processMultipleRows('RETURNED')\"\n                                                      class=\"mat-button-custom\">\n                                                      <mat-icon class=\"col-white\">undo</mat-icon>\n                                                  </button>\n                                              </div>\n                                          </li> -->\n\n                                            <li *ngIf=\"selection.selected.length > 0\">\n                                                <div class=\"m-l-10\" matTooltip=\"GENERATE\">\n                                                    <button [disabled]=\"onProcessing\" mat-raised-button color=\"primary\"\n                                                        (click)=\"onGeneratePayroll()\">\n                                                        <mat-icon>cloud_download</mat-icon> GENERATE\n                                                    </button>\n                                                </div>\n                                            </li>\n                                        </ul>\n                                    </div>\n                                    <div class=\"col-4\">\n                                        <ul class=\"header-buttons\">\n                                            <li>\n                                                <div class=\"export-button m-l-10\" matTooltip=\"XLSX\">\n                                                    <img src=\"assets/images/icons/xlsx.png\" alt=\"\" (click)=\"\n                                exporter.exportTable('xlsx', {\n                                  fileName: 'assets-list',\n                                  sheet: 'sheet1'\n                                })\n                              \" />\n                                                </div>\n                                            </li>\n                                            <li>\n                                                <div class=\"export-button m-l-10\" matTooltip=\"CSV\">\n                                                    <img src=\"assets/images/icons/csv.png\" alt=\"\"\n                                                        (click)=\"exporter.exportTable('csv')\" />\n                                                </div>\n                                            </li>\n                                            <li>\n                                                <div class=\"export-button m-l-10\" matTooltip=\"JSON\">\n                                                    <img src=\"assets/images/icons/json.png\" alt=\"\"\n                                                        (click)=\"exporter.exportTable('json')\" />\n                                                </div>\n                                            </li>\n                                            <li>\n                                                <div class=\"export-button m-l-10\" matTooltip=\"TXT\">\n                                                    <img src=\"assets/images/icons/txt.png\" alt=\"\"\n                                                        (click)=\"exporter.exportTable('txt')\" />\n                                                </div>\n                                            </li>\n                                        </ul>\n                                    </div>\n                                </div>\n                            </div>\n                            <div class=\"materialTableHeader mt-2\">\n                                <form [formGroup]=\"Form\">\n                                    <div class=\"row\">\n                                        <div class=\"col-2\">\n                                            <div class=\"row\">\n\n                                                <mat-form-field class=\"example-full-width\" appearance=\"outline\">\n                                                    <mat-label>Year</mat-label>\n                                                    <input matInput formControlName=\"year\" />\n                                                    <mat-error *ngIf=\"Form.get('year').hasError('required')\">\n                                                        Please Enter Year\n                                                    </mat-error>\n                                                </mat-form-field>\n\n                                            </div>\n                                        </div>\n                                        <div class=\"col-2\">\n                                            <mat-form-field class=\"example-full-width\" appearance=\"outline\">\n                                                <mat-label>Month</mat-label>\n                                                <mat-select formControlName=\"month\">\n                                                    <mat-option *ngFor=\"let month of months\" [value]=\"month\">{{ month\n                                                        }}</mat-option>\n                                                </mat-select>\n                                                <mat-error *ngIf=\"Form.get('month').hasError('required')\">Please select\n                                                    a month</mat-error>\n                                            </mat-form-field>\n                                        </div>\n\n                                        <div class=\"col-2\">\n                                            <mat-form-field class=\"example-full-width\" appearance=\"outline\">\n                                                <mat-label>Department</mat-label>\n                                                <input matInput formControlName=\"department\" />\n                                                <mat-icon matSuffix (click)=\"departmentLookup()\">search</mat-icon>\n                                                <mat-error *ngIf=\"\n                              Form.get('department').invalid &&\n                              Form.get('department').touched\n                            \">\n                                                    Please enter a department\n                                                </mat-error>\n                                            </mat-form-field>\n                                        </div>\n                                        <div class=\"col-2\">\n                                            <mat-form-field class=\"example-full-width\" appearance=\"outline\">\n                                                <mat-label>Job Level</mat-label>\n                                                <input matInput formControlName=\"jobGroup\" />\n                                                <mat-icon matSuffix (click)=\"jobRoleLookup()\">search</mat-icon>\n                                                <mat-error *ngIf=\"\n                              Form.get('jobGroup').invalid &&\n                              Form.get('jobGroup').touched\n                            \">\n                                                    Please enter a job level\n                                                </mat-error>\n                                            </mat-form-field>\n                                        </div>\n\n                                        <!-- <div class=\"col-2\">\n                                            <mat-form-field class=\"example-full-width\" appearance=\"outline\">\n                                                <mat-label>Status</mat-label>\n                                                <mat-select formControlName=\"status\">\n                                                    <mat-option *ngFor=\"let status of statuses\" [value]=\"status.name\">{{\n                                                        status.name\n                                                        }}</mat-option>\n                                                </mat-select>\n                                                <mat-error *ngIf=\"Form.get('status').hasError('required')\">Please select\n                                                    a status</mat-error>\n                                            </mat-form-field>\n                                        </div> -->\n                                    </div>\n                                </form>\n                            </div>\n                            <div class=\"materialTableHeader mt-2\">\n                                <div class=\"row\">\n                                    <div class=\"col-2\">\n                                        <form [formGroup]=\"Form\">\n\n                                            <mat-form-field class=\"example-full-width\" appearance=\"fill\">\n                                                <mat-label>Status</mat-label>\n\n                                                <mat-select formControlName=\"status\"\n                                                    (selectionChange)=\"getSelectSelectedStatus()\">\n                                                    <mat-option *ngFor=\"let reqStatus of reqStatuses\"\n                                                        [value]=\"reqStatus.name\">{{ reqStatus.name\n                                                        }}\n                                                    </mat-option>\n                                                </mat-select>\n\n                                                <mat-error *ngIf=\"Form.get('status').hasError('required')\">\n                                                    Please select Status\n                                                </mat-error>\n                                            </mat-form-field>\n                                        </form>\n                                    </div>\n                                    <div class=\"col-5\">\n                                        <div class=\"button-container mt-1\">\n                                            <button mat-raised-button [class.active]=\"selectedStatus === 'ALL'\"\n                                                class=\"mat-button verified\" (click)=\"getSelectedStatus('ALL')\">\n                                                <mat-icon>check_circle</mat-icon>\n                                                ALL\n                                            </button>\n                                            <button mat-raised-button [class.active]=\"selectedStatus === 'PENDING'\"\n                                                class=\"mat-button pending\" (click)=\"getSelectedStatus('PENDING')\">\n                                                <mat-icon>pending</mat-icon>\n                                                PENDING\n                                            </button> <button mat-raised-button\n                                                [class.active]=\"selectedStatus === 'APPROVED'\"\n                                                class=\"mat-button approved\" (click)=\"getSelectedStatus('APPROVED')\">\n                                                <mat-icon>thumb_up</mat-icon>\n                                                APPROVED\n                                            </button>\n                                            <button mat-raised-button [class.active]=\"selectedStatus === 'RETURNED'\"\n                                                class=\"mat-button returned\" (click)=\"getSelectedStatus('RETURNED')\">\n                                                <mat-icon>reply</mat-icon>\n                                                RETURNED\n                                            </button> <button mat-raised-button\n                                                [class.active]=\"selectedStatus === 'REJECTED'\"\n                                                class=\"mat-button rejected\" (click)=\"getSelectedStatus('REJECTED')\">\n                                                <mat-icon>cancel</mat-icon>\n                                                REJECTED\n                                            </button>\n                                        </div>\n                                    </div>\n\n                                    <div class=\"col-2\">\n                                        <form [formGroup]=\"Form\">\n\n                                            <mat-form-field class=\"example-full-width\" appearance=\"fill\">\n                                                <mat-label>Approver</mat-label>\n\n                                                <mat-select formControlName=\"approver\">\n                                                    <mat-option *ngFor=\"let item of reqApprovers\" [value]=\"item.name\">{{\n                                                        item.name\n                                                        }}\n                                                    </mat-option>\n                                                </mat-select>\n\n                                                <mat-error *ngIf=\"Form.get('status').hasError('required')\">\n                                                    Please select approver\n                                                </mat-error>\n                                            </mat-form-field>\n                                        </form>\n                                    </div>\n\n\n                                    <div class=\"col-3\">\n                                        <div class=\"button-container mt-1\">\n                                            <button mat-raised-button\n                                                [class.active]=\"selectedApprover === 'Hr Payroll Verifier'\"\n                                                class=\"mat-button verified\"\n                                                (click)=\"getSelectedApprover('Hr Payroll Verifier')\">\n                                                <mat-icon>check_circle</mat-icon>\n                                                Hr Payroll Verifier\n                                            </button>\n                                            <button mat-raised-button\n                                                [class.active]=\"selectedApprover === 'Senior Hr Payroll Verifier'\"\n                                                class=\"mat-button pending\"\n                                                (click)=\"getSelectedApprover('Senior Hr Payroll Verifier')\">\n                                                <mat-icon>pending</mat-icon>\n                                                Senior Hr Payroll Verifier\n                                            </button>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n\n\n                            <div class=\"row mt-3 mx-2\">\n                                <div class=\"col-md-2 col-sm-12\" style=\"font-size: 8px\">\n                                    <button [disabled]=\"noData\" class=\"btn btn-small btn-block col-12\" mat-raised-button\n                                        color=\"primary\" [matMenuTriggerFor]=\"beforeMenu\">\n                                        <i class=\"fa fa-file-excel-o\" aria-hidden=\"true\"></i> Payroll Summary\n                                    </button>\n                                    <mat-menu #beforeMenu=\"matMenu\" xPosition=\"before\">\n                                        <button [disabled]=\"noData\" mat-menu-item\n                                            (click)=\"downloadCompanyRegisterExcel()\">COMPANY REGISTER</button>\n                                        <button [disabled]=\"noData\" mat-menu-item\n                                            (click)=\"downloadCompanyMasterRegisterExcel()\">MASTER REGISTER</button>\n                                    </mat-menu>\n                                </div>\n                                <div class=\"col-md-2 col-sm-12\">\n                                    <button [disabled]=\"noData\" class=\"btn btn-small btn-block col-12\" mat-raised-button\n                                        color=\"primary\" (click)=\"downloadBankFile()\">\n                                        <i class=\"fa fa-bank\" aria-hidden=\"true\"></i> Bank File\n                                    </button>\n                                </div>\n                                <div class=\"col-md-2 col-sm-12\">\n                                    <button [disabled]=\"noData\" class=\"btn btn-small btn-block col-12\" mat-raised-button\n                                        color=\"primary\" [matMenuTriggerFor]=\"p10eMenu\">\n                                        <i class=\"fa fa-file-text\" aria-hidden=\"true\"></i> P10 Csv's\n                                    </button>\n                                    <mat-menu #p10eMenu=\"matMenu\" xPosition=\"before\">\n                                        <button [disabled]=\"noData\" mat-menu-item\n                                            (click)=\"downloadKraReturns('PAYE_EMPLOYEE')\">PAYE_EMPLOYEE</button>\n                                        <button [disabled]=\"noData\" mat-menu-item\n                                            (click)=\"downloadKraReturns('PAYE_EMPLOYEE_DISABLED')\">PAYE_EMPLOYEE_DISABLED</button>\n                                        <button [disabled]=\"noData\" mat-menu-item\n                                            (click)=\"downloadKraReturns('FRINGE_BENEFITS_TAX')\">FRINGE_BENEFITS_TAX</button>\n                                    </mat-menu>\n                                </div>\n                                <div class=\"col-md-2 col-sm-12\">\n                                    <button [disabled]=\"noData\" class=\"btn btn-small btn-block col-12\" mat-raised-button\n                                        color=\"primary\" (click)=\"downloadHousinglevyReturns()\">\n                                        <i class=\"fa fa-home\" aria-hidden=\"true\"></i> Housing Levy\n                                    </button>\n                                </div>\n                                <div class=\"col-md-2 col-sm-12\">\n                                    <button [disabled]=\"noData\" class=\"btn btn-small btn-block col-12\" mat-raised-button\n                                        color=\"primary\" (click)=\"downloadNhifReturns()\">\n                                        <i class=\"fa fa-hospital-o\" aria-hidden=\"true\"></i> NHIF Returns\n                                    </button>\n                                </div>\n                                <div class=\"col-md-2 col-sm-12\">\n                                    <button [disabled]=\"noData\" class=\"btn btn-small btn-block col-12\" mat-raised-button\n                                        color=\"primary\" (click)=\"onDownloadNssfReturns()\">\n                                        <i class=\"fa fa-users\" aria-hidden=\"true\"></i> NSSF Returns\n                                    </button>\n                                </div>\n                            </div>\n\n                            <mat-table #table matTableExporter [dataSource]=\"dataSource\" matSort class=\"mat-cell\"\n                                #exporter=\"matTableExporter\">\n                                <ng-container matColumnDef=\"select\">\n                                    <mat-header-cell *matHeaderCellDef mat-sticky=\"start\"\n                                        [ngClass]=\"'tbl-col-width-per-4'\">\n                                        <mat-checkbox color=\"primary\" (change)=\"$event ? masterToggle() : null\"\n                                            [checked]=\"selection.hasValue() && isAllSelected()\"\n                                            [indeterminate]=\"selection.hasValue() && !isAllSelected()\"\n                                            [ngClass]=\"'tbl-checkbox'\" (change)=\"expSelected()\">\n                                        </mat-checkbox>\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" [ngClass]=\"'tbl-col-width-per-4'\">\n                                        <mat-checkbox color=\"primary\" (click)=\"$event.stopPropagation()\"\n                                            (change)=\"$event ? selection.toggle(row) : null\"\n                                            [checked]=\"selection.isSelected(row)\" [ngClass]=\"'tbl-checkbox'\"\n                                            [aria-label]=\"checkboxLabel(row)\" (change)=\"expSelected()\">\n                                        </mat-checkbox>\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"index\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-10\">\n                                        Index\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row; let i = index\"\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-10\">\n                                        {{ i + 1 }}\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"index\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Index\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        {{ row.index }}\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"payrollId\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Payroll ID\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        {{ row.payrollId }}\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"employeeId\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Employee ID\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        {{ row.employeeId }}\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"name\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Name\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        {{ row.name }}\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"isDisabled\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Is Disabled\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        {{ row.isDisabled }}\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"empStartDate\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Employee Start Date\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        {{ row.empStartDate }}\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"employment_terms\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Employment Terms\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        {{ row.employment_terms }}\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"workingDays\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Working Days\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        {{ row.workingDays }}\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"basicSalary\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Basic Salary\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        {{ row.basicSalary }}\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"grossSalary\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Gross Salary\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        {{ row.grossSalary }}\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"nhif\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        NHIF\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        {{ row.nhif }}\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"nssf_tier1\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        NSSF Tier 1\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        {{ row.nssf_tier1 }}\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"nssf_tier2\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        NSSF Tier 2\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        {{ row.nssf_tier2 }}\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"nssf_employee\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        NSSF Employee\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        {{ row.nssf_employee }}\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"chargeablePay\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Chargeable Pay\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        {{ row.chargeablePay }}\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"taxableCharge\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Taxable Charge\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        {{ row.taxableCharge }}\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"insuranceRelief\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Insurance Relief\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        {{ row.insuranceRelief }}\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"personalRelief\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Personal Relief\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        {{ row.personalRelief }}\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"employee_pension\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Employee Pension\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        {{ row.employee_pension }}\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"pension_relief\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Pension Relief\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        {{ row.pension_relief }}\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"paye\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        PAYE\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        {{ row.paye }}\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"employee_house_levy\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Employee House Levy\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        {{ row.employee_house_levy }}\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"netSalary\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Net Salary\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        {{ row.netSalary }}\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"HrStatus\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        HR Status\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        {{ row.HrStatus }}\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"SeniorHrStatus\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Senior HR Status\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        {{ row.SeniorHrStatus }}\n                                    </mat-cell>\n                                </ng-container>\n\n                                 <ng-container matColumnDef=\"status\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Status\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row; let i = index\"\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-20\"\n                                        (click)=\"$event.stopPropagation()\">\n                                        <ng-container [ngSwitch]=\"row.status\">\n                                            <button *ngSwitchCase=\"'APPROVED'\"\n                                                class=\"badge badge-solid-green btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-check-circle\"></i>&nbsp;\n                                                {{ row.status }}\n                                            </button>\n                                            <button *ngSwitchCase=\"'REJECTED'\"\n                                                class=\"badge badge-solid-red btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-times-circle\"></i>&nbsp;\n                                                {{ row.status }}\n                                            </button>\n                                            <button *ngSwitchCase=\"'RETURNED'\"\n                                                class=\"badge badge-solid-brown btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-undo-alt\"></i>&nbsp;\n                                                {{ row.status }}\n                                            </button>\n                                            <button *ngSwitchCase=\"'PENDING'\"\n                                                class=\"badge badge-solid-blue btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-exclamation-circle\"></i>&nbsp;\n                                                {{ row.status }}\n                                            </button>\n                                            <button *ngSwitchDefault class=\"badge badge-solid-brown btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-question-circle\"></i>&nbsp;\n                                                {{ row.status }}\n                                            </button>\n                                        </ng-container>\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"verifiedFlag\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Verified\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        <ng-container *ngIf=\"row.verifiedFlag === 'Y'; else notVerified\">\n                                            <button class=\"badge badge-solid-green btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-check\"></i>&nbsp; Verified\n                                            </button>\n                                        </ng-container>\n                                        <ng-template #notVerified>\n                                            <button class=\"badge badge-solid-red btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-times\"></i>&nbsp; Not Verified\n                                            </button>\n                                        </ng-template>\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"deletedFlag\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Deleted\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        <ng-container *ngIf=\"row.deletedFlag === 'Y'; else notDeleted\">\n                                            <button class=\"badge badge-solid-red btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-trash\"></i>&nbsp; Deleted\n                                            </button>\n                                        </ng-container>\n                                        <ng-template #notDeleted>\n                                            <button class=\"badge badge-solid-green btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-check\"></i>&nbsp; Active\n                                            </button>\n                                        </ng-template>\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"action\">\n                                    <mat-header-cell class=\"column-nowrap psl-3 tbl-col-width-per-15 pr-0\"\n                                        *matHeaderCellDef>\n                                        Action\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row; let i = index\"\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-15 pr-0\">\n                                        <button mat-icon-button color=\"accent\" (click)=\"$event.stopPropagation()\"\n                                            (click)=\"mngRecord('Update', row)\" class=\"tbl-action-btn\">\n                                            <app-feather-icons [icon]=\"'edit'\" [class]=\"'tbl-fav-edit'\">\n                                            </app-feather-icons>\n                                        </button>\n\n                                        <button mat-icon-button color=\"primary\" (click)=\"$event.stopPropagation()\"\n                                            (click)=\"mngRecord('View', row)\" class=\"tbl-action-btn\">\n                                            <app-feather-icons [icon]=\"'eye'\" [class]=\"'tbl-fav-eye'\">\n                                            </app-feather-icons>\n                                        </button>\n                                        <!-- \n                                      <button mat-icon-button color=\"primary\" (click)=\"$event.stopPropagation()\"\n                                          (click)=\"lockOrUnlockAccount(row)\" class=\"tbl-action-btn\">\n                                          <mat-icon>{{ row.isAcctActive === 'Y' ? 'lock' : 'lock_open' }}</mat-icon>\n                                      </button> -->\n\n                                        <button mat-icon-button color=\"accent\" (click)=\"$event.stopPropagation()\"\n                                            (click)=\"deleteRecord(row.id)\" class=\"tbl-action-btn\">\n                                            <app-feather-icons [icon]=\"'trash-2'\" [class]=\"'tbl-fav-delete'\">\n                                            </app-feather-icons>\n                                        </button>\n                                    </mat-cell>\n                                </ng-container>\n                                <mat-header-row *matHeaderRowDef=\"displayedColumns\">\n                                </mat-header-row>\n                                <mat-row *matRowDef=\"let row; columns: displayedColumns\"  \n                                    [style.cursor]=\"'pointer'\" matRipple>\n                                </mat-row>\n\n                                <tr *matNoDataRow>\n                                    <td colspan=\"{{ displayedColumns.length }}\">\n                                        No data matching the filter \"{{ input }}\"\n                                    </td>\n                                </tr>\n                            </mat-table>\n\n\n                            <div class=\"m-2 mx-2\" *ngIf=\"loading || downloadLoading\">\n                                <mat-progress-bar color=\"primary\" mode=\"indeterminate\">\n                                </mat-progress-bar>\n                            </div>\n                            <div *ngIf=\"loading\" class=\"tbl-spinner\">\n                                <mat-progress-spinner color=\"primary\" [diameter]=\"40\" mode=\"indeterminate\">\n                                </mat-progress-spinner>\n                            </div>\n\n                            <mat-paginator [pageSize]=\"10\" [pageSizeOptions]=\"[2, 5, 10, 20, 30, 40, 50, 100]\"\n                                aria-label=\"Select page of users\">\n                            </mat-paginator>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</section>","import { SelectionModel } from '@angular/cdk/collections';\nimport { HttpParams } from '@angular/common/http';\nimport { Component, OnInit, ViewChild } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { MatDialog, MatDialogConfig } from '@angular/material/dialog';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { Subject, takeUntil, Subscription } from 'rxjs';\nimport { NotificationServiceService } from 'src/@core/Models/Notification/notification-service.service';\nimport { SnackbarService } from 'src/app/shared/services/snackbar.service';\nimport Swal from 'sweetalert2';\nimport { ManagePayrollOtherDeductionsComponent } from '../../deductions-payroll/manage-payroll-other-deductions/manage-payroll-other-deductions.component';\nimport { SalaryIncrementService } from 'src/app/erp-hr/data/payroll-services/salaryincrement.service';\nimport { ManageSalaryIncrementsComponent } from '../manage-salary-increments/manage-salary-increments.component';\n\n@Component({\n  selector: 'app-all-salary-increments',\n  templateUrl: './all-salary-increments.component.html',\n  styleUrls: ['./all-salary-increments.component.sass']\n})\nexport class AllSalaryIncrementsComponent implements OnInit {\n\n  displayedColumns: string[] = [\n    \"select\",\n    \"id\",\n\n    \"empPf\",\n    \"newSalary\",\n    \"comments\",\n\n    \"status\",\n    \"verifiedFlag\",\n    \"deletedFlag\",\n    \"action\",\n  ];\n\n  loading: boolean = false;\n  data: any;\n  error: any;\n  dialogConfig: any;\n  destroy$: Subject<boolean> = new Subject<boolean>();\n\n  dataSource!: MatTableDataSource<any>;\n  @ViewChild(MatPaginator) paginator!: MatPaginator;\n  @ViewChild(MatSort) sort!: MatSort;\n\n  selection = new SelectionModel<any>(true, []);\n\n  downloadLoading: boolean = false;\n  posting: boolean = false;\n  showForm: boolean = false;\n\n  Form: FormGroup;\n\n  constructor(\n    private dialog: MatDialog,\n    private notificationAPI: NotificationServiceService,\n    private salaryIncrementService: SalaryIncrementService,\n    private snackbar: SnackbarService,\n    private fb: FormBuilder\n  ) { }\n\n  ngOnInit(): void {\n\n\n    this.Form = this.fb.group({\n      status: ['ALL', Validators.required],\n    });\n    this.Form.valueChanges.subscribe(() => {\n      this.getData();\n    });\n\n    this.getData();\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next(true);\n    this.destroy$.complete();\n  }\n\n//**************************************************************************************************************** */\n  reqStatuses: any[] = [\n    { name: \"ALL\" },\n    { name: \"PENDING\" },\n    // { name: \"VERIFIED\" },\n    { name: \"APPROVED\" },\n    { name: \"RETURNED\" },\n    { name: \"REJECTED\" },\n  ];\n\n  selectedStatus: string = \"PENDING\";\n  getSelectSelectedStatus() {\n   // this.getData();\n  }\n  getSelectedStatus(status: any) {\n    this.Form.patchValue({\n      status: status,\n    });\n\n  //  this.getData();\n  }\n\n  getData() {\n    this.loading = true;\n    this.dataSource = new MatTableDataSource([]);\n    this.dataSource.paginator = this.paginator;\n    this.dataSource.sort = this.sort;\n\n    this.selectedStatus = this.Form.value.status;\n\n    let params = {status: this.Form.value.status}\n    this.salaryIncrementService\n      .readByStatus(params)\n      .pipe(takeUntil(this.destroy$))\n      .subscribe({\n        next: (res) => {\n          if (res.statusCode === 302) {\n            this.data = res.entity;\n            console.log(\"Salary Increments displayed on table\", this.data);\n\n            this.loading = false;\n            this.dataSource = new MatTableDataSource(this.data);\n            this.dataSource.paginator = this.paginator;\n            this.dataSource.sort = this.sort;\n          } else {\n            this.loading = false;\n          }\n        },\n        error: (err) => {\n          this.loading = false;\n          this.notificationAPI.alertWarning(\"Server Error: \" + err.message);\n        },\n        complete: () => { },\n      });\n  }\n  refresh() {\n    this.getData();\n  }\n\n  mngRecord(action: any, record?: any) {\n    console.log(\"this.action:; \", action);\n    console.log(\"this.record:; \", record);\n\n    const dialogConfig = new MatDialogConfig();\n    dialogConfig.disableClose = false;\n    dialogConfig.disableClose = true;\n    dialogConfig.width = \"800px\";\n    dialogConfig.data = {\n      action: action,\n      record: record,\n    };\n    const dialogRef = this.dialog.open(\n      ManageSalaryIncrementsComponent,\n      dialogConfig\n    );\n    dialogRef.afterClosed().subscribe((result) => {\n      console.log(\"result:::\", result);\n\n      this.getData();\n    });\n  }\n  deleteRecord(id: number) {\n    Swal.fire({\n      title: \"Are you sure?\",\n      text: \"THIS RECORD WILL BE DELETED PERMANENTLY!!\",\n      icon: \"warning\",\n      showCancelButton: true,\n      confirmButtonColor: \"#3085d6\",\n      cancelButtonColor: \"#d33\",\n      confirmButtonText: \"Yes, delete it!\",\n    }).then((result) => {\n      if (result.isConfirmed) {\n        this.loading = true;\n        this.salaryIncrementService\n          .delete(id)\n          .pipe(takeUntil(this.destroy$))\n          .subscribe({\n            next: (res) => {\n              if (res.statusCode == 200) {\n                this.getData();\n                this.loading = false;\n                this.notificationAPI.alertSuccess(\n                  \"RECORD DELETED SUCCESSFULLY\"\n                );\n              } else {\n                this.getData();\n                this.loading = false;\n                this.notificationAPI.alertWarning(res.message);\n              }\n            },\n            error: (err) => {\n              this.loading = false;\n              this.notificationAPI.alertSuccess(\"Server Error: \" + err.message);\n            },\n            complete: () => { },\n          });\n      }\n    });\n  }\n\n  input: any;\n  applyFilter(event: Event) {\n    const filterValue = (event.target as HTMLInputElement).value;\n    this.input = filterValue;\n    this.dataSource.filter = filterValue.trim().toLowerCase();\n    if (this.dataSource.paginator) {\n      this.dataSource.paginator.firstPage();\n    }\n  }\n\n  // ****************************************************************************************************************************\n  selectedRows: any[] = [];\n  atleastOneSelected: boolean = false;\n  isAllSelected() {\n    const numSelected = this.selection.selected.length;\n    const numRows = this.dataSource.data.length;\n    return numSelected === numRows;\n  }\n  masterToggle() {\n    if (this.isAllSelected()) {\n      this.selection.clear();\n      return;\n    }\n\n    this.selection.select(...this.dataSource.data);\n  }\n  checkboxLabel(row?: any): string {\n    if (!row) {\n      return `${this.isAllSelected() ? \"deselect\" : \"select\"} all`;\n    }\n    return `${this.selection.isSelected(row) ? \"deselect\" : \"select\"} row ${row.position + 1\n      }`;\n  }\n\n  expSelected() {\n    this.atleastOneSelected = true;\n    this.selectedRows = this.selection.selected;\n\n    console.log(\"this.selectedRows: \", this.selectedRows);\n  }\n\n  hasAccess: boolean = true;\n  processMultipleRows(status: any) {\n    let privilege = \"Validate Expenses\";\n\n    // this.hasAccess = this.accessControlService.hasPrivilege(\"FinanceModule\", [\n    //   privilege,\n    // ]);\n\n    if (this.hasAccess) {\n      Swal.fire({\n    title: '<span style=\"font-size: 20px;\">Enter Verifier Remarks</span>',\n    input: \"textarea\",\n    inputPlaceholder: \"Type your remarks here...\",\n    confirmButtonText: \"Submit\",\n    showCancelButton: true,\n    cancelButtonText: \"Cancel\",\n    icon: \"info\",\n\n    inputValidator: (value) => {\n          if (!value) {\n            return \"Please enter your remarks\";\n          }\n        },\n      }).then((result) => {\n        if (result.isConfirmed) {\n          const verifierRemarks = result.value;\n\n          const processedRows = this.selectedRows.map((element) => {\n            return {\n              id: element.id,\n              status: status,\n              verifierRemarks: verifierRemarks,\n            };\n          });\n\n          console.log(\"LOG: \", processedRows);\n\n          this.salaryIncrementService\n            .validateBulkSalaryIncrements(processedRows)\n            .pipe(takeUntil(this.destroy$))\n            .subscribe({\n              next: (res) => {\n                console.log(\"res: \", res);\n                if (res.statusCode == 201 || 200 || 302) {\n                  this.snackbar.showNotification(\n                    \"snackbar-success\",\n                    res.message\n                  );\n\n                  this.selection = new SelectionModel<any>(true, []);\n                  this.selection.clear();\n                } else {\n                  this.snackbar.showNotification(\n                    \"snackbar-danger\",\n                    res.message\n                  );\n                }\n              },\n              error: (err) => {\n                this.snackbar.showNotification(\"snackbar-danger\", err.message);\n              },\n              complete: () => {\n                this.getData();\n              },\n            }),\n            Subscription;\n        } else {\n          this.selection = new SelectionModel<any>(true, []);\n          this.selection.clear();\n        }\n      });\n    }\n  }\n}\n","<section class=\"content\">\n    <div class=\"content-block\">\n        <div class=\"block-header\">\n            <!-- breadcrumb -->\n            <app-breadcrumb [title]=\"'All Salary Increments'\" [items]=\"['Salary Increments']\"\n                [active_item]=\"'All Salary Increments'\">\n            </app-breadcrumb>\n        </div>\n\n        <app-gen-widgets></app-gen-widgets>\n\n        <div class=\"row\">\n            <div class=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\">\n                <div class=\"card\">\n\n                    <div class=\"body\">\n                        <div class=\"table-responsive\">\n                            <div class=\"materialTableHeader\">\n                                <div class=\"row\">\n                                    <div class=\"col-8\">\n                                        <ul class=\"header-buttons-left ms-0\">\n                                            <li class=\"dropdown\">\n                                                <h2>Salary Increments</h2>\n                                            </li>\n                                            <li class=\"dropdown m-l-20\">\n                                                <label for=\"search-input\"><i\n                                                        class=\"material-icons search-icon\">search</i></label>\n                                                <input placeholder=\"Filter...\" type=\"text\" (keyup)=\"applyFilter($event)\"\n                                                    #filter class=\"browser-default search-field\"\n                                                    aria-label=\"Search box\">\n                                            </li>\n                                            <li>\n                                                <div class=\"m-l-10\" matTooltip=\"ADD\">\n                                                    <button mat-mini-fab color=\"primary\" (click)=\"mngRecord('Add','')\">\n                                                        <mat-icon class=\"col-white\">add</mat-icon>\n                                                    </button>\n                                                </div>\n                                            </li>\n                                            <li>\n                                                <div class=\"m-l-10\" matTooltip=\"REFRESH\">\n                                                    <button mat-mini-fab color=\"primary\" (click)=\"refresh()\">\n                                                        <mat-icon class=\"col-white\">refresh</mat-icon>\n                                                    </button>\n                                                </div>\n                                            </li>\n                                            <li *ngIf=\"selection.selected.length > 0\">\n                                                <div class=\"m-l-10\" matTooltip=\"APPROVE\">\n                                                    <button mat-mini-fab color=\"primary\"\n                                                        (click)=\"processMultipleRows('APPROVED')\"\n                                                        class=\"mat-button-custom\">\n                                                        <mat-icon class=\"col-white\">check</mat-icon>\n                                                    </button>\n                                                </div>\n                                            </li>\n                                            <li *ngIf=\"selection.selected.length > 0\">\n                                                <div class=\"m-l-10\" matTooltip=\"REJECT\">\n                                                    <button mat-mini-fab color=\"warn\"\n                                                        (click)=\"processMultipleRows('REJECTED')\"\n                                                        class=\"mat-button-custom\">\n                                                        <mat-icon class=\"col-white\">cancel</mat-icon>\n                                                    </button>\n                                                </div>\n                                            </li>\n                                            <li *ngIf=\"selection.selected.length > 0\">\n                                                <div class=\"m-l-10\" matTooltip=\"RETURN\">\n                                                    <button mat-mini-fab color=\"accent\"\n                                                        (click)=\"processMultipleRows('RETURNED')\"\n                                                        class=\"mat-button-custom\">\n                                                        <mat-icon class=\"col-white\">undo</mat-icon>\n                                                    </button>\n                                                </div>\n                                            </li>\n                                        </ul>\n                                    </div>\n                                    <div class=\"col-4\">\n                                        <ul class=\"header-buttons\">\n                                            <li>\n                                                <div class=\"export-button m-l-10\" matTooltip=\"XLSX\">\n                                                    <img src=\"assets/images/icons/xlsx.png\" alt=\"\"\n                                                        (click)=\"exporter.exportTable('xlsx', {fileName:'assets-list', sheet: 'sheet1'})\" />\n                                                </div>\n                                            </li>\n                                            <li>\n                                                <div class=\"export-button m-l-10\" matTooltip=\"CSV\">\n                                                    <img src=\"assets/images/icons/csv.png\" alt=\"\"\n                                                        (click)=\"exporter.exportTable('csv')\" />\n                                                </div>\n                                            </li>\n                                            <li>\n                                                <div class=\"export-button m-l-10\" matTooltip=\"JSON\">\n                                                    <img src=\"assets/images/icons/json.png\" alt=\"\"\n                                                        (click)=\"exporter.exportTable('json')\" />\n                                                </div>\n                                            </li>\n                                            <li>\n                                                <div class=\"export-button m-l-10\" matTooltip=\"TXT\">\n                                                    <img src=\"assets/images/icons/txt.png\" alt=\"\"\n                                                        (click)=\"exporter.exportTable('txt')\" />\n                                                </div>\n                                            </li>\n                                        </ul>\n                                    </div>\n                                </div>\n                            </div>\n\n                            <div class=\"materialTableHeader mt-2\">\n                                <div class=\"row\">\n                                    <div class=\"col-2\">\n                                        <form [formGroup]=\"Form\">\n                                            <!-- <div class=\"row\">\n                                            <div class=\"col-4\"> -->\n                                            <mat-form-field class=\"example-full-width\" appearance=\"fill\">\n                                                <mat-label>Status</mat-label>\n\n                                                <mat-select formControlName=\"status\"\n                                                    (selectionChange)=\"getSelectSelectedStatus()\">\n                                                    <mat-option *ngFor=\"let reqStatus of reqStatuses\"\n                                                        [value]=\"reqStatus.name\">{{ reqStatus.name\n                                                        }}\n                                                    </mat-option>\n                                                </mat-select>\n\n                                                <mat-error *ngIf=\"Form.get('status').hasError('required')\">\n                                                    Please select Status\n                                                </mat-error>\n                                            </mat-form-field>\n                                            <!-- </div>\n                    \n                                          </div> -->\n                                        </form>\n                                    </div>\n                                    <div class=\"col-10\">\n                                        <div class=\"button-container mt-1\">\n                                            <button mat-raised-button [class.active]=\"selectedStatus === 'ALL'\"\n                                            class=\"mat-button verified\" (click)=\"getSelectedStatus('ALL')\">\n                                            <mat-icon>check_circle</mat-icon>\n                                            ALL\n                                        </button>\n                                            <!-- Button for PENDING status -->\n                                            <button mat-raised-button [class.active]=\"selectedStatus === 'PENDING'\"\n                                                class=\"mat-button pending\" (click)=\"getSelectedStatus('PENDING')\">\n                                                <mat-icon>pending</mat-icon>\n                                                PENDING\n                                            </button>\n\n                                            <!-- Button for VERIFIED status -->\n                                            <!-- <button mat-raised-button [class.active]=\"selectedStatus === 'VERIFIED'\"\n                                            class=\"mat-button verified\" (click)=\"getSelectedStatus('VERIFIED')\">\n                                            <mat-icon>check_circle</mat-icon>\n                                            VERIFIED\n                                          </button> -->\n\n                                            <!-- Button for APPROVED status -->\n                                            <button mat-raised-button [class.active]=\"selectedStatus === 'APPROVED'\"\n                                                class=\"mat-button approved\" (click)=\"getSelectedStatus('APPROVED')\">\n                                                <mat-icon>thumb_up</mat-icon>\n                                                APPROVED\n                                            </button>\n                                            <!-- Button for RETURNED status -->\n                                            <button mat-raised-button [class.active]=\"selectedStatus === 'RETURNED'\"\n                                                class=\"mat-button returned\" (click)=\"getSelectedStatus('RETURNED')\">\n                                                <mat-icon>reply</mat-icon>\n                                                RETURNED\n                                            </button>\n\n                                            <!-- Button for REJECTED status -->\n                                            <button mat-raised-button [class.active]=\"selectedStatus === 'REJECTED'\"\n                                                class=\"mat-button rejected\" (click)=\"getSelectedStatus('REJECTED')\">\n                                                <mat-icon>cancel</mat-icon>\n                                                REJECTED\n                                            </button>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n\n                            <mat-table #table matTableExporter [dataSource]=\"dataSource\" matSort class=\"mat-cell\"\n                                #exporter=\"matTableExporter\">\n\n                                <ng-container matColumnDef=\"select\">\n                                    <mat-header-cell *matHeaderCellDef [ngClass]=\"'tbl-col-width-per-4'\">\n                                        <mat-checkbox color=\"primary\" (change)=\"$event ? masterToggle() : null\"\n                                            [checked]=\"selection.hasValue() && isAllSelected()\"\n                                            [indeterminate]=\"selection.hasValue() && !isAllSelected()\"\n                                            [ngClass]=\"'tbl-checkbox'\" (change)=\"expSelected()\">\n                                        </mat-checkbox>\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" [ngClass]=\"'tbl-col-width-per-4'\">\n                                        <mat-checkbox color=\"primary\" (click)=\"$event.stopPropagation()\"\n                                            (change)=\"$event ? selection.toggle(row) : null\"\n                                            [checked]=\"selection.isSelected(row)\" [ngClass]=\"'tbl-checkbox'\"\n                                            [aria-label]=\"checkboxLabel(row)\" (change)=\"expSelected()\">\n                                        </mat-checkbox>\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"id\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-10\">\n                                        ID\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-10\">\n                                        {{ row.id }}\n                                    </mat-cell>\n                                </ng-container>\n\n\n                                <ng-container matColumnDef=\"empPf\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Employee Pf\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        {{ row.empPf }}\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"newSalary\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        New Salary\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        {{ row.newSalary }}\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"comments\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Comments\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        {{ row.comments }}\n                                    </mat-cell>\n                                </ng-container>\n\n\n                                <ng-container matColumnDef=\"postedTime\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Posted Time\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        {{ row.postedTime | date:'short' }}\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"status\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Status\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row; let i = index\"\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-20\"\n                                        (click)=\"$event.stopPropagation()\">\n                                        <ng-container [ngSwitch]=\"row.status\">\n                                            <button *ngSwitchCase=\"'APPROVED'\"\n                                                class=\"badge badge-solid-green btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-check-circle\"></i>&nbsp;\n                                                {{ row.status }}\n                                            </button>\n                                            <button *ngSwitchCase=\"'REJECTED'\"\n                                                class=\"badge badge-solid-red btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-times-circle\"></i>&nbsp;\n                                                {{ row.status }}\n                                            </button>\n                                            <button *ngSwitchCase=\"'RETURNED'\"\n                                                class=\"badge badge-solid-brown btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-undo-alt\"></i>&nbsp;\n                                                {{ row.status }}\n                                            </button>\n                                            <button *ngSwitchCase=\"'PENDING'\"\n                                                class=\"badge badge-solid-blue btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-exclamation-circle\"></i>&nbsp;\n                                                {{ row.status }}\n                                            </button>\n                                            <button *ngSwitchDefault class=\"badge badge-solid-brown btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-question-circle\"></i>&nbsp;\n                                                {{ row.status }}\n                                            </button>\n                                        </ng-container>\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"verifiedFlag\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Verified\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        <ng-container *ngIf=\"row.verifiedFlag === 'Y'; else notVerified\">\n                                            <button class=\"badge badge-solid-green btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-check\"></i>&nbsp; Verified\n                                            </button>\n                                        </ng-container>\n                                        <ng-template #notVerified>\n                                            <button class=\"badge badge-solid-red btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-times\"></i>&nbsp; Not Verified\n                                            </button>\n                                        </ng-template>\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"deletedFlag\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Deleted\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        <ng-container *ngIf=\"row.deletedFlag === 'Y'; else notDeleted\">\n                                            <button class=\"badge badge-solid-red btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-trash\"></i>&nbsp; Deleted\n                                            </button>\n                                        </ng-container>\n                                        <ng-template #notDeleted>\n                                            <button class=\"badge badge-solid-green btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-check\"></i>&nbsp; Active\n                                            </button>\n                                        </ng-template>\n                                    </mat-cell>\n                                </ng-container>\n\n\n\n\n\n\n\n                                <ng-container matColumnDef=\"action\">\n                                    <mat-header-cell class=\"column-nowrap psl-3 tbl-col-width-per-15 pr-0\"\n                                        *matHeaderCellDef>\n                                        Action\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row; let i = index\"\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-15 pr-0\">\n\n                                        <button mat-icon-button color=\"accent\" (click)=\"$event.stopPropagation()\"\n                                            (click)=\"mngRecord('Update',row)\" class=\"tbl-action-btn\">\n                                            <app-feather-icons [icon]=\"'edit'\" [class]=\"'tbl-fav-edit'\">\n                                            </app-feather-icons>\n                                        </button>\n\n                                        <button mat-icon-button color=\"primary\" (click)=\"$event.stopPropagation()\"\n                                            (click)=\"mngRecord('View',row)\" class=\"tbl-action-btn\">\n                                            <app-feather-icons [icon]=\"'eye'\" [class]=\"'tbl-fav-eye'\">\n                                            </app-feather-icons>\n                                        </button>\n                                        <!-- \n                                        <button mat-icon-button color=\"primary\" (click)=\"$event.stopPropagation()\"\n                                            (click)=\"lockOrUnlockAccount(row)\" class=\"tbl-action-btn\">\n                                            <mat-icon>{{ row.isAcctActive === 'Y' ? 'lock' : 'lock_open' }}</mat-icon>\n                                        </button> -->\n\n                                        <button mat-icon-button color=\"accent\" (click)=\"$event.stopPropagation()\"\n                                            (click)=\"deleteRecord(row.id)\" class=\"tbl-action-btn\">\n                                            <app-feather-icons [icon]=\"'trash-2'\" [class]=\"'tbl-fav-delete'\">\n                                            </app-feather-icons>\n                                        </button>\n                                    </mat-cell>\n                                </ng-container>\n                                <mat-header-row *matHeaderRowDef=\"displayedColumns\">\n                                </mat-header-row>\n                                <mat-row *matRowDef=\"let row; columns: displayedColumns;\"  \n                                    [style.cursor]=\"'pointer'\" matRipple>\n                                </mat-row>\n\n\n                                <tr *matNoDataRow>\n                                    <td colspan=\"{{ displayedColumns.length }}\"> No data matching the filter \"{{ input\n                                        }}\"</td>\n                                </tr>\n                            </mat-table>\n                            <div class=\"m-2 mx-2\" *ngIf=\"loading || downloadLoading\">\n                                <mat-progress-bar color=\"primary\" mode=\"indeterminate\">\n                                </mat-progress-bar>\n                            </div>\n                            <div *ngIf=\"loading\" class=\"tbl-spinner\">\n                                <mat-progress-spinner color=\"primary\" [diameter]=\"40\" mode=\"indeterminate\">\n                                </mat-progress-spinner>\n                            </div>\n\n                            <mat-paginator [pageSize]=\"10\" [pageSizeOptions]=\"[2, 5, 10, 20, 30, 40, 50, 100]\"\n                                aria-label=\"Select page of users\">\n                            </mat-paginator>\n\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</section>","import { Component, Inject, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA, MatDialog, MatDialogConfig } from '@angular/material/dialog';\nimport { Subject, takeUntil, Subscription } from 'rxjs';\nimport { EmployeesLookupComponent } from 'src/app/erp-hr/hr-lookups/configurations-lookups/employees-lookup/employees-lookup.component';\nimport { FilesService } from 'src/app/shared/services/files.service';\nimport { SnackbarService } from 'src/app/shared/services/snackbar.service';\nimport { AllEmployeesComponent } from '../../../employees/all-employees/all-employees.component';\nimport { SalaryIncrementService } from 'src/app/erp-hr/data/payroll-services/salaryincrement.service';\n\n@Component({\n  selector: 'app-manage-salary-increments',\n  templateUrl: './manage-salary-increments.component.html',\n  styleUrls: ['./manage-salary-increments.component.sass']\n})\nexport class ManageSalaryIncrementsComponent implements OnInit {\n\n  mngForm: FormGroup;\n\n  destroy$: Subject<boolean> = new Subject<boolean>();\n\n  downloadLoading: boolean = false;\n\n  pageFunction: string = \"Add\";\n\n  hideSubmit: boolean = false;\n  isLoading: boolean = true;\n\n\n  constructor(\n    public dialogRef: MatDialogRef<AllEmployeesComponent>,\n    @Inject(MAT_DIALOG_DATA) public data,\n    private fb: FormBuilder,\n    private snackbar: SnackbarService,\n    private salaryIncrementService: SalaryIncrementService,\n    private dialog: MatDialog,\n    private filesService: FilesService\n  ) {}\n\n  ngOnInit(): void {\n    console.log(\"LOG DATA = \", this.data);\n    this.pageFunction = this.data.action;\n    this.formData = this.data.record\n    this.generateForm(this.formData);\n\n    this.getPage();\n  }\n  ngAfterViewInit() {\n    if (this.data.action !== \"Add\") {\n      this.generateForm(this.formData);\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next(true);\n    this.destroy$.complete();\n  }\n\n  disableTransactionType: boolean = true;\n  getPage() {\n    this.disableTransactionType = true;\n    console.log(\"this.data.action :\", this.data.action);\n    if (this.data.action === \"Add\") {\n      this.isLoading = false;\n      this.generateForm(this.data.record);\n    } else if (this.data.action === \"Update\") {\n      this.generateForm(this.data.record);\n    } else if (this.data.action === \"View\") {\n      this.generateForm(this.data.record);\n      this.activateViewMode();\n    }\n    this.isLoading = false;\n  }\n\n  formData: any;\n\n  generateForm(formData?): void {\n    console.log(\"generateForm formData :: \", formData);\n    this.mngForm = this.fb.group({\n      id: [formData?.id ?? ''],\n      empPf: [formData?.empPf?? '', Validators.required],\n      newSalary: [formData?.newSalary?? '', Validators.required],\n      comments: [formData?.comments?? '', Validators.required]\n    });\n  }\n\n  viewMode: boolean = false;\n  activateViewMode() {\n    this.viewMode = true;\n  }\n\n  posting: boolean = false;\n\n  response: any;\n  submit() {\n    console.log(\"this.mngForm.value: \", this.mngForm.value);\n    this.posting = true;\n    if (this.pageFunction === \"Add\") {\n      this.salaryIncrementService.create(this.mngForm.value)\n        .pipe(takeUntil(this.destroy$))\n        .subscribe({\n          next: (res) => {\n            this.response = res;\n            console.log(\"res: \", res);\n            if (res.statusCode == 201) {\n              this.snackbar.showNotification(\n                \"snackbar-success\",\n                res.message\n              );\n            } else {\n              this.snackbar.showNotification(\n                \"snackbar-danger\",\n                res.message\n              );\n            }\n          },\n          error: (err) => {\n            this.snackbar.showNotification(\"snackbar-danger\", err.message);\n          },\n          complete: () => {\n            this.posting = false;\n            setTimeout(() => {\n              this.onNoClick();\n            }, 3000);\n          },\n        }),\n        Subscription;\n    } else if (this.pageFunction === \"Update\") {\n      this.salaryIncrementService.update(this.mngForm.value)\n        .pipe(takeUntil(this.destroy$))\n        .subscribe({\n          next: (res) => {\n            this.response = res;\n            console.log(\"resres:: \", res);\n            if (res.statusCode == 200) {\n              this.snackbar.showNotification(\n                \"snackbar-success\",\n                res.message\n              );\n            } else {\n              this.snackbar.showNotification(\n                \"snackbar-danger\",\n                res.message\n              );\n            }\n          },\n          error: (err) => {\n            this.snackbar.showNotification(\"snackbar-danger\", err.message);\n          },\n          complete: () => {\n            this.posting = false;\n            setTimeout(() => {\n              this.onNoClick();\n            }, 3000);\n          },\n        }),\n        Subscription;\n    }\n  }\n\n  onNoClick(): void {\n    this.dialogRef.close({ event: \"close\", data: this.response });\n  }\n\n  selectedItem: any\n  employeeLookup() {\n    const dialogConfig = new MatDialogConfig();\n    dialogConfig.disableClose = false;\n    dialogConfig.disableClose = true;\n    dialogConfig.width = \"800px\";\n    dialogConfig.data = {\n      action: \"SingleEmployee\",\n      selected: this.selectedItem,\n    };\n    const dialogRef = this.dialog.open(EmployeesLookupComponent, dialogConfig);\n    dialogRef.afterClosed().subscribe((res) => {\n      if (res && res.data && res.data.length > 0) {\n        this.mngForm.patchValue({\n          empPf: res.data[0].empNo,\n          \n        });\n      }\n    });\n  }\n \n}\n","<div class=\"addContainer\">\n    <div class=\"modalHeader\">\n      <div class=\"editRowModal\">\n        <div class=\"modalHeader clearfix\">\n          <img src=\"assets/images/em.png\" width=\"30px\" height=\"30px\" alt=\"\" />\n          <div class=\"modal-about\">\n            <div class=\"font-weight-bold p-t-5 ms-2 me-2 font-17\">\n              <strong>{{ pageFunction }} Salary Increment</strong>\n            </div>\n          </div>\n        </div>\n      </div>\n      <button mat-icon-button (click)=\"dialogRef.close()\" aria-label=\"Close dialog\">\n        <mat-icon>close</mat-icon>\n      </button>\n    </div>\n    <div mat-dialog-content>\n      <div class=\"m-2\" *ngIf=\"isLoading\">\n        <mat-progress-bar color=\"primary\" mode=\"indeterminate\">\n        </mat-progress-bar>\n      </div>\n  \n      <ng-container>\n        <h6 class=\"mx-2\">Salary Increment Details</h6>\n        \n        <form class=\"register-form mx-2\" [formGroup]=\"mngForm\">\n            <div class=\"row\">\n              <div class=\"col-xl-6 col-lg-6 col-md-6 col-sm-6 mb-1\">\n                <mat-form-field class=\"example-full-width\" appearance=\"outline\">\n                  <mat-label>Employee PF No</mat-label>\n                  <input matInput formControlName=\"empPf\" required />\n                  <mat-icon matSuffix (click)=\"employeeLookup()\">search</mat-icon>\n                  <mat-error *ngIf=\"mngForm.get('empPf').hasError('required')\">\n                    Employee PF No is required\n                  </mat-error>\n                </mat-form-field>\n              </div>\n          \n              <div class=\"col-xl-6 col-lg-6 col-md-6 col-sm-6 mb-1\">\n                <mat-form-field class=\"example-full-width\" appearance=\"outline\">\n                  <mat-label>NewSalary</mat-label>\n                  <input matInput formControlName=\"newSalary\" required />\n                  <mat-icon matSuffix>compare_arrows</mat-icon>\n                  <mat-error *ngIf=\"mngForm.get('newSalary').hasError('required')\">\n                    NewSalary is required\n                  </mat-error>\n                </mat-form-field>\n              </div>\n          \n\n              \n              <div class=\"col-xl-12 col-lg-12 col-md-12 col-sm-12 mb-1\">\n                <mat-form-field class=\"example-full-width\" appearance=\"outline\">\n                  <mat-label>Comments</mat-label>\n                  <textarea matInput formControlName=\"comments\" required></textarea>\n                  <mat-icon matSuffix>compare_arrows</mat-icon>\n                  <mat-error *ngIf=\"mngForm.get('comments').hasError('required')\">\n                    Comments is required\n                  </mat-error>\n                </mat-form-field>\n              </div>\n          \n              \n            </div>\n          </form>\n          \n        <div class=\"row\" *ngIf=\"!viewMode\">\n          <div class=\"col-xl-12 col-lg-12 col-md-12 col-sm-12 mb-1\">\n            <div class=\"example-button-row\" align=\"end\">\n              <button class=\"btn-space\" mat-raised-button color=\"primary\" [class.auth-spinner]=\"posting\"\n                [disabled]=\"!mngForm.valid || posting\" (click)=\"submit()\">\n                {{ pageFunction }} Salary Increment\n              </button>\n              <button mat-raised-button color=\"warn\" (click)=\"onNoClick()\" tabindex=\"-1\">\n                Cancel\n              </button>\n            </div>\n          </div>\n        </div>\n      </ng-container>\n    </div>\n  </div>","import { SelectionModel } from '@angular/cdk/collections';\nimport { HttpParams } from '@angular/common/http';\nimport { Component, OnInit, ViewChild } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { MatDialog, MatDialogConfig } from '@angular/material/dialog';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { Subject, takeUntil, Subscription } from 'rxjs';\nimport { NotificationServiceService } from 'src/@core/Models/Notification/notification-service.service';\nimport { StaffLoanService } from 'src/app/erp-hr/data/payroll-services/staff-loan.service';\nimport { SnackbarService } from 'src/app/shared/services/snackbar.service';\nimport Swal from 'sweetalert2';\nimport { ManagePayrollStaffLoansComponent } from '../manage-payroll-staff-loans/manage-payroll-staff-loans.component';\n\n@Component({\n  selector: 'app-all-payroll-staff-loans',\n  templateUrl: './all-payroll-staff-loans.component.html',\n  styleUrls: ['./all-payroll-staff-loans.component.sass']\n})\nexport class AllPayrollStaffLoansComponent implements OnInit {\n\n  displayedColumns: string[] = [\n    \"select\",\n    \"id\",\n\n    \"empPf\",\n    \"description\",\n    \"loanAmount\",\n    \"interestRate\",\n    \"loanAccountNumber\",\n    \"fromDate\",\n    \"toDate\",\n    \"status\",\n    \"verifiedFlag\",\n    \"deletedFlag\",\n    \"action\",\n  ];\n\n  loading: boolean = false;\n  data: any;\n  error: any;\n  dialogConfig: any;\n  destroy$: Subject<boolean> = new Subject<boolean>();\n\n  dataSource!: MatTableDataSource<any>;\n  @ViewChild(MatPaginator) paginator!: MatPaginator;\n  @ViewChild(MatSort) sort!: MatSort;\n\n  selection = new SelectionModel<any>(true, []);\n\n  downloadLoading: boolean = false;\n  posting: boolean = false;\n  showForm: boolean = false;\n\n  Form: FormGroup\n  months: string[] = [\n    'January', 'February', 'March', 'April', 'May', 'June',\n    'July', 'August', 'September', 'October', 'November', 'December'\n  ];\n  constructor(\n    private dialog: MatDialog,\n    private notificationAPI: NotificationServiceService,\n    private staffLoanService: StaffLoanService,\n    private snackbar: SnackbarService,\n    private fb: FormBuilder\n  ) { }\n\n  ngOnInit(): void {\n\n\n    this.Form = this.fb.group({\n      status: ['PENDING'],\n    });\n    this.Form.valueChanges.subscribe(() => {\n      this.getData();\n    });\n\n    this.getData();\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next(true);\n    this.destroy$.complete();\n  }\n\n\n  //*********************************************************************************************************** */\n  reqStatuses: any[] = [\n    { name: \"PENDING\" },\n    // { name: \"VERIFIED\" },\n    { name: \"APPROVED\" },\n    { name: \"RETURNED\" },\n    { name: \"REJECTED\" },\n  ];\n  selectedStatus: string = \"PENDING\";\n  getSelectSelectedStatus() {\n   // this.getData();\n  }\n  getSelectedStatus(status: any) {\n    this.Form.patchValue({\n      status: status,\n    });\n\n  //  this.getData();\n  }\n\n  getData() {\n    this.loading = true;\n    this.dataSource = new MatTableDataSource([]);\n    this.dataSource.paginator = this.paginator;\n    this.dataSource.sort = this.sort;\n\n    let params = new HttpParams()\n      .set(\"status\", this.Form.value.status);\n\n    this.staffLoanService\n      .read(params)\n      .pipe(takeUntil(this.destroy$))\n      .subscribe({\n        next: (res) => {\n          if (res.statusCode === 302) {\n            this.data = res.entity;\n            console.log(\"Staff Loans displayed on table\", this.data);\n\n            this.loading = false;\n            this.dataSource = new MatTableDataSource(this.data);\n            this.dataSource.paginator = this.paginator;\n            this.dataSource.sort = this.sort;\n          } else {\n            this.loading = false;\n          }\n        },\n        error: (err) => {\n          this.loading = false;\n          this.notificationAPI.alertWarning(\n            \"Server Error: \" + err.message\n          );\n        },\n        complete: () => { },\n      });\n  }\n  refresh() {\n    this.getData();\n  }\n  //*********************************************************************************************************** */\n\n  mngRecord(action: any, record?: any) {\n    console.log(\"this.action:; \", action);\n    console.log(\"this.record:; \", record);\n\n    const dialogConfig = new MatDialogConfig();\n    dialogConfig.disableClose = false;\n    dialogConfig.disableClose = true;\n    dialogConfig.width = \"800px\";\n    dialogConfig.data = {\n      action: action,\n      record: record,\n    };\n    const dialogRef = this.dialog.open(ManagePayrollStaffLoansComponent, dialogConfig);\n    dialogRef.afterClosed().subscribe((result) => {\n      console.log(\"result:::\", result);\n\n      this.getData();\n    });\n  }\n  deleteRecord(id: number) {\n    Swal.fire({\n      title: \"Are you sure?\",\n      text: \"THIS RECORD WILL BE DELETED PERMANENTLY!!\",\n      icon: \"warning\",\n      showCancelButton: true,\n      confirmButtonColor: \"#3085d6\",\n      cancelButtonColor: \"#d33\",\n      confirmButtonText: \"Yes, delete it!\",\n    }).then((result) => {\n      if (result.isConfirmed) {\n        this.loading = true;\n        this.staffLoanService\n          .delete(id)\n          .pipe(takeUntil(this.destroy$))\n          .subscribe({\n            next: (res) => {\n              if (res.statusCode == 200) {\n                this.getData();\n                this.loading = false;\n                this.notificationAPI.alertSuccess(\n                  \"RECORD DELETED SUCCESSFULLY\"\n                );\n              } else {\n                this.getData();\n                this.loading = false;\n                this.notificationAPI.alertWarning(res.message);\n              }\n            },\n            error: (err) => {\n              this.loading = false;\n              this.notificationAPI.alertSuccess(\"Server Error: \" + err.message);\n            },\n            complete: () => { },\n          });\n      }\n    });\n  }\n\n  input: any;\n  applyFilter(event: Event) {\n    const filterValue = (event.target as HTMLInputElement).value;\n    this.input = filterValue;\n    this.dataSource.filter = filterValue.trim().toLowerCase();\n    if (this.dataSource.paginator) {\n      this.dataSource.paginator.firstPage();\n    }\n  }\n\n  // ****************************************************************************************************************************\n  selectedRows: any[] = [];\n  atleastOneSelected: boolean = false;\n  isAllSelected() {\n    const numSelected = this.selection.selected.length;\n    const numRows = this.dataSource.data.length;\n    return numSelected === numRows;\n  }\n  masterToggle() {\n    if (this.isAllSelected()) {\n      this.selection.clear();\n      return;\n    }\n\n    this.selection.select(...this.dataSource.data);\n  }\n  checkboxLabel(row?: any): string {\n    if (!row) {\n      return `${this.isAllSelected() ? \"deselect\" : \"select\"} all`;\n    }\n    return `${this.selection.isSelected(row) ? \"deselect\" : \"select\"} row ${row.position + 1\n      }`;\n  }\n\n  expSelected() {\n    this.atleastOneSelected = true;\n    this.selectedRows = this.selection.selected;\n\n    console.log(\"this.selectedRows: \", this.selectedRows);\n  }\n\n  hasAccess: boolean = true;\n  processMultipleRows(status: any) {\n    let privilege = \"Validate Expenses\";\n\n    // this.hasAccess = this.accessControlService.hasPrivilege(\"FinanceModule\", [\n    //   privilege,\n    // ]);\n\n    if (this.hasAccess) {\n      Swal.fire({\n    title: '<span style=\"font-size: 20px;\">Enter Verifier Remarks</span>',\n    input: \"textarea\",\n    inputPlaceholder: \"Type your remarks here...\",\n    confirmButtonText: \"Submit\",\n    showCancelButton: true,\n    cancelButtonText: \"Cancel\",\n    icon: \"info\",\n\n    inputValidator: (value) => {\n          if (!value) {\n            return \"Please enter your remarks\";\n          }\n        },\n      }).then((result) => {\n        if (result.isConfirmed) {\n          const verifierRemarks = result.value;\n\n          const processedRows = this.selectedRows.map((element) => {\n            return {\n              id: element.id,\n              status: status,\n              verifierRemarks: verifierRemarks,\n            };\n          });\n\n          console.log(\"LOG: \", processedRows);\n\n          this.staffLoanService\n            .validateBulkStaffLoans(processedRows)\n            .pipe(takeUntil(this.destroy$))\n            .subscribe({\n              next: (res) => {\n                console.log(\"res: \", res);\n                if (res.statusCode == 201 || 200 || 302) {\n                  this.snackbar.showNotification(\n                    \"snackbar-success\",\n                    res.message\n                  );\n\n                  this.selection = new SelectionModel<any>(true, []);\n                  this.selection.clear();\n                } else {\n                  this.snackbar.showNotification(\n                    \"snackbar-danger\",\n                    res.message\n                  );\n                }\n              },\n              error: (err) => {\n                this.snackbar.showNotification(\"snackbar-danger\", err.message);\n              },\n              complete: () => {\n                this.getData();\n              },\n            }),\n            Subscription;\n        } else {\n          this.selection = new SelectionModel<any>(true, []);\n          this.selection.clear();\n        }\n      });\n    }\n  }\n}\n","<section class=\"content\">\n    <div class=\"content-block\">\n        <div class=\"block-header\">\n            <!-- breadcrumb -->\n            <app-breadcrumb [title]=\"'All Staff Loans'\" [items]=\"['Staff Loans']\" [active_item]=\"'All Staff Loans'\">\n            </app-breadcrumb>\n        </div>\n\n        <app-gen-widgets></app-gen-widgets>\n\n        <div class=\"row\">\n            <div class=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\">\n                <div class=\"card\">\n\n                    <div class=\"body\">\n                        <div class=\"table-responsive\">\n                            <div class=\"materialTableHeader\">\n                                <div class=\"row\">\n                                    <div class=\"col-8\">\n                                        <ul class=\"header-buttons-left ms-0\">\n                                            <li class=\"dropdown\">\n                                                <h2>Staff Loans</h2>\n                                            </li>\n                                            <li class=\"dropdown m-l-20\">\n                                                <label for=\"search-input\"><i\n                                                        class=\"material-icons search-icon\">search</i></label>\n                                                <input placeholder=\"Filter...\" type=\"text\" (keyup)=\"applyFilter($event)\"\n                                                    #filter class=\"browser-default search-field\"\n                                                    aria-label=\"Search box\">\n                                            </li>\n                                            <li>\n                                                <div class=\"m-l-10\" matTooltip=\"ADD\">\n                                                    <button mat-mini-fab color=\"primary\" (click)=\"mngRecord('Add','')\">\n                                                        <mat-icon class=\"col-white\">add</mat-icon>\n                                                    </button>\n                                                </div>\n                                            </li>\n                                            <li>\n                                                <div class=\"m-l-10\" matTooltip=\"REFRESH\">\n                                                    <button mat-mini-fab color=\"primary\" (click)=\"refresh()\">\n                                                        <mat-icon class=\"col-white\">refresh</mat-icon>\n                                                    </button>\n                                                </div>\n                                            </li>\n                                            <li *ngIf=\"selection.selected.length > 0\">\n                                                <div class=\"m-l-10\" matTooltip=\"APPROVE\">\n                                                    <button mat-mini-fab color=\"primary\"\n                                                        (click)=\"processMultipleRows('APPROVED')\"\n                                                        class=\"mat-button-custom\">\n                                                        <mat-icon class=\"col-white\">check</mat-icon>\n                                                    </button>\n                                                </div>\n                                            </li>\n                                            <li *ngIf=\"selection.selected.length > 0\">\n                                                <div class=\"m-l-10\" matTooltip=\"REJECT\">\n                                                    <button mat-mini-fab color=\"warn\"\n                                                        (click)=\"processMultipleRows('REJECTED')\"\n                                                        class=\"mat-button-custom\">\n                                                        <mat-icon class=\"col-white\">cancel</mat-icon>\n                                                    </button>\n                                                </div>\n                                            </li>\n                                            <li *ngIf=\"selection.selected.length > 0\">\n                                                <div class=\"m-l-10\" matTooltip=\"RETURN\">\n                                                    <button mat-mini-fab color=\"accent\"\n                                                        (click)=\"processMultipleRows('RETURNED')\"\n                                                        class=\"mat-button-custom\">\n                                                        <mat-icon class=\"col-white\">undo</mat-icon>\n                                                    </button>\n                                                </div>\n                                            </li>\n                                        </ul>\n                                    </div>\n                                    <div class=\"col-4\">\n                                        <ul class=\"header-buttons\">\n                                            <li>\n                                                <div class=\"export-button m-l-10\" matTooltip=\"XLSX\">\n                                                    <img src=\"assets/images/icons/xlsx.png\" alt=\"\"\n                                                        (click)=\"exporter.exportTable('xlsx', {fileName:'assets-list', sheet: 'sheet1'})\" />\n                                                </div>\n                                            </li>\n                                            <li>\n                                                <div class=\"export-button m-l-10\" matTooltip=\"CSV\">\n                                                    <img src=\"assets/images/icons/csv.png\" alt=\"\"\n                                                        (click)=\"exporter.exportTable('csv')\" />\n                                                </div>\n                                            </li>\n                                            <li>\n                                                <div class=\"export-button m-l-10\" matTooltip=\"JSON\">\n                                                    <img src=\"assets/images/icons/json.png\" alt=\"\"\n                                                        (click)=\"exporter.exportTable('json')\" />\n                                                </div>\n                                            </li>\n                                            <li>\n                                                <div class=\"export-button m-l-10\" matTooltip=\"TXT\">\n                                                    <img src=\"assets/images/icons/txt.png\" alt=\"\"\n                                                        (click)=\"exporter.exportTable('txt')\" />\n                                                </div>\n                                            </li>\n                                        </ul>\n                                    </div>\n                                </div>\n                            </div>\n\n                            <div class=\"materialTableHeader mt-2\">\n                                <div class=\"row\">\n                                  <div class=\"col-2\">\n                                    <form [formGroup]=\"Form\">\n                                      <!-- <div class=\"row\">\n                                            <div class=\"col-4\"> -->\n                                      <mat-form-field class=\"example-full-width\" appearance=\"fill\">\n                                        <mat-label>Status</mat-label>\n                \n                                        <mat-select formControlName=\"status\" (selectionChange)=\"getSelectSelectedStatus()\">\n                                          <mat-option *ngFor=\"let reqStatus of reqStatuses\" [value]=\"reqStatus.name\">{{ reqStatus.name\n                                            }}\n                                          </mat-option>\n                                        </mat-select>\n                \n                                        <mat-error *ngIf=\"Form.get('status').hasError('required')\">\n                                          Please select Status\n                                        </mat-error>\n                                      </mat-form-field>\n                                      <!-- </div>\n                    \n                                          </div> -->\n                                    </form>\n                                  </div>\n                                  <div class=\"col-10\">\n                                    <div class=\"button-container mt-1\">\n                                      <!-- Button for PENDING status -->\n                                      <button mat-raised-button [class.active]=\"selectedStatus === 'PENDING'\" class=\"mat-button pending\"\n                                        (click)=\"getSelectedStatus('PENDING')\">\n                                        <mat-icon>pending</mat-icon>\n                                        PENDING\n                                      </button>\n                \n                                      <!-- Button for VERIFIED status -->\n                                      <!-- <button mat-raised-button [class.active]=\"selectedStatus === 'VERIFIED'\"\n                                            class=\"mat-button verified\" (click)=\"getSelectedStatus('VERIFIED')\">\n                                            <mat-icon>check_circle</mat-icon>\n                                            VERIFIED\n                                          </button> -->\n                \n                                      <!-- Button for APPROVED status -->\n                                      <button mat-raised-button [class.active]=\"selectedStatus === 'APPROVED'\"\n                                        class=\"mat-button approved\" (click)=\"getSelectedStatus('APPROVED')\">\n                                        <mat-icon>thumb_up</mat-icon>\n                                        APPROVED\n                                      </button>\n                                      <!-- Button for RETURNED status -->\n                                      <button mat-raised-button [class.active]=\"selectedStatus === 'RETURNED'\"\n                                        class=\"mat-button returned\" (click)=\"getSelectedStatus('RETURNED')\">\n                                        <mat-icon>reply</mat-icon>\n                                        RETURNED\n                                      </button>\n                \n                                      <!-- Button for REJECTED status -->\n                                      <button mat-raised-button [class.active]=\"selectedStatus === 'REJECTED'\"\n                                        class=\"mat-button rejected\" (click)=\"getSelectedStatus('REJECTED')\">\n                                        <mat-icon>cancel</mat-icon>\n                                        REJECTED\n                                      </button>\n                                    </div>\n                                  </div>\n                                </div>\n                              </div>\n\n                            <mat-table #table matTableExporter [dataSource]=\"dataSource\" matSort class=\"mat-cell\"\n                                #exporter=\"matTableExporter\">\n\n                                <ng-container matColumnDef=\"select\">\n                                    <mat-header-cell *matHeaderCellDef [ngClass]=\"'tbl-col-width-per-4'\">\n                                        <mat-checkbox color=\"primary\" (change)=\"$event ? masterToggle() : null\"\n                                            [checked]=\"selection.hasValue() && isAllSelected()\"\n                                            [indeterminate]=\"selection.hasValue() && !isAllSelected()\"\n                                            [ngClass]=\"'tbl-checkbox'\" (change)=\"expSelected()\">\n                                        </mat-checkbox>\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" [ngClass]=\"'tbl-col-width-per-4'\">\n                                        <mat-checkbox color=\"primary\" (click)=\"$event.stopPropagation()\"\n                                            (change)=\"$event ? selection.toggle(row) : null\"\n                                            [checked]=\"selection.isSelected(row)\" [ngClass]=\"'tbl-checkbox'\"\n                                            [aria-label]=\"checkboxLabel(row)\" (change)=\"expSelected()\">\n                                        </mat-checkbox>\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"id\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-10\">\n                                        ID\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-10\">\n                                        {{ row.id }}\n                                    </mat-cell>\n                                </ng-container>\n                 \n                                <ng-container matColumnDef=\"empPf\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        EmpPf\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        {{ row.empPf }}\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"description\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Description\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        {{ row.description }}\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"loanAmount\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        LoanAmount\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        {{ row.loanAmount }}\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"interestRate\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        InterestRate\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        {{ row.interestRate }}\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"loanAccountNumber\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        LoanAccountNumber\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        {{ row.loanAccountNumber }}\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"fromDate\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        FromDate\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        {{ row.fromDate | date: 'short' }}\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"toDate\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        ToDate\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        {{ row.toDate| date: 'short' }}\n                                    </mat-cell>\n                                </ng-container>\n\n\n                                <ng-container matColumnDef=\"postedTime\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Posted Time\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        {{ row.postedTime | date:'short' }}\n                                    </mat-cell>\n                                </ng-container>\n\n                                 <ng-container matColumnDef=\"status\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Status\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row; let i = index\"\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-20\"\n                                        (click)=\"$event.stopPropagation()\">\n                                        <ng-container [ngSwitch]=\"row.status\">\n                                            <button *ngSwitchCase=\"'APPROVED'\"\n                                                class=\"badge badge-solid-green btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-check-circle\"></i>&nbsp;\n                                                {{ row.status }}\n                                            </button>\n                                            <button *ngSwitchCase=\"'REJECTED'\"\n                                                class=\"badge badge-solid-red btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-times-circle\"></i>&nbsp;\n                                                {{ row.status }}\n                                            </button>\n                                            <button *ngSwitchCase=\"'RETURNED'\"\n                                                class=\"badge badge-solid-brown btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-undo-alt\"></i>&nbsp;\n                                                {{ row.status }}\n                                            </button>\n                                            <button *ngSwitchCase=\"'PENDING'\"\n                                                class=\"badge badge-solid-blue btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-exclamation-circle\"></i>&nbsp;\n                                                {{ row.status }}\n                                            </button>\n                                            <button *ngSwitchDefault class=\"badge badge-solid-brown btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-question-circle\"></i>&nbsp;\n                                                {{ row.status }}\n                                            </button>\n                                        </ng-container>\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"verifiedFlag\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Verified\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        <ng-container *ngIf=\"row.verifiedFlag === 'Y'; else notVerified\">\n                                            <button class=\"badge badge-solid-green btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-check\"></i>&nbsp; Verified\n                                            </button>\n                                        </ng-container>\n                                        <ng-template #notVerified>\n                                            <button class=\"badge badge-solid-red btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-times\"></i>&nbsp; Not Verified\n                                            </button>\n                                        </ng-template>\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"deletedFlag\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Deleted\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        <ng-container *ngIf=\"row.deletedFlag === 'Y'; else notDeleted\">\n                                            <button class=\"badge badge-solid-red btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-trash\"></i>&nbsp; Deleted\n                                            </button>\n                                        </ng-container>\n                                        <ng-template #notDeleted>\n                                            <button class=\"badge badge-solid-green btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-check\"></i>&nbsp; Active\n                                            </button>\n                                        </ng-template>\n                                    </mat-cell>\n                                </ng-container>\n\n\n\n\n\n\n\n                                <ng-container matColumnDef=\"action\">\n                                    <mat-header-cell class=\"column-nowrap psl-3 tbl-col-width-per-15 pr-0\"\n                                        *matHeaderCellDef>\n                                        Action\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row; let i = index\"\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-15 pr-0\">\n\n                                        <button mat-icon-button color=\"accent\" (click)=\"$event.stopPropagation()\"\n                                            (click)=\"mngRecord('Update',row)\" class=\"tbl-action-btn\">\n                                            <app-feather-icons [icon]=\"'edit'\" [class]=\"'tbl-fav-edit'\">\n                                            </app-feather-icons>\n                                        </button>\n\n                                        <button mat-icon-button color=\"primary\" (click)=\"$event.stopPropagation()\"\n                                            (click)=\"mngRecord('View',row)\" class=\"tbl-action-btn\">\n                                            <app-feather-icons [icon]=\"'eye'\" [class]=\"'tbl-fav-eye'\">\n                                            </app-feather-icons>\n                                        </button>\n                                        <!-- \n                                        <button mat-icon-button color=\"primary\" (click)=\"$event.stopPropagation()\"\n                                            (click)=\"lockOrUnlockAccount(row)\" class=\"tbl-action-btn\">\n                                            <mat-icon>{{ row.isAcctActive === 'Y' ? 'lock' : 'lock_open' }}</mat-icon>\n                                        </button> -->\n\n                                        <button mat-icon-button color=\"accent\" (click)=\"$event.stopPropagation()\"\n                                            (click)=\"deleteRecord(row.id)\" class=\"tbl-action-btn\">\n                                            <app-feather-icons [icon]=\"'trash-2'\" [class]=\"'tbl-fav-delete'\">\n                                            </app-feather-icons>\n                                        </button>\n                                    </mat-cell>\n                                </ng-container>\n                                <mat-header-row *matHeaderRowDef=\"displayedColumns\">\n                                </mat-header-row>\n                                <mat-row *matRowDef=\"let row; columns: displayedColumns;\"  \n                                    [style.cursor]=\"'pointer'\" matRipple>\n                                </mat-row>\n\n\n                                <tr *matNoDataRow>\n                                    <td colspan=\"{{ displayedColumns.length }}\"> No data matching the filter \"{{ input\n                                        }}\"</td>\n                                </tr>\n                            </mat-table>\n                            <div class=\"m-2 mx-2\" *ngIf=\"loading || downloadLoading\">\n                                <mat-progress-bar color=\"primary\" mode=\"indeterminate\">\n                                </mat-progress-bar>\n                            </div>\n                            <div *ngIf=\"loading\" class=\"tbl-spinner\">\n                                <mat-progress-spinner color=\"primary\" [diameter]=\"40\" mode=\"indeterminate\">\n                                </mat-progress-spinner>\n                            </div>\n\n                            <mat-paginator [pageSize]=\"10\" [pageSizeOptions]=\"[2, 5, 10, 20, 30, 40, 50, 100]\"\n                                aria-label=\"Select page of users\">\n                            </mat-paginator>\n\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</section>","import { Component, Inject, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA, MatDialog, MatDialogConfig } from '@angular/material/dialog';\nimport { Subject, takeUntil, Subscription } from 'rxjs';\nimport { StaffLoanService } from 'src/app/erp-hr/data/payroll-services/staff-loan.service';\nimport { EmployeesLookupComponent } from 'src/app/erp-hr/hr-lookups/configurations-lookups/employees-lookup/employees-lookup.component';\nimport { FilesService } from 'src/app/shared/services/files.service';\nimport { SnackbarService } from 'src/app/shared/services/snackbar.service';\nimport { AllEmployeesComponent } from '../../../employees/all-employees/all-employees.component';\n\n@Component({\n  selector: 'app-manage-payroll-staff-loans',\n  templateUrl: './manage-payroll-staff-loans.component.html',\n  styleUrls: ['./manage-payroll-staff-loans.component.sass']\n})\nexport class ManagePayrollStaffLoansComponent implements OnInit {\n\n  mngForm: FormGroup;\n\n  destroy$: Subject<boolean> = new Subject<boolean>();\n\n  downloadLoading: boolean = false;\n\n  pageFunction: string = \"Add\";\n\n  hideSubmit: boolean = false;\n  isLoading: boolean = true;\n\n  \n  months: string[] = [\n    'January', 'February', 'March', 'April', 'May', 'June',\n    'July', 'August', 'September', 'October', 'November', 'December'\n  ];\n  constructor(\n    public dialogRef: MatDialogRef<AllEmployeesComponent>,\n    @Inject(MAT_DIALOG_DATA) public data,\n    private fb: FormBuilder,\n    private snackbar: SnackbarService,\n    private staffLoanService: StaffLoanService,\n    private dialog: MatDialog,\n    private filesService: FilesService\n  ) {}\n\n  ngOnInit(): void {\n    console.log(\"LOG DATA = \", this.data);\n    this.pageFunction = this.data.action;\n    this.formData = this.data.record\n    this.generateForm(this.formData);\n\n    this.getPage();\n  }\n  ngAfterViewInit() {\n    if (this.data.action !== \"Add\") {\n      this.generateForm(this.formData);\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next(true);\n    this.destroy$.complete();\n  }\n\n  disableTransactionType: boolean = true;\n  getPage() {\n    this.disableTransactionType = true;\n    console.log(\"this.data.action :\", this.data.action);\n    if (this.data.action === \"Add\") {\n      this.isLoading = false;\n      this.generateForm(this.data.record);\n    } else if (this.data.action === \"Update\") {\n      this.generateForm(this.data.record);\n    } else if (this.data.action === \"View\") {\n      this.generateForm(this.data.record);\n      this.activateViewMode();\n    }\n    this.isLoading = false;\n  }\n\n  formData: any;\n  generateForm(formData?): void {\n    console.log(\"generateForm formData :: \", formData);\n    this.mngForm = this.fb.group({\n      empPf: [formData?.empPf ?? '', Validators.required],\n      loanAmount: [formData?.loanAmount ?? '', Validators.required],\n      interestRate: [formData?.interestRate ?? '', Validators.required],\n      loanAccountNumber: [formData?.loanAccountNumber ?? '', Validators.required],\n      fromDate: [formData?.fromDate ?? '', Validators.required],\n      toDate: [formData?.toDate ?? '', Validators.required],\n      description: [formData?.description ?? '', Validators.required]\n    });\n  }\n\n\n  viewMode: boolean = false;\n  activateViewMode() {\n    this.viewMode = true;\n  }\n\n  posting: boolean = false;\n\n  response: any;\n  submit() {\n    console.log(\"this.mngForm.value: \", this.mngForm.value);\n    this.posting = true;\n    if (this.pageFunction === \"Add\") {\n      this.staffLoanService.create(this.mngForm.value)\n        .pipe(takeUntil(this.destroy$))\n        .subscribe({\n          next: (res) => {\n            this.response = res;\n            console.log(\"res: \", res);\n            if (res.statusCode == 201) {\n              this.snackbar.showNotification(\n                \"snackbar-success\",\n                res.message\n              );\n            } else {\n              this.snackbar.showNotification(\n                \"snackbar-danger\",\n                res.message\n              );\n            }\n          },\n          error: (err) => {\n            this.snackbar.showNotification(\"snackbar-danger\", err.message);\n          },\n          complete: () => {\n            this.posting = false;\n            setTimeout(() => {\n              this.onNoClick();\n            }, 3000);\n          },\n        }),\n        Subscription;\n    } else if (this.pageFunction === \"Update\") {\n      this.staffLoanService.update(this.mngForm.value)\n        .pipe(takeUntil(this.destroy$))\n        .subscribe({\n          next: (res) => {\n            this.response = res;\n            console.log(\"resres:: \", res);\n            if (res.statusCode == 200) {\n              this.snackbar.showNotification(\n                \"snackbar-success\",\n                res.message\n              );\n            } else {\n              this.snackbar.showNotification(\n                \"snackbar-danger\",\n                res.message\n              );\n            }\n          },\n          error: (err) => {\n            this.snackbar.showNotification(\"snackbar-danger\", err.message);\n          },\n          complete: () => {\n            this.posting = false;\n            setTimeout(() => {\n              this.onNoClick();\n            }, 3000);\n          },\n        }),\n        Subscription;\n    }\n  }\n\n  onNoClick(): void {\n    this.dialogRef.close({ event: \"close\", data: this.response });\n  }\n\n  selectedItem: any\n  employeeLookup() {\n    const dialogConfig = new MatDialogConfig();\n    dialogConfig.disableClose = false;\n    dialogConfig.disableClose = true;\n    dialogConfig.width = \"800px\";\n    dialogConfig.data = {\n      action: \"SingleEmployee\",\n      selected: this.selectedItem,\n    };\n    const dialogRef = this.dialog.open(EmployeesLookupComponent, dialogConfig);\n    dialogRef.afterClosed().subscribe((res) => {\n      if (res && res.data && res.data.length > 0) {\n        this.mngForm.patchValue({\n          empPf: res.data[0].empNo,\n          \n        });\n      }\n    });\n  }\n \n}\n","<div class=\"addContainer\">\n    <div class=\"modalHeader\">\n      <div class=\"editRowModal\">\n        <div class=\"modalHeader clearfix\">\n          <img src=\"assets/images/em.png\" width=\"30px\" height=\"30px\" alt=\"\" />\n          <div class=\"modal-about\">\n            <div class=\"font-weight-bold p-t-5 ms-2 me-2 font-17\">\n              <strong>{{ pageFunction }} Staff Loan</strong>\n            </div>\n          </div>\n        </div>\n      </div>\n      <button mat-icon-button (click)=\"dialogRef.close()\" aria-label=\"Close dialog\">\n        <mat-icon>close</mat-icon>\n      </button>\n    </div>\n    <div mat-dialog-content>\n      <div class=\"m-2\" *ngIf=\"isLoading\">\n        <mat-progress-bar color=\"primary\" mode=\"indeterminate\">\n        </mat-progress-bar>\n      </div>\n  \n      <ng-container>\n        <h6 class=\"mx-2\">Staff Loan Details</h6>\n        <!-- empPf: [formData?.empPf ?? '', Validators.required],\n        loanAmount: [formData?.loanAmount ?? '', Validators.required],\n        interestRate: [formData?.interestRate ?? '', Validators.required],\n        loanAccountNumber: [formData?.loanAccountNumber ?? '', Validators.required],\n        fromDate: [formData?.fromDate ?? '', Validators.required],\n        toDate: [formData?.toDate ?? '', Validators.required],\n        description: [formData?.description ?? '', Validators.required] -->\n        <form class=\"register-form mx-2\" [formGroup]=\"mngForm\">\n            <div class=\"row\">\n              <div class=\"col-xl-6 col-lg-6 col-md-6 col-sm-6 mb-1\">\n                <mat-form-field class=\"example-full-width\" appearance=\"outline\">\n                  <mat-label>Employee PF No</mat-label>\n                  <input matInput formControlName=\"empPf\" required />\n                  <mat-icon matSuffix (click)=\"employeeLookup()\">search</mat-icon>\n                  <mat-error *ngIf=\"mngForm.get('empPf').hasError('required')\">\n                    Employee PF No is required\n                  </mat-error>\n                </mat-form-field>\n              </div>\n          \n              <div class=\"col-xl-6 col-lg-6 col-md-6 col-sm-6 mb-1\">\n                <mat-form-field class=\"example-full-width\" appearance=\"outline\">\n                  <mat-label>Amount</mat-label>\n                  <input matInput formControlName=\"loanAmount\" required />\n                  <mat-icon matSuffix>compare_arrows</mat-icon>\n                  <mat-error *ngIf=\"mngForm.get('loanAmount').hasError('required')\">\n                    Amount is required\n                  </mat-error>\n                </mat-form-field>\n              </div>\n\n              <div class=\"col-xl-6 col-lg-6 col-md-6 col-sm-6 mb-1\">\n                <mat-form-field class=\"example-full-width\" appearance=\"outline\">\n                  <mat-label>Interest Rate</mat-label>\n                  <input matInput formControlName=\"interestRate\" required />\n                  <mat-icon matSuffix>compare_arrows</mat-icon>\n                  <mat-error *ngIf=\"mngForm.get('interestRate').hasError('required')\">\n                    Interest Rate is required\n                  </mat-error>\n                </mat-form-field>\n              </div>\n              <div class=\"col-xl-6 col-lg-6 col-md-6 col-sm-6 mb-1\">\n                <mat-form-field class=\"example-full-width\" appearance=\"outline\">\n                  <mat-label>Staff Loan Type</mat-label>\n                  <input matInput formControlName=\"loanAccountNumber\" required />\n                  <mat-error *ngIf=\"mngForm.get('loanAccountNumber').hasError('required')\">\n                    Staff Loan Type is required\n                  </mat-error>\n                </mat-form-field>\n              </div>\n          \n              <div class=\"col-xl-6 col-lg-6 col-md-6 col-sm-6 mb-1\">\n                <mat-form-field class=\"example-full-width\" appearance=\"outline\">\n                  <mat-label>From Date</mat-label>\n                  <input matInput [matDatepicker]=\"fromDatePicker\" formControlName=\"fromDate\" required>\n                  <mat-datepicker-toggle matSuffix [for]=\"fromDatePicker\"></mat-datepicker-toggle>\n                  <mat-datepicker #fromDatePicker></mat-datepicker>\n                  <mat-error *ngIf=\"mngForm.get('fromDate').hasError('required')\">\n                    From Date is required\n                  </mat-error>\n                </mat-form-field>\n              </div>\n              \n              <div class=\"col-xl-6 col-lg-6 col-md-6 col-sm-6 mb-1\">\n                <mat-form-field class=\"example-full-width\" appearance=\"outline\">\n                  <mat-label>To Date</mat-label>\n                  <input matInput [matDatepicker]=\"toDatePicker\" formControlName=\"toDate\" required>\n                  <mat-datepicker-toggle matSuffix [for]=\"toDatePicker\"></mat-datepicker-toggle>\n                  <mat-datepicker #toDatePicker></mat-datepicker>\n                  <mat-error *ngIf=\"mngForm.get('toDate').hasError('required')\">\n                    To Date is required\n                  </mat-error>\n                </mat-form-field>\n              </div>\n              \n\n          \n              <div class=\"col-xl-12 col-lg-12 col-md-12 col-sm-12 mb-1\">\n                <mat-form-field class=\"example-full-width\" appearance=\"outline\">\n                  <mat-label>Description</mat-label>\n                  <textarea matInput formControlName=\"description\" required></textarea>\n                  <mat-icon matSuffix>compare_arrows</mat-icon>\n                  <mat-error *ngIf=\"mngForm.get('description').hasError('required')\">\n                    Description is required\n                  </mat-error>\n                </mat-form-field>\n              </div>\n            </div>\n          </form>\n          \n  \n        <div class=\"row\" *ngIf=\"!viewMode\">\n          <div class=\"col-xl-12 col-lg-12 col-md-12 col-sm-12 mb-1\">\n            <div class=\"example-button-row\" align=\"end\">\n              <button class=\"btn-space\" mat-raised-button color=\"primary\" [class.auth-spinner]=\"posting\"\n                [disabled]=\"!mngForm.valid || posting\" (click)=\"submit()\">\n                {{ pageFunction }} Staff Loan\n              </button>\n              <button mat-raised-button color=\"warn\" (click)=\"onNoClick()\" tabindex=\"-1\">\n                Cancel\n              </button>\n            </div>\n          </div>\n        </div>\n      </ng-container>\n    </div>\n  </div>","import { SelectionModel } from \"@angular/cdk/collections\";\nimport { HttpParams } from \"@angular/common/http\";\nimport { Component, OnInit, ViewChild } from \"@angular/core\";\nimport { FormGroup, FormBuilder, Validators } from \"@angular/forms\";\nimport { MatDialog, MatDialogConfig } from \"@angular/material/dialog\";\nimport { MatPaginator } from \"@angular/material/paginator\";\nimport { MatSort } from \"@angular/material/sort\";\nimport { MatTableDataSource } from \"@angular/material/table\";\nimport { Subject, takeUntil, Subscription } from \"rxjs\";\nimport { NotificationServiceService } from \"src/@core/Models/Notification/notification-service.service\";\nimport { CustomAllowanceService } from \"src/app/erp-hr/data/payroll-services/custom-allowance.service\";\nimport { SnackbarService } from \"src/app/shared/services/snackbar.service\";\nimport Swal from \"sweetalert2\";\nimport { ManagePayrollAllowancesComponent } from \"../../allowance-payroll/manage-payroll-allowances/manage-payroll-allowances.component\";\nimport { PayrollService } from \"src/app/erp-hr/data/payroll-services/payroll.service\";\nimport { Router } from \"@angular/router\";\n\n@Component({\n  selector: \"app-all-to-finance\",\n  templateUrl: \"./all-to-finance.component.html\",\n  styleUrls: [\"./all-to-finance.component.sass\"],\n})\nexport class AllToFinanceComponent implements OnInit {\n  displayedColumns: string[] = [\n    //\"select\",\n    //\"id\",\n    \"periodY\",\n    \"periodM\",\n    \"totalGrosspay\",\n    \"totalNetpay\",\n    \"tranDate\",\n    \"transactionStatus\",\n    \"financeManagerVerifiedStatus\",\n    \"seniorFinanceManagerVerifiedStatus\",\n    \"headFinanceAndStrategyVerifiedStatus\",\n    \"managingDirectorAndCEOVerifiedStatus\",\n    \"status\",\n    // \"verifiedFlag\",\n    // \"deletedFlag\",\n    \"action\",\n  ];\n\n\n  loading: boolean = false;\n  data: any;\n  error: any;\n  dialogConfig: any;\n  destroy$: Subject<boolean> = new Subject<boolean>();\n\n  dataSource!: MatTableDataSource<any>;\n  @ViewChild(MatPaginator) paginator!: MatPaginator;\n  @ViewChild(MatSort) sort!: MatSort;\n\n  selection = new SelectionModel<any>(true, []);\n\n  downloadLoading: boolean = false;\n  posting: boolean = false;\n  showForm: boolean = false;\n\n  Form: FormGroup;\n  months: string[] = [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\",\n  ];\n  constructor(\n    private dialog: MatDialog,\n    private notificationAPI: NotificationServiceService,\n    private payrollAPi: PayrollService,\n    private snackbar: SnackbarService,\n    private fb: FormBuilder,\n    private router: Router\n  ) {}\n\n  ngOnInit(): void {\n    const currentYear = new Date().getFullYear();\n    const currentMonthIndex = new Date().getMonth();\n    const currentMonthName = this.months[currentMonthIndex];\n\n    this.Form = this.fb.group({\n      year: [currentYear.toString(), Validators.required],\n      month: [currentMonthName, Validators.required],\n    });\n    this.Form.get('year').valueChanges.subscribe(() => {\n      this.getData();\n    });\n    this.getData();\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next(true);\n    this.destroy$.complete();\n  }\n\n  getData() {\n    this.loading = true;\n    this.dataSource = new MatTableDataSource([]);\n    this.dataSource.paginator = this.paginator;\n    this.dataSource.sort = this.sort;\n\n    let params = new HttpParams()\n      .set(\"periodY\", this.Form.value.year);\n\n    this.payrollAPi\n      .getFinanceSalaryStatus(params)\n      .pipe(takeUntil(this.destroy$))\n      .subscribe({\n        next: (res) => {\n          console.log(\"res\", res);\n\n          if (res.statusCode === 302) {\n            this.data = res.entity;\n            console.log(\"Allowances displayed on table\", this.data);\n\n            this.loading = false;\n            this.dataSource = new MatTableDataSource(this.data);\n            this.dataSource.paginator = this.paginator;\n            this.dataSource.sort = this.sort;\n          } else {\n            this.loading = false;\n          }\n        },\n        error: (err) => {\n          this.loading = false;\n          this.notificationAPI.alertWarning(\"Server Error: \" + err.message);\n        },\n        complete: () => {},\n      });\n  }\n  refresh() {\n    this.getData();\n  }\n\n  mngRecord(action: any, record?: any) {\n    let route = \"/erp-hr/payroll/manage-to-finance-payroll\";\n\n    let recordStr = {};\n    if (action === \"Push Payroll To Finance\") {\n      recordStr = {\n        periodY: this.Form.value.year,\n        periodM: this.Form.value.month,\n      };\n      recordStr = JSON.stringify(recordStr);\n    } else {\n      recordStr = JSON.stringify(record);\n    }\n\n    this.router.navigate([route], {\n      queryParams: {\n        action: action,\n        record: recordStr,\n      },\n    });\n  }\n\n  deleteRecord(id: number) {\n    // Swal.fire({\n    //   title: \"Are you sure?\",\n    //   text: \"THIS RECORD WILL BE DELETED PERMANENTLY!!\",\n    //   icon: \"warning\",\n    //   showCancelButton: true,\n    //   confirmButtonColor: \"#3085d6\",\n    //   cancelButtonColor: \"#d33\",\n    //   confirmButtonText: \"Yes, delete it!\",\n    // }).then((result) => {\n    //   if (result.isConfirmed) {\n    //     this.loading = true;\n    //     this.customAllowanceAPI\n    //       .delete(id)\n    //       .pipe(takeUntil(this.destroy$))\n    //       .subscribe({\n    //         next: (res) => {\n    //           if (res.statusCode == 200) {\n    //             this.getData();\n    //             this.loading = false;\n    //             this.notificationAPI.alertSuccess(\n    //               \"RECORD DELETED SUCCESSFULLY\"\n    //             );\n    //           } else {\n    //             this.getData();\n    //             this.loading = false;\n    //             this.notificationAPI.alertWarning(res.message);\n    //           }\n    //         },\n    //         error: (err) => {\n    //           this.loading = false;\n    //           this.notificationAPI.alertSuccess(\"Server Error: \" + err.message);\n    //         },\n    //         complete: () => {},\n    //       });\n    //   }\n    // });\n  }\n\n  input: any;\n  applyFilter(event: Event) {\n    const filterValue = (event.target as HTMLInputElement).value;\n    this.input = filterValue;\n    this.dataSource.filter = filterValue.trim().toLowerCase();\n    if (this.dataSource.paginator) {\n      this.dataSource.paginator.firstPage();\n    }\n  }\n\n  // ****************************************************************************************************************************\n  selectedRows: any[] = [];\n  atleastOneSelected: boolean = false;\n  isAllSelected() {\n    const numSelected = this.selection.selected.length;\n    const numRows = this.dataSource.data.length;\n    return numSelected === numRows;\n  }\n  masterToggle() {\n    if (this.isAllSelected()) {\n      this.selection.clear();\n      return;\n    }\n\n    this.selection.select(...this.dataSource.data);\n  }\n  checkboxLabel(row?: any): string {\n    if (!row) {\n      return `${this.isAllSelected() ? \"deselect\" : \"select\"} all`;\n    }\n    return `${this.selection.isSelected(row) ? \"deselect\" : \"select\"} row ${\n      row.position + 1\n    }`;\n  }\n\n  expSelected() {\n    this.atleastOneSelected = true;\n    this.selectedRows = this.selection.selected;\n\n    console.log(\"this.selectedRows: \", this.selectedRows);\n  }\n\n  hasAccess: boolean = true;\n  processMultipleRows(status: any) {\n    let privilege = \"Validate Expenses\";\n\n    // this.hasAccess = this.accessControlService.hasPrivilege(\"FinanceModule\", [\n    //   privilege,\n    // ]);\n\n    if (this.hasAccess) {\n      Swal.fire({\n    title: '<span style=\"font-size: 20px;\">Enter Verifier Remarks</span>',\n    input: \"textarea\",\n    inputPlaceholder: \"Type your remarks here...\",\n    confirmButtonText: \"Submit\",\n    showCancelButton: true,\n    cancelButtonText: \"Cancel\",\n    icon: \"info\",\n\n    inputValidator: (value) => {\n          if (!value) {\n            return \"Please enter your remarks\";\n          }\n        },\n      }).then((result) => {\n        if (result.isConfirmed) {\n          const verifierRemarks = result.value;\n\n          const processedRows = this.selectedRows.map((element) => {\n            return {\n              id: element.id,\n              status: status,\n              verifierRemarks: verifierRemarks,\n            };\n          });\n\n          console.log(\"LOG: \", processedRows);\n\n          // this.customAllowanceAPI\n          //   .validateBulkAllowances(processedRows)\n          //   .pipe(takeUntil(this.destroy$))\n          //   .subscribe({\n          //     next: (res) => {\n          //       console.log(\"res: \", res);\n          //       if (res.statusCode == 201 || 200 || 302) {\n          //         this.snackbar.showNotification(\n          //           \"snackbar-success\",\n          //           res.message\n          //         );\n\n          //         this.selection = new SelectionModel<any>(true, []);\n          //         this.selection.clear();\n          //       } else {\n          //         this.snackbar.showNotification(\n          //           \"snackbar-danger\",\n          //           res.message\n          //         );\n          //       }\n          //     },\n          //     error: (err) => {\n          //       this.snackbar.showNotification(\"snackbar-danger\", err.message);\n          //     },\n          //     complete: () => {\n          //       this.getData();\n          //     },\n          //   }),\n          //   Subscription;\n        } else {\n          this.selection = new SelectionModel<any>(true, []);\n          this.selection.clear();\n        }\n      });\n    }\n  }\n\n  //************************************************************************************************* */\n  onSubmit() {\n    if (!this.Form.value.year || !this.Form.value.month) {\n      this.notificationAPI.alertWarning(\"Please select both year and month.\");\n      return;\n    }\n\n    const data = {\n      year: this.Form.value.year,\n      month: this.Form.value.month,\n    };\n\n    const serializedData = JSON.stringify(data);\n    console.log(\"Serialized data:\", serializedData);\n    let route = \"administration/payroll/pre-view\";\n    this.router.navigate([route], {\n      queryParams: { additionalData: serializedData, action: \"VIEW\" },\n      skipLocationChange: true,\n    });\n  }\n}\n","<section class=\"content\">\n    <div class=\"content-block\">\n        <div class=\"block-header\">\n            <!-- breadcrumb -->\n            <app-breadcrumb [title]=\"'To Finance'\" [items]=\"['Payroll']\" [active_item]=\"'To Finance'\">\n            </app-breadcrumb>\n        </div>\n\n        <app-gen-widgets></app-gen-widgets>\n\n        <div class=\"row\">\n            <div class=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\">\n                <div class=\"card\">\n\n                    <div class=\"body\">\n                        <div class=\"table-responsive\">\n                            <div class=\"materialTableHeader\">\n                                <div class=\"row\">\n                                    <div class=\"col-8\">\n                                        <ul class=\"header-buttons-left ms-0\">\n                                            <li class=\"dropdown\">\n                                                <h2>To Finance</h2>\n                                            </li>\n                                            <li class=\"dropdown m-l-20\">\n                                                <label for=\"search-input\"><i\n                                                        class=\"material-icons search-icon\">search</i></label>\n                                                <input placeholder=\"Filter...\" type=\"text\" (keyup)=\"applyFilter($event)\"\n                                                    #filter class=\"browser-default search-field\"\n                                                    aria-label=\"Search box\">\n                                            </li>\n                                            <!-- <li>\n                                                <div class=\"m-l-10\" matTooltip=\"ADD\">\n                                                    <button mat-mini-fab color=\"primary\" (click)=\"mngRecord('Add','')\">\n                                                        <mat-icon class=\"col-white\">add</mat-icon>\n                                                    </button>\n                                                </div>\n                                            </li> -->\n                                            <li>\n                                                <div class=\"m-l-10\" matTooltip=\"REFRESH\">\n                                                    <button mat-mini-fab color=\"primary\" (click)=\"refresh()\">\n                                                        <mat-icon class=\"col-white\">refresh</mat-icon>\n                                                    </button>\n                                                </div>\n                                            </li>\n                                            <li *ngIf=\"selection.selected.length > 0\">\n                                                <div class=\"m-l-10\" matTooltip=\"APPROVE\">\n                                                    <button mat-mini-fab color=\"primary\"\n                                                        (click)=\"processMultipleRows('APPROVED')\"\n                                                        class=\"mat-button-custom\">\n                                                        <mat-icon class=\"col-white\">check</mat-icon>\n                                                    </button>\n                                                </div>\n                                            </li>\n                                            <li *ngIf=\"selection.selected.length > 0\">\n                                                <div class=\"m-l-10\" matTooltip=\"REJECT\">\n                                                    <button mat-mini-fab color=\"warn\"\n                                                        (click)=\"processMultipleRows('REJECTED')\"\n                                                        class=\"mat-button-custom\">\n                                                        <mat-icon class=\"col-white\">cancel</mat-icon>\n                                                    </button>\n                                                </div>\n                                            </li>\n                                            <li *ngIf=\"selection.selected.length > 0\">\n                                                <div class=\"m-l-10\" matTooltip=\"RETURN\">\n                                                    <button mat-mini-fab color=\"accent\"\n                                                        (click)=\"processMultipleRows('RETURNED')\"\n                                                        class=\"mat-button-custom\">\n                                                        <mat-icon class=\"col-white\">undo</mat-icon>\n                                                    </button>\n                                                </div>\n                                            </li>\n                                        </ul>\n                                    </div>\n                                    <div class=\"col-4\">\n                                        <ul class=\"header-buttons\">\n                                            <li>\n                                                <div class=\"export-button m-l-10\" matTooltip=\"XLSX\">\n                                                    <img src=\"assets/images/icons/xlsx.png\" alt=\"\"\n                                                        (click)=\"exporter.exportTable('xlsx', {fileName:'assets-list', sheet: 'sheet1'})\" />\n                                                </div>\n                                            </li>\n                                            <li>\n                                                <div class=\"export-button m-l-10\" matTooltip=\"CSV\">\n                                                    <img src=\"assets/images/icons/csv.png\" alt=\"\"\n                                                        (click)=\"exporter.exportTable('csv')\" />\n                                                </div>\n                                            </li>\n                                            <li>\n                                                <div class=\"export-button m-l-10\" matTooltip=\"JSON\">\n                                                    <img src=\"assets/images/icons/json.png\" alt=\"\"\n                                                        (click)=\"exporter.exportTable('json')\" />\n                                                </div>\n                                            </li>\n                                            <li>\n                                                <div class=\"export-button m-l-10\" matTooltip=\"TXT\">\n                                                    <img src=\"assets/images/icons/txt.png\" alt=\"\"\n                                                        (click)=\"exporter.exportTable('txt')\" />\n                                                </div>\n                                            </li>\n                                        </ul>\n                                    </div>\n                                </div>\n                            </div>\n\n                            <div class=\"materialTableHeader mt-2\">\n                                <div class=\"row\">\n                                    <div class=\"col-2\">\n                                        <form [formGroup]=\"Form\">\n                                            <div class=\"row\">\n                                                <div class=\"col-9\">\n                                                    <mat-form-field class=\"example-full-width\" appearance=\"fill\">\n                                                        <mat-label>Year</mat-label>\n                                                        <input matInput formControlName=\"year\" />\n                                                        <mat-error *ngIf=\"\n                                                    Form.get('year').hasError('required')\n                                                  \">\n                                                            Please Enter Year\n                                                        </mat-error>\n                                                    </mat-form-field>\n                                                </div>\n\n                                            </div>\n                                        </form>\n                                    </div>\n                                    <div class=\"col-2\">\n                                        <form [formGroup]=\"Form\">\n                                            <mat-form-field class=\"example-full-width\" appearance=\"fill\">\n                                                <mat-label>Month</mat-label>\n                                                <mat-select formControlName=\"month\">\n                                                    <mat-option *ngFor=\"let month of months\" [value]=\"month\">{{\n                                                        month }}</mat-option>\n                                                </mat-select>\n                                                <mat-error *ngIf=\"Form.get('month').hasError('required')\">Please select\n                                                    a month</mat-error>\n                                            </mat-form-field>\n                                        </form>\n                                    </div>\n\n                                    <div class=\"col-2\">\n                                        <button class=\"mt-2\" mat-raised-button color=\"primary\" (click)=\"mngRecord('Push Payroll To Finance')\">\n                                          <!-- <i class=\"fa fa-send\" aria-hidden=\"true\"></i>SUBMIT -->\n                                          <app-feather-icons [icon]=\"'send'\"\n                                                [class]=\"'tbl-finance-verification'\"></app-feather-icons> PUSH TO FINANCE\n                                        </button>\n                                      </div>\n\n                                </div>\n                            </div>\n\n                            <mat-table #table matTableExporter [dataSource]=\"dataSource\" matSort class=\"mat-cell\"\n                                #exporter=\"matTableExporter\">\n\n                                \n\n                               \n                                <ng-container matColumnDef=\"periodY\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-10\">\n                                        Period Year\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-10\">\n                                        {{ row.periodY }}\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"periodM\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-10\">\n                                        Period Month\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-10\">\n                                        {{ row.periodM }}\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"totalGrosspay\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-10\">\n                                        Total Gross Pay\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-10\">\n                                        {{ row.totalGrosspay }}\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"totalNetpay\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-10\">\n                                        Total Net Pay\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-10\">\n                                        {{ row.totalNetpay }}\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"tranDate\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-10\">\n                                        Transaction Date\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-10\">\n                                        {{ row.tranDate | date : 'short' }}\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"transactionStatus\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-10\">\n                                        Transaction Status\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-10\">\n                                        {{ row.transactionStatus }}\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"financeManagerVerifiedStatus\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-10\">\n                                        Finance Manager Verified Status\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-10\">\n                                        {{ row.financeManagerVerifiedStatus }}\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"seniorFinanceManagerVerifiedStatus\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-10\">\n                                        Senior Finance Manager Verified Status\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-10\">\n                                        {{ row.seniorFinanceManagerVerifiedStatus }}\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"headFinanceAndStrategyVerifiedStatus\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-10\">\n                                        Head of Finance and Strategy Verified Status\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-10\">\n                                        {{ row.headFinanceAndStrategyVerifiedStatus }}\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"managingDirectorAndCEOVerifiedStatus\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-10\">\n                                        Managing Director and CEO Verified Status\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-10\">\n                                        {{ row.managingDirectorAndCEOVerifiedStatus }}\n                                    </mat-cell>\n                                </ng-container>\n                                <ng-container matColumnDef=\"postedTime\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Posted Time\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        {{ row.postedTime | date:'short' }}\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"status\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Status\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row; let i = index\"\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-20\"\n                                        (click)=\"$event.stopPropagation()\">\n                                        <ng-container [ngSwitch]=\"row.status\">\n                                            <button *ngSwitchCase=\"'APPROVED'\"\n                                                class=\"badge badge-solid-green btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-check-circle\"></i>&nbsp;\n                                                {{ row.status }}\n                                            </button>\n                                            <button *ngSwitchCase=\"'REJECTED'\"\n                                                class=\"badge badge-solid-red btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-times-circle\"></i>&nbsp;\n                                                {{ row.status }}\n                                            </button>\n                                            <button *ngSwitchCase=\"'RETURNED'\"\n                                                class=\"badge badge-solid-brown btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-undo-alt\"></i>&nbsp;\n                                                {{ row.status }}\n                                            </button>\n                                            <button *ngSwitchCase=\"'PENDING'\"\n                                                class=\"badge badge-solid-blue btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-exclamation-circle\"></i>&nbsp;\n                                                {{ row.status }}\n                                            </button>\n                                            <button *ngSwitchDefault class=\"badge badge-solid-brown btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-question-circle\"></i>&nbsp;\n                                                {{ row.status }}\n                                            </button>\n                                        </ng-container>\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"verifiedFlag\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Verified\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        <ng-container *ngIf=\"row.verifiedFlag === 'Y'; else notVerified\">\n                                            <button class=\"badge badge-solid-green btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-check\"></i>&nbsp; Verified\n                                            </button>\n                                        </ng-container>\n                                        <ng-template #notVerified>\n                                            <button class=\"badge badge-solid-red btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-times\"></i>&nbsp; Not Verified\n                                            </button>\n                                        </ng-template>\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"deletedFlag\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Deleted\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        <ng-container *ngIf=\"row.deletedFlag === 'Y'; else notDeleted\">\n                                            <button class=\"badge badge-solid-red btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-trash\"></i>&nbsp; Deleted\n                                            </button>\n                                        </ng-container>\n                                        <ng-template #notDeleted>\n                                            <button class=\"badge badge-solid-green btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-check\"></i>&nbsp; Active\n                                            </button>\n                                        </ng-template>\n                                    </mat-cell>\n                                </ng-container>\n\n\n\n\n\n\n\n                                <ng-container matColumnDef=\"action\">\n                                    <mat-header-cell class=\"column-nowrap psl-3 tbl-col-width-per-15 pr-0\"\n                                        *matHeaderCellDef>\n                                        Action\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row; let i = index\"\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-15 pr-0\">\n\n\n                                        <button matTooltip=\"View Payroll Record\" mat-icon-button color=\"primary\" (click)=\"$event.stopPropagation()\"\n                                            (click)=\"mngRecord('View Payroll Record',row)\" class=\"tbl-action-btn\">\n                                            <app-feather-icons [icon]=\"'eye'\" [class]=\"'tbl-fav-eye'\">\n                                            </app-feather-icons>\n                                        </button>\n\n                                        <!-- <button  matTooltip=\"Push Payroll To Finance\" mat-icon-button color=\"primary\"\n                                            (click)=\"$event.stopPropagation()\" (click)=\"mngRecord('Push Payroll To Finance',row)\"\n                                            class=\"tbl-action-btn\">\n                                            <app-feather-icons [icon]=\"'send'\"\n                                                [class]=\"'tbl-finance-verification'\"></app-feather-icons>\n                                        </button> -->\n                                        <!-- \n                                        <button mat-icon-button color=\"primary\" (click)=\"$event.stopPropagation()\"\n                                            (click)=\"lockOrUnlockAccount(row)\" class=\"tbl-action-btn\">\n                                            <mat-icon>{{ row.isAcctActive === 'Y' ? 'lock' : 'lock_open' }}</mat-icon>\n                                        </button> -->\n\n                                        <!-- <button mat-icon-button color=\"accent\" (click)=\"$event.stopPropagation()\"\n                                            (click)=\"deleteRecord(row.id)\" class=\"tbl-action-btn\">\n                                            <app-feather-icons [icon]=\"'trash-2'\" [class]=\"'tbl-fav-delete'\">\n                                            </app-feather-icons>\n                                        </button> -->\n                                    </mat-cell>\n                                </ng-container>\n                                <mat-header-row *matHeaderRowDef=\"displayedColumns\">\n                                </mat-header-row>\n                                <mat-row *matRowDef=\"let row; columns: displayedColumns;\" [style.cursor]=\"'pointer'\"\n                                    matRipple>\n                                </mat-row>\n\n\n                                <tr *matNoDataRow>\n                                    <td colspan=\"{{ displayedColumns.length }}\"> No data matching the filter \"{{ input\n                                        }}\"</td>\n                                </tr>\n                            </mat-table>\n                            <div class=\"m-2 mx-2\" *ngIf=\"loading || downloadLoading\">\n                                <mat-progress-bar color=\"primary\" mode=\"indeterminate\">\n                                </mat-progress-bar>\n                            </div>\n                            <div *ngIf=\"loading\" class=\"tbl-spinner\">\n                                <mat-progress-spinner color=\"primary\" [diameter]=\"40\" mode=\"indeterminate\">\n                                </mat-progress-spinner>\n                            </div>\n\n                            <mat-paginator [pageSize]=\"10\" [pageSizeOptions]=\"[2, 5, 10, 20, 30, 40, 50, 100]\"\n                                aria-label=\"Select page of users\">\n                            </mat-paginator>\n\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</section>","import { HttpParams } from \"@angular/common/http\";\nimport { Component, OnInit, ViewChild } from \"@angular/core\";\nimport { FormGroup, FormBuilder } from \"@angular/forms\";\nimport { MatDialog, MatDialogConfig } from \"@angular/material/dialog\";\nimport { MatPaginator } from \"@angular/material/paginator\";\nimport { MatSort } from \"@angular/material/sort\";\nimport { MatTableDataSource } from \"@angular/material/table\";\nimport { Router, ActivatedRoute } from \"@angular/router\";\nimport { Subject, takeUntil, Subscription } from \"rxjs\";\nimport { TokenStorageService } from \"src/app/core/service/token-storage.service\";\nimport { SalariesService } from \"src/app/erp-finance/data/services/salaries.service\";\nimport { AccountingJournalTransactionsComponent } from \"src/app/erp-finance/modules/finance-management/transactions/dialogs/accounting-journal-transactions/accounting-journal-transactions.component\";\nimport { PayrollService } from \"src/app/erp-hr/data/payroll-services/payroll.service\";\nimport { AccessControlService } from \"src/app/erp-procurement/data/services/_AccessControlService.service\";\nimport { NotificationService } from \"src/app/erp-procurement/data/services/notification.service\";\nimport { SnackbarService } from \"src/app/shared/services/snackbar.service\";\nimport Swal from \"sweetalert2\";\n\n@Component({\n  selector: \"app-manage-to-finance\",\n  templateUrl: \"./manage-to-finance.component.html\",\n  styleUrls: [\"./manage-to-finance.component.sass\"],\n})\nexport class ManageToFinanceComponent implements OnInit {\n  displayedColumns: string[] = [\n    \"employeeName\",\n    \"employeeAc\",\n    \"empIdno\",\n    \"empGrosspay\",\n    \"empPaye\",\n    \"empNhif\",\n    \"empNssf\",\n    \"empHouselevy\",\n    \"empPension\",\n    \"empGratuity\",\n    \"empStaffloan\",\n    \"empNetpay\",\n    \"action\",\n  ];\n\n  //   {\n  //     \"payrollCircleCode\": \"dc8Nr20240527\",\n  //     \"openingDate\": \"2024-05-27T14:22:27.855483\",\n  //     \"activeEmployees\": 0,\n  //     \"totalOpeningGrossPay\": 0,\n  //     \"totalOpeningDeductions\": 0,\n  //     \"totalOpeningAllowances\": 0,\n  //     \"periodY\": 2024,\n  //     \"periodM\": \"May\",\n  //     \"closingDate\": \"2024-05-27T15:39:10.46625\",\n  //     \"closurePaidEmployees\": 2,\n  //     \"totalClosingGrossPay\": 180000,\n  //     \"totalCLosingDeductions\": 51746.7,\n  //     \"totalCLosingAllowances\": 0,\n  //     \"isPayslipOpen\": \"Y\",\n  //     \"payslipOpenDate\": \"2024-05-27T14:35:43.81308\",\n  //     \"payslipOpenBy\": \"KBUser\",\n  //     \"openBy\": \"KBUser\",\n  //     \"closedBy\": \"KBUser\",\n  //     \"status\": \"CLOSED\"\n  // }\n  dataSource = new MatTableDataSource<any>([]);\n  @ViewChild(MatPaginator) paginator!: MatPaginator;\n  @ViewChild(MatSort) sort!: MatSort;\n\n  // define the needed variables\n  showForm = false;\n  pageFunction = \"Add\";\n  mngForm!: FormGroup;\n  currentUser: any;\n  formData: any;\n  destroy$: Subject<boolean> = new Subject<boolean>();\n\n  downloadLoading: boolean = false;\n  id: any;\n  hideSubmit = false;\n  showApprovals = false;\n\n  // ****************************************************************************************************************************\n  constructor(\n    private fb: FormBuilder,\n    private router: Router,\n    private activatedRoute: ActivatedRoute,\n    private tokenStorageService: TokenStorageService,\n    private snackbar: SnackbarService,\n    private route: ActivatedRoute,\n    private notificationAPI: NotificationService,\n    private dialog: MatDialog,\n    private accessControlService: AccessControlService,\n    private payrollService: PayrollService\n  ) {\n    this.currentUser = this.tokenStorageService.getUser().username;\n  }\n\n  // ****************************************************************************************************************************\n  //define actions on component initiaalization\n  ngOnInit(): void {\n    this.showForm = true;\n\n    this.route.queryParams.subscribe((params) => {\n      console.log(\"res\", params);\n\n      if (params.hasOwnProperty(\"action\")) {\n        const action = params[\"action\"];\n        this.pageFunction = action;\n        // Parse the JSON string back into an object\n        this.formData = params[\"record\"] ? JSON.parse(params[\"record\"]) : null;\n      }\n    });\n\n    if (this.pageFunction === \"View Payroll Record\") {\n      this.showApprovals = false;\n      this.displayedColumns = [\n        \"employeeName\",\n        \"employeeAc\",\n        \"empIdno\",\n        \"empGrosspay\",\n        \"empPaye\",\n        \"empNhif\",\n        \"empNssf\",\n        \"empHouselevy\",\n        \"empPension\",\n        \"empGratuity\",\n        \"empStaffloan\",\n        \"empNetpay\",\n        \"action\",\n      ];\n\n      this.showPayrollDetails();\n    }\n\n    if (this.pageFunction === \"Push Payroll To Finance\") {\n      this.showApprovals = true;\n      this.displayedColumns = [\n        \"payrollCircleCode\",\n        \"period\",\n        \"openingDate\",\n        \"closingDate\",\n        \"activeEmployees\",\n        \"closurePaidEmployees\",\n        \"totalOpeningGrossPay\",\n        \"totalClosingGrossPay\",\n        \"totalOpeningDeductions\",\n        \"totalClosingDeductions\",\n        \"totalOpeningAllowances\",\n        \"totalClosingAllowances\",\n        \"status\",\n      ];\n\n      this.getDataByYearAndMonth();\n    }\n  }\n\n  // ****************************************************************************************************************************\n\n  input: any;\n  applyFilter(event: Event) {\n    const filterValue = (event.target as HTMLInputElement).value;\n    this.input = filterValue;\n    this.dataSource.filter = filterValue.trim().toLowerCase();\n    if (this.dataSource.paginator) {\n      this.dataSource.paginator.firstPage();\n    }\n  }\n\n  refresh() {\n    this.getDataByYearAndMonth();\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next(true);\n    this.destroy$.complete();\n  }\n\n  //this.approver = \"Hr Payroll Verifier\";\n  approver = \"Senior Hr Payroll Verifier\";\n  isFinal = \"Y\";\n\n  dataArray: any[] = [];\n  getDataByYearAndMonth() {\n    let params = new HttpParams()\n      .set(\"periodY\", this.formData.periodY.toString())\n      .set(\"period_m\", this.formData.periodM.toString())\n      .set(\"status\", \"Approved\")\n      .set(\"is_final\", this.isFinal)\n      .set(\"approver\", this.approver);\n    this.payrollService\n      .getPayrollsData(params)\n      .pipe(takeUntil(this.destroy$))\n      .subscribe({\n        next: (res) => {\n          console.log(\"res :\", res);\n\n          if (res.entity) {\n            this.dataSource = new MatTableDataSource(res.entity);\n            this.dataSource.paginator = this.paginator;\n            this.dataSource.sort = this.sort;\n          } else {\n            this.snackbar.showNotification(\"snackbar-danger\", res.message);\n          }\n        },\n        error: (err) => {\n          this.snackbar.showNotification(\"snackbar-danger\", err.message);\n        },\n        complete: () => {},\n      }),\n      Subscription;\n  }\n\n  showPayrollDetails() {\n    this.dataSource = new MatTableDataSource(\n      this.formData.salariespaymentdetails\n    );\n    this.dataSource.paginator = this.paginator;\n    this.dataSource.sort = this.sort;\n  }\n\n  //********************************************************************************** */\n  showRecordDetails(row) {\n    // Generate the HTML content for the SweetAlert modal\n    const content = `\n    <div style=\"font-family: Arial, sans-serif; text-align: left;\">\n      <table style=\"width: 100%;\">\n        <tr>\n          <td><strong>Payroll Circle:</strong></td>\n          <td>${row.payrollCircle}</td>\n        </tr>\n        <tr>\n          <td><strong>Period:</strong></td>\n          <td>${row.periodM} ${row.periodY}</td>\n        </tr>\n        <tr>\n          <td><strong>Employee Name:</strong></td>\n          <td>${row.employeeName}</td>\n        </tr>\n        <tr>\n          <td><strong>Employee AC:</strong></td>\n          <td>${row.employeeAc}</td>\n        </tr>\n        <tr>\n          <td><strong>Employee ID No:</strong></td>\n          <td>${row.empIdno}</td>\n        </tr>\n        <tr>\n          <td><strong>KRA PIN:</strong></td>\n          <td>${row.kraPin}</td>\n        </tr>\n        <tr>\n          <td><strong>NHIF No:</strong></td>\n          <td>${row.nhifNo}</td>\n        </tr>\n        <tr>\n          <td><strong>NSSF No:</strong></td>\n          <td>${row.nssfNo}</td>\n        </tr>\n        <tr>\n          <td><strong>Employee Gross Pay:</strong></td>\n          <td>${row.empGrosspay}</td>\n        </tr>\n        <tr>\n          <td><strong>Employee PAYE:</strong></td>\n          <td>${row.empPaye}</td>\n        </tr>\n        <tr>\n          <td><strong>Employee NHIF:</strong></td>\n          <td>${row.empNhif}</td>\n        </tr>\n        <tr>\n          <td><strong>Employee NSSF:</strong></td>\n          <td>${row.nssfEmployee}</td>\n        </tr>\n        <tr>\n          <td><strong>Employee House Levy:</strong></td>\n          <td>${row.employeeHouseLevy}</td>\n        </tr>\n        <tr>\n          <td><strong>Employee Pension:</strong></td>\n          <td>${row.pensionEmployee}</td>\n        </tr>\n        <tr>\n          <td><strong>Employee Gratuity:</strong></td>\n          <td>${row.empGratuity}</td>\n        </tr>\n        <tr>\n          <td><strong>Employee Staff Loan:</strong></td>\n          <td>${row.empStaffloan}</td>\n        </tr>\n        <tr>\n          <td><strong>Employee Net Pay:</strong></td>\n          <td>${row.empNetpay}</td>\n        </tr>\n      </table>\n    </div>\n  `;\n\n    // Display the SweetAlert modal with custom styling\n    Swal.fire({\n      title: \"Record Details\",\n      html: content,\n      icon: \"info\",\n      confirmButtonText: \"Close\",\n    });\n  }\n\n  //********************************************************************************************************************** */\n  //APPROVALS\n  //********************************************************************************************************************** */\n\n  loading: boolean = false;\n  pushPayrollToFinance() {\n    if (this.dataSource.data.length > 0) {\n      Swal.fire({\n        title: \"Are you sure?\",\n        text: `Do you want to send this payroll for this period? Year: ${this.formData.periodY}, Month: ${this.formData.periodM}`,\n        icon: \"warning\",\n        showCancelButton: true,\n        confirmButtonText: \"Yes, send it!\",\n        cancelButtonText: \"No, cancel!\",\n      }).then((result) => {\n        if (result.isConfirmed) {\n          this.loading = true;\n          let params = new HttpParams()\n            .set(\"periodY\", this.formData.periodY.toString())\n            .set(\"periodM\", this.formData.periodM.toString());\n          this.payrollService.sentToFinance(params).subscribe(\n            (res) => {\n              console.log(\"RES\", res);\n              this.loading = false;\n              if (res.statusCode === 200) {\n                Swal.fire({\n                  icon: \"success\",\n                  title: \"Success!\",\n                  text: res.message,\n                });\n                this.router.navigate([\"/erp-hr/payroll/to-finance-payroll\"]);\n              } else {\n                Swal.fire({\n                  icon: \"warning\",\n                  title: \"Warning!\",\n                  text: res.message,\n                });\n              }\n            },\n            (error) => {\n              console.error(\"Error sending payroll:\", error);\n              Swal.fire({\n                icon: \"error\",\n                title: \"Failed!\",\n                text: \"Failed to send payroll: \" + error.message,\n              });\n              this.loading = false;\n            }\n          );\n        }\n      });\n    } else {\n      this.snackbar.showNotification(\n        \"snackbar-danger\",\n        \"No data to push for this Payroll!!\"\n      );\n    }\n  }\n}\n// ****************************************************************************************************************************\n\n// ****************************************************************************************************************************\n","<section class=\"content font\">\n    <div class=\"content-block\">\n        <div class=\"block-header\">\n            <!-- breadcrumb -->\n            <app-breadcrumb [title]=\"'Payroll Details'\" [items]=\"['Payroll']\" [active_item]=\"'Payroll Details'\">\n            </app-breadcrumb>\n\n            <div class=\"row\">\n\n                <div class=\"col-xs-12 col-sm-12 col-md-12 col-lg-12 mt-2\"\n                    *ngIf=\"pageFunction === 'View Payroll Record'\">\n                    <div class=\"card\">\n                        <div class=\"card bg-color\">\n                            <div class=\"chat\">\n                                <div class=\"row chat-header clearfix\">\n\n                                    <div class=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\n                                        <div class=\"row\">\n                                            <!--  Gross Pay -->\n                                            <div class=\"col-lg-2 col-md-4 col-sm-12 col-xs-12\">\n                                                <div class=\"chat-about\">\n                                                    <div class=\"chat-with\"> Gross Pay</div>\n                                                    <div class=\"chat-num-messages mt-2\">\n                                                        <div class=\"badge badge-solid-yellow\"\n                                                            style=\"color: #fff; background-color: #50420d\">{{\n                                                            formData.totalGrosspay | currency: 'Ksh' }}</div>\n                                                    </div>\n                                                </div>\n                                            </div>\n\n                                            <!--  Paye -->\n                                            <div class=\"col-lg-2 col-md-4 col-sm-12 col-xs-12\">\n                                                <div class=\"chat-about\">\n                                                    <div class=\"chat-with\"> Paye</div>\n                                                    <div class=\"chat-num-messages mt-2\">\n                                                        <div class=\"badge badge-solid-grey\"\n                                                            style=\"color: #fff; background-color: #95a5a6\">{{\n                                                            formData.totalPaye | currency: 'Ksh' }}</div>\n                                                    </div>\n                                                </div>\n                                            </div>\n\n                                            <!--  NHIF -->\n                                            <div class=\"col-lg-2 col-md-4 col-sm-12 col-xs-12\">\n                                                <div class=\"chat-about\">\n                                                    <div class=\"chat-with\"> NHIF</div>\n                                                    <div class=\"chat-num-messages mt-2\">\n                                                        <div class=\"badge badge-solid-light-blue\"\n                                                            style=\"color: #fff; background-color: #3498db\">{{\n                                                            formData.totalNhif | currency: 'Ksh' }}</div>\n                                                    </div>\n                                                </div>\n                                            </div>\n\n                                            <!--  Employee NSSF -->\n                                            <div class=\"col-lg-2 col-md-4 col-sm-12 col-xs-12\">\n                                                <div class=\"chat-about\">\n                                                    <div class=\"chat-with\"> Employee NSSF</div>\n                                                    <div class=\"chat-num-messages mt-2\">\n                                                        <div class=\"badge badge-solid-light-pink\"\n                                                            style=\"color: #fff; background-color: #e74c3c\">{{\n                                                            formData.totalEmployeeNssf | currency: 'Ksh' }}</div>\n                                                    </div>\n                                                </div>\n                                            </div>\n\n                                            <!--  Employer NSSF -->\n                                            <div class=\"col-lg-2 col-md-4 col-sm-12 col-xs-12\">\n                                                <div class=\"chat-about\">\n                                                    <div class=\"chat-with\"> Employer NSSF</div>\n                                                    <div class=\"chat-num-messages mt-2\">\n                                                        <div class=\"badge badge-solid-light-pink\"\n                                                            style=\"color: #fff; background-color: #e74c3c\">{{\n                                                            formData.totalEmployerNssf | currency: 'Ksh' }}</div>\n                                                    </div>\n                                                </div>\n                                            </div>\n\n                                            <!--  Employee House Levy -->\n                                            <div class=\"col-lg-2 col-md-4 col-sm-12 col-xs-12\">\n                                                <div class=\"chat-about\">\n                                                    <div class=\"chat-with\"> Employee H.Levy</div>\n                                                    <div class=\"chat-num-messages mt-2\">\n                                                        <div class=\"badge badge-solid-light-grey\"\n                                                            style=\"color: #fff; background-color: #95a5a6\">{{\n                                                            formData.totalEmployeeHouseLevy | currency: 'Ksh' }}\n                                                        </div>\n                                                    </div>\n                                                </div>\n                                            </div>\n\n                                            <!--  Employer House Levy -->\n                                            <div class=\"col-lg-2 col-md-4 col-sm-12 col-xs-12\">\n                                                <div class=\"chat-about\">\n                                                    <div class=\"chat-with\"> Employer H.Levy</div>\n                                                    <div class=\"chat-num-messages mt-2\">\n                                                        <div class=\"badge badge-solid-light-grey\"\n                                                            style=\"color: #fff; background-color: #95a5a6\">{{\n                                                            formData.totalEmployerHouseLevy | currency: 'Ksh' }}\n                                                        </div>\n                                                    </div>\n                                                </div>\n                                            </div>\n\n                                            <!--  Employee Pension -->\n                                            <div class=\"col-lg-2 col-md-4 col-sm-12 col-xs-12\">\n                                                <div class=\"chat-about\">\n                                                    <div class=\"chat-with\"> Employee Pension</div>\n                                                    <div class=\"chat-num-messages mt-2\">\n                                                        <div class=\"badge badge-solid-dark-blue\"\n                                                            style=\"color: #fff; background-color: #34495e\">{{\n                                                            formData.totalEmployeePension | currency: 'Ksh' }}</div>\n                                                    </div>\n                                                </div>\n                                            </div>\n\n                                            <!--  Employee Pension Voluntary -->\n                                            <div class=\"col-lg-2 col-md-4 col-sm-12 col-xs-12\">\n                                                <div class=\"chat-about\">\n                                                    <div class=\"chat-with\"> Voluntary Pension </div>\n                                                    <div class=\"chat-num-messages mt-2\">\n                                                        <div class=\"badge badge-solid-dark-blue\"\n                                                            style=\"color: #fff; background-color: #34495e\">{{\n                                                            formData.totalEmployeePensionVoluntary | currency: 'Ksh'\n                                                            }}\n                                                        </div>\n                                                    </div>\n                                                </div>\n                                            </div>\n\n                                            <!--  Employer Pension -->\n                                            <div class=\"col-lg-2 col-md-4 col-sm-12 col-xs-12\">\n                                                <div class=\"chat-about\">\n                                                    <div class=\"chat-with\"> Employer Pension</div>\n                                                    <div class=\"chat-num-messages mt-2\">\n                                                        <div class=\"badge badge-solid-dark-blue\"\n                                                            style=\"color: #fff; background-color: #34495e\">{{\n                                                            formData.totalEmployerPension | currency: 'Ksh' }}</div>\n                                                    </div>\n                                                </div>\n                                            </div>\n\n                                            <!--  Gratuity -->\n                                            <div class=\"col-lg-2 col-md-4 col-sm-12 col-xs-12\">\n                                                <div class=\"chat-about\">\n                                                    <div class=\"chat-with\"> Gratuity</div>\n                                                    <div class=\"chat-num-messages mt-2\">\n                                                        <div class=\"badge badge-solid-dark-pink\"\n                                                            style=\"color: #fff; background-color: #d35400\">{{\n                                                            formData.totalGratuity | currency: 'Ksh' }}</div>\n                                                    </div>\n                                                </div>\n                                            </div>\n\n                                            <!--  Staff Loan -->\n                                            <div class=\"col-lg-2 col-md-4 col-sm-12 col-xs-12\">\n                                                <div class=\"chat-about\">\n                                                    <div class=\"chat-with\"> Staff Loan</div>\n                                                    <div class=\"chat-num-messages mt-2\">\n                                                        <div class=\"badge badge-solid-dark-grey\"\n                                                            style=\"color: #fff; background-color: #2c3e50\">{{\n                                                            formData.totalStaffloan | currency: 'Ksh' }}</div>\n                                                    </div>\n                                                </div>\n                                            </div>\n\n                                            <!--  Net Pay -->\n                                            <div class=\"col-lg-2 col-md-4 col-sm-12 col-xs-12\">\n                                                <div class=\"chat-about\">\n                                                    <div class=\"chat-with\"> Net Pay</div>\n                                                    <div class=\"chat-num-messages mt-2\">\n                                                        <div class=\"badge badge-solid-white\"\n                                                            style=\"color: #fff; background-color: #146b79\">{{\n                                                            formData.totalNetpay | currency: 'Ksh' }}</div>\n                                                    </div>\n                                                </div>\n                                            </div>\n                                            <!-- Payroll Circle -->\n                                            <div class=\"col-lg-2 col-md-4 col-sm-12 col-xs-12\">\n                                                <div class=\"chat-about\">\n                                                    <div class=\"chat-with\">Payroll Circle</div>\n                                                    <div class=\"chat-num-messages mt-2\">\n                                                        <div class=\"badge badge-solid-light-green\"\n                                                            style=\"color: #fff; background-color: #2ecc71\">{{\n                                                            formData.payrollCircle }}</div>\n                                                    </div>\n                                                </div>\n                                            </div>\n\n                                            <!-- Period -->\n                                            <div class=\"col-lg-2 col-md-4 col-sm-12 col-xs-12\">\n                                                <div class=\"chat-about\">\n                                                    <div class=\"chat-with\">Period</div>\n                                                    <div class=\"chat-num-messages mt-2\">\n                                                        <div class=\"badge badge-solid-dark-purple\"\n                                                            style=\"color: #fff; background-color: #8e44ad\">{{\n                                                            formData.periodM }} {{ formData.periodY }}</div>\n                                                    </div>\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </div>\n\n\n\n                                </div>\n\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n                <div class=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\">\n                    <div class=\"card\">\n                        <div class=\"body\">\n                            <div class=\"table-responsive mx-1\">\n                                <div class=\"materialTableHeader\">\n                                    <div class=\"row\">\n                                        <div class=\"col-7\">\n                                            <ul class=\"header-buttons-left ms-0\">\n                                                <li class=\"dropdown\">\n                                                    <h2>{{ pageFunction }}</h2>\n                                                </li>\n                                                <li class=\"dropdown m-l-20\">\n                                                    <label for=\"search-input\"><i\n                                                            class=\"material-icons search-icon\">search</i></label>\n                                                    <input placeholder=\"Filter...\" type=\"text\"\n                                                        (keyup)=\"applyFilter($event)\" #filter\n                                                        class=\"browser-default search-field\" aria-label=\"Search box\" />\n                                                </li>\n\n                                                <li *ngIf=\"pageFunction === 'Push Payroll To Finance'\">\n                                                    <div class=\"m-l-10\" matTooltip=\"Push Payroll To Finance\">\n                                                        <button mat-mini-fab color=\"primary\"\n                                                            (click)=\"pushPayrollToFinance()\" class=\"mat-button-custom\">\n                                                            <mat-icon class=\"col-white\">check</mat-icon>\n                                                        </button>\n                                                    </div>\n                                                </li>\n\n\n                                                <li>\n                                                    <div class=\"m-l-10\" matTooltip=\"REFRESH\">\n                                                        <button mat-mini-fab color=\"primary\" (click)=\"refresh()\">\n                                                            <mat-icon class=\"col-white\">refresh</mat-icon>\n                                                        </button>\n                                                    </div>\n                                                </li>\n                                            </ul>\n                                        </div>\n\n                                        <div class=\"col-5\">\n                                            <ul class=\"header-buttons\">\n                                                <li>\n                                                    <div class=\"export-button m-l-10\" matTooltip=\"XLSX\">\n                                                        <img src=\"assets/images/icons/xlsx.png\" alt=\"\" (click)=\"\n                                exporter.exportTable('xlsx', {\n                                  fileName: 'Suppliers-list',\n                                  sheet: 'sheet1'\n                                })\n                              \" />\n                                                    </div>\n                                                </li>\n                                                <li>\n                                                    <div class=\"export-button m-l-10\" matTooltip=\"CSV\">\n                                                        <img src=\"assets/images/icons/csv.png\" alt=\"\"\n                                                            (click)=\"exporter.exportTable('csv')\" />\n                                                    </div>\n                                                </li>\n                                                <li>\n                                                    <div class=\"export-button m-l-10\" matTooltip=\"JSON\">\n                                                        <img src=\"assets/images/icons/json.png\" alt=\"\"\n                                                            (click)=\"exporter.exportTable('json')\" />\n                                                    </div>\n                                                </li>\n                                                <li>\n                                                    <div class=\"export-button m-l-10\" matTooltip=\"TXT\">\n                                                        <img src=\"assets/images/icons/txt.png\" alt=\"\"\n                                                            (click)=\"exporter.exportTable('txt')\" />\n                                                    </div>\n                                                </li>\n                                            </ul>\n                                        </div>\n                                    </div>\n                                </div>\n\n                                <!-- Table Definition -->\n                                <mat-table #table matTableExporter [dataSource]=\"dataSource\" matSort class=\"mat-cell\"\n                                    #exporter=\"matTableExporter\">\n\n\n                                    <ng-container *ngIf=\"pageFunction === 'View Payroll Record'\">\n                                        <!-- Payroll Circle -->\n                                        <ng-container matColumnDef=\"payrollCircle\">\n                                            <mat-header-cell *matHeaderCellDef mat-sort-header\n                                                class=\"column-nowrap psl-2 tbl-col-width-per-9 pr-3\">\n                                                Payroll Circle\n                                            </mat-header-cell>\n                                            <mat-cell *matCellDef=\"let row\"\n                                                class=\"column-nowrap psl-2 tbl-col-width-per-9 pr-3\">\n                                                {{ row.payrollCircle }}\n                                            </mat-cell>\n                                        </ng-container>\n\n                                        <!-- Period -->\n                                        <ng-container matColumnDef=\"period\">\n                                            <mat-header-cell *matHeaderCellDef mat-sort-header\n                                                class=\"column-nowrap psl-2 tbl-col-width-per-9 pr-3\">\n                                                Period\n                                            </mat-header-cell>\n                                            <mat-cell *matCellDef=\"let row\"\n                                                class=\"column-nowrap psl-2 tbl-col-width-per-9 pr-3\">\n                                                {{ row.periodM }} {{ row.periodY }}\n                                            </mat-cell>\n                                        </ng-container>\n\n                                        <!-- Employee Name -->\n                                        <ng-container matColumnDef=\"employeeName\">\n                                            <mat-header-cell *matHeaderCellDef mat-sort-header\n                                                class=\"column-nowrap psl-2 tbl-col-width-per-9 pr-3\">\n                                                Employee Name\n                                            </mat-header-cell>\n                                            <mat-cell *matCellDef=\"let row\"\n                                                class=\"column-nowrap psl-2 tbl-col-width-per-9 pr-3\">\n                                                {{ row.employeeName }}\n                                            </mat-cell>\n                                        </ng-container>\n\n                                        <!-- Employee Ac -->\n                                        <ng-container matColumnDef=\"employeeAc\">\n                                            <mat-header-cell *matHeaderCellDef mat-sort-header\n                                                class=\"column-nowrap psl-2 tbl-col-width-per-9 pr-3\">\n                                                Employee Ac\n                                            </mat-header-cell>\n                                            <mat-cell *matCellDef=\"let row\"\n                                                class=\"column-nowrap psl-2 tbl-col-width-per-9 pr-3\">\n                                                {{ row.employeeAc }}\n                                            </mat-cell>\n                                        </ng-container>\n\n                                        <!-- Emp Idno -->\n                                        <ng-container matColumnDef=\"empIdno\">\n                                            <mat-header-cell *matHeaderCellDef mat-sort-header\n                                                class=\"column-nowrap psl-2 tbl-col-width-per-9 pr-3\">\n                                                Emp Idno\n                                            </mat-header-cell>\n                                            <mat-cell *matCellDef=\"let row\"\n                                                class=\"column-nowrap psl-2 tbl-col-width-per-9 pr-3\">\n                                                {{ row.empIdno }}\n                                            </mat-cell>\n                                        </ng-container>\n\n                                        <!-- Kra Pin -->\n                                        <ng-container matColumnDef=\"kraPin\">\n                                            <mat-header-cell *matHeaderCellDef mat-sort-header\n                                                class=\"column-nowrap psl-2 tbl-col-width-per-9 pr-3\">\n                                                Kra Pin\n                                            </mat-header-cell>\n                                            <mat-cell *matCellDef=\"let row\"\n                                                class=\"column-nowrap psl-2 tbl-col-width-per-9 pr-3\">\n                                                {{ row.kraPin }}\n                                            </mat-cell>\n                                        </ng-container>\n\n                                        <!-- Nhif No -->\n                                        <ng-container matColumnDef=\"nhifNo\">\n                                            <mat-header-cell *matHeaderCellDef mat-sort-header\n                                                class=\"column-nowrap psl-2 tbl-col-width-per-9 pr-3\">\n                                                Nhif No\n                                            </mat-header-cell>\n                                            <mat-cell *matCellDef=\"let row\"\n                                                class=\"column-nowrap psl-2 tbl-col-width-per-9 pr-3\">\n                                                {{ row.nhifNo }}\n                                            </mat-cell>\n                                        </ng-container>\n\n                                        <!-- Nssf No -->\n                                        <ng-container matColumnDef=\"nssfNo\">\n                                            <mat-header-cell *matHeaderCellDef mat-sort-header\n                                                class=\"column-nowrap psl-2 tbl-col-width-per-9 pr-3\">\n                                                Nssf No\n                                            </mat-header-cell>\n                                            <mat-cell *matCellDef=\"let row\"\n                                                class=\"column-nowrap psl-2 tbl-col-width-per-9 pr-3\">\n                                                {{ row.nssfNo }}\n                                            </mat-cell>\n                                        </ng-container>\n\n                                        <!-- Emp Grosspay -->\n                                        <ng-container matColumnDef=\"empGrosspay\">\n                                            <mat-header-cell *matHeaderCellDef mat-sort-header\n                                                class=\"column-nowrap psl-2 tbl-col-width-per-9 pr-3\">\n                                                Emp Grosspay\n                                            </mat-header-cell>\n                                            <mat-cell *matCellDef=\"let row\"\n                                                class=\"column-nowrap psl-2 tbl-col-width-per-9 pr-3\">\n                                                {{ row.empGrosspay | currency : \"Ksh\" }}\n                                            </mat-cell>\n                                        </ng-container>\n\n                                        <!-- Emp Paye -->\n                                        <ng-container matColumnDef=\"empPaye\">\n                                            <mat-header-cell *matHeaderCellDef mat-sort-header\n                                                class=\"column-nowrap psl-2 tbl-col-width-per-9 pr-3\">\n                                                Emp Paye\n                                            </mat-header-cell>\n                                            <mat-cell *matCellDef=\"let row\"\n                                                class=\"column-nowrap psl-2 tbl-col-width-per-9 pr-3\">\n                                                {{ row.empPaye | currency : \"Ksh\" }}\n                                            </mat-cell>\n                                        </ng-container>\n\n                                        <!-- Emp Nhif -->\n                                        <ng-container matColumnDef=\"empNhif\">\n                                            <mat-header-cell *matHeaderCellDef mat-sort-header\n                                                class=\"column-nowrap psl-2 tbl-col-width-per-9 pr-3\">\n                                                Emp Nhif\n                                            </mat-header-cell>\n                                            <mat-cell *matCellDef=\"let row\"\n                                                class=\"column-nowrap psl-2 tbl-col-width-per-9 pr-3\">\n                                                {{ row.empNhif | currency : \"Ksh\" }}\n                                            </mat-cell>\n                                        </ng-container>\n\n                                        <!-- Emp Nssf -->\n                                        <ng-container matColumnDef=\"empNssf\">\n                                            <mat-header-cell *matHeaderCellDef mat-sort-header\n                                                class=\"column-nowrap psl-2 tbl-col-width-per-9 pr-3\">\n                                                Emp Nssf\n                                            </mat-header-cell>\n                                            <mat-cell *matCellDef=\"let row\"\n                                                class=\"column-nowrap psl-2 tbl-col-width-per-9 pr-3\">\n                                                {{ row.nssfEmployee | currency : \"Ksh\" }}\n                                            </mat-cell>\n                                        </ng-container>\n\n                                        <!-- Emp Houselevy -->\n                                        <ng-container matColumnDef=\"empHouselevy\">\n                                            <mat-header-cell *matHeaderCellDef mat-sort-header\n                                                class=\"column-nowrap psl-2 tbl-col-width-per-9 pr-3\">\n                                                Emp Houselevy\n                                            </mat-header-cell>\n                                            <mat-cell *matCellDef=\"let row\"\n                                                class=\"column-nowrap psl-2 tbl-col-width-per-9 pr-3\">\n                                                {{ row.employeeHouseLevy | currency : \"Ksh\" }}\n                                            </mat-cell>\n                                        </ng-container>\n\n                                        <!-- Emp Pension -->\n                                        <ng-container matColumnDef=\"empPension\">\n                                            <mat-header-cell *matHeaderCellDef mat-sort-header\n                                                class=\"column-nowrap psl-2 tbl-col-width-per-9 pr-3\">\n                                                Emp Pension\n                                            </mat-header-cell>\n                                            <mat-cell *matCellDef=\"let row\"\n                                                class=\"column-nowrap psl-2 tbl-col-width-per-9 pr-3\">\n                                                {{ row.pensionEmployee | currency : \"Ksh\" }}\n                                            </mat-cell>\n                                        </ng-container>\n\n                                        <!-- Emp Gratuity -->\n                                        <ng-container matColumnDef=\"empGratuity\">\n                                            <mat-header-cell *matHeaderCellDef mat-sort-header\n                                                class=\"column-nowrap psl-2 tbl-col-width-per-9 pr-3\">\n                                                Emp Gratuity\n                                            </mat-header-cell>\n                                            <mat-cell *matCellDef=\"let row\"\n                                                class=\"column-nowrap psl-2 tbl-col-width-per-9 pr-3\">\n                                                {{ row.empGratuity | currency : \"Ksh\" }}\n                                            </mat-cell>\n                                        </ng-container>\n\n                                        <!-- Emp Staffloan -->\n                                        <ng-container matColumnDef=\"empStaffloan\">\n                                            <mat-header-cell *matHeaderCellDef mat-sort-header\n                                                class=\"column-nowrap psl-2 tbl-col-width-per-9 pr-3\">\n                                                Emp Staffloan\n                                            </mat-header-cell>\n                                            <mat-cell *matCellDef=\"let row\"\n                                                class=\"column-nowrap psl-2 tbl-col-width-per-9 pr-3\">\n                                                {{ row.empStaffloan | currency : \"Ksh\" }}\n                                            </mat-cell>\n                                        </ng-container>\n\n                                        <!-- Emp Netpay -->\n                                        <ng-container matColumnDef=\"empNetpay\">\n                                            <mat-header-cell *matHeaderCellDef mat-sort-header\n                                                class=\"column-nowrap psl-2 tbl-col-width-per-9 pr-3\">\n                                                Emp Netpay\n                                            </mat-header-cell>\n                                            <mat-cell *matCellDef=\"let row\"\n                                                class=\"column-nowrap psl-2 tbl-col-width-per-9 pr-3\">\n                                                {{ row.empNetpay | currency : \"Ksh\" }}\n                                            </mat-cell>\n                                        </ng-container>\n\n                                        <ng-container matColumnDef=\"action\">\n                                            <mat-header-cell class=\"column-nowrap psl-0 tbl-col-width-per-10 pr-0 pr-0\"\n                                                *matHeaderCellDef>\n                                                Action\n                                            </mat-header-cell>\n                                            <mat-cell *matCellDef=\"let row; let i = index\"\n                                                class=\"column-nowrap psl-0 tbl-col-width-per-10 pr-0 pr-0\">\n                                                <!-- View Button  -->\n                                                <button mat-icon-button color=\"primary\"\n                                                    (click)=\"$event.stopPropagation()\" (click)=\"showRecordDetails(row)\"\n                                                    class=\"tbl-action-btn\">\n                                                    <app-feather-icons [icon]=\"'eye'\" [class]=\"'tbl-fav-eye'\">\n                                                    </app-feather-icons>\n                                                </button>\n                                            </mat-cell>\n                                        </ng-container>\n                                    </ng-container>\n\n                                    <ng-container *ngIf=\"pageFunction === 'Push Payroll To Finance' \">\n                                        <ng-container matColumnDef=\"payrollCircleCode\">\n                                            <mat-header-cell *matHeaderCellDef mat-sort-header\n                                                class=\"column-nowrap psl-2 tbl-col-width-per-9 pr-3\">\n                                                P.Circle Code\n                                            </mat-header-cell>\n                                            <mat-cell *matCellDef=\"let row\"\n                                                class=\"column-nowrap psl-2 tbl-col-width-per-9 pr-3\">\n                                                {{ row.payrollCircleCode }}\n                                            </mat-cell>\n                                        </ng-container>\n\n                                        <ng-container matColumnDef=\"period\">\n                                            <mat-header-cell *matHeaderCellDef mat-sort-header\n                                                class=\"column-nowrap psl-2 tbl-col-width-per-9 pr-3\">\n                                                Period\n                                            </mat-header-cell>\n                                            <mat-cell *matCellDef=\"let row\"\n                                                class=\"column-nowrap psl-2 tbl-col-width-per-9 pr-3\">\n                                                {{ row.periodM }} {{ row.periodY }}\n                                            </mat-cell>\n                                        </ng-container>\n\n                                        <ng-container matColumnDef=\"openingDate\">\n                                            <mat-header-cell *matHeaderCellDef mat-sort-header\n                                                class=\"column-nowrap psl-2 tbl-col-width-per-9 pr-3\">\n                                                Opening Date\n                                            </mat-header-cell>\n                                            <mat-cell *matCellDef=\"let row\"\n                                                class=\"column-nowrap psl-2 tbl-col-width-per-9 pr-3\">\n                                                {{ row.openingDate | date : 'short' }}\n                                            </mat-cell>\n                                        </ng-container>\n\n                                        <ng-container matColumnDef=\"closingDate\">\n                                            <mat-header-cell *matHeaderCellDef mat-sort-header\n                                                class=\"column-nowrap psl-2 tbl-col-width-per-9 pr-3\">\n                                                Closing Date\n                                            </mat-header-cell>\n                                            <mat-cell *matCellDef=\"let row\"\n                                                class=\"column-nowrap psl-2 tbl-col-width-per-9 pr-3\">\n                                                {{ row.closingDate | date : 'short' }}\n                                            </mat-cell>\n                                        </ng-container>\n\n                                        <ng-container matColumnDef=\"activeEmployees\">\n                                            <mat-header-cell *matHeaderCellDef mat-sort-header\n                                                class=\"column-nowrap psl-2 tbl-col-width-per-9 pr-3\">\n                                                Active Employees\n                                            </mat-header-cell>\n                                            <mat-cell *matCellDef=\"let row\"\n                                                class=\"column-nowrap psl-2 tbl-col-width-per-9 pr-3\">\n                                                {{ row.activeEmployees }}\n                                            </mat-cell>\n                                        </ng-container>\n\n                                        <ng-container matColumnDef=\"closurePaidEmployees\">\n                                            <mat-header-cell *matHeaderCellDef mat-sort-header\n                                                class=\"column-nowrap psl-2 tbl-col-width-per-10 pr-3\">\n                                                Closure Paid Employees\n                                            </mat-header-cell>\n                                            <mat-cell *matCellDef=\"let row\"\n                                                class=\"column-nowrap psl-2 tbl-col-width-per-10 pr-3\">\n                                                {{ row.closurePaidEmployees }}\n                                            </mat-cell>\n                                        </ng-container>\n\n                                        <ng-container matColumnDef=\"totalOpeningGrossPay\">\n                                            <mat-header-cell *matHeaderCellDef mat-sort-header\n                                                class=\"column-nowrap psl-2 tbl-col-width-per-9 pr-3\">\n                                                Opening Gross Pay\n                                            </mat-header-cell>\n                                            <mat-cell *matCellDef=\"let row\"\n                                                class=\"column-nowrap psl-2 tbl-col-width-per-9 pr-3\">\n                                                {{ row.totalOpeningGrossPay | currency }}\n                                            </mat-cell>\n                                        </ng-container>\n\n                                        <ng-container matColumnDef=\"totalClosingGrossPay\">\n                                            <mat-header-cell *matHeaderCellDef mat-sort-header\n                                                class=\"column-nowrap psl-2 tbl-col-width-per-9 pr-3\">\n                                                Closing Gross Pay\n                                            </mat-header-cell>\n                                            <mat--cell *matCellDef=\"let row\"\n                                                class=\"column-nowrap psl-2 tbl-col-width-per-9 pr-3\">\n                                                {{ row.totalClosingGrossPay | currency }}\n                                            </mat--cell>\n                                        </ng-container>\n\n                                        <ng-container matColumnDef=\"totalOpeningDeductions\">\n                                            <mat-header-cell *matHeaderCellDef mat-sort-header\n                                                class=\"column-nowrap psl-2 tbl-col-width-per-9 pr-3\">\n                                                Opening Deductions\n                                            </mat-header-cell>\n                                            <mat-cell *matCellDef=\"let row\"\n                                                class=\"column-nowrap psl-2 tbl-col-width-per-9 pr-3\">\n                                                {{ row.totalOpeningDeductions | currency }}\n                                            </mat-cell>\n                                        </ng-container>\n\n                                        <ng-container matColumnDef=\"totalClosingDeductions\">\n                                            <mat-header-cell *matHeaderCellDef mat-sort-header\n                                                class=\"column-nowrap psl-2 tbl-col-width-per-9 pr-3\">\n                                                Closing Deductions\n                                            </mat-header-cell>\n                                            <mat-cell *matCellDef=\"let row\"\n                                                class=\"column-nowrap psl-2 tbl-col-width-per-9 pr-3\">\n                                                {{ row.totalClosingDeductions | currency }}\n                                            </mat-cell>\n                                        </ng-container>\n\n                                        <ng-container matColumnDef=\"totalOpeningAllowances\">\n                                            <mat-header-cell *matHeaderCellDef mat-sort-header\n                                                class=\"column-nowrap psl-2 tbl-col-width-per-9 pr-3\">\n                                                Opening Allowances\n                                            </mat-header-cell>\n                                            <mat-cell *matCellDef=\"let row\"\n                                                class=\"column-nowrap psl-2 tbl-col-width-per-9 pr-3\">\n                                                {{ row.totalOpeningAllowances | currency }}\n                                            </mat-cell>\n                                        </ng-container>\n\n                                        <ng-container matColumnDef=\"totalClosingAllowances\">\n                                            <mat-header-cell *matHeaderCellDef mat-sort-header\n                                                class=\"column-nowrap psl-2 tbl-col-width-per-9 pr-3\">\n                                                Closing Allowances\n                                            </mat-header-cell>\n                                            <mat-cell *matCellDef=\"let row\"\n                                                class=\"column-nowrap psl-2 tbl-col-width-per-9 pr-3\">\n                                                {{ row.totalClosingAllowances | currency }}\n                                            </mat-cell>\n                                        </ng-container>\n\n                                        <ng-container matColumnDef=\"status\">\n                                            <mat-header-cell *matHeaderCellDef mat-sort-header\n                                                class=\"column-nowrap psl-2 tbl-col-width-per-9 pr-3\">\n                                                Status\n                                            </mat-header-cell>\n                                            <mat-cell *matCellDef=\"let row\"\n                                                class=\"column-nowrap psl-2 tbl-col-width-per-9 pr-3\">\n                                                {{ row.status }}\n                                            </mat-cell>\n                                        </ng-container>\n\n                                    </ng-container>\n\n                                    <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row>\n                                    <mat-row *matRowDef=\"let row; columns: displayedColumns\"\n                                        (click)=\"showRecordDetails(row)\" [style.cursor]=\"'pointer'\" matRipple>\n                                    </mat-row>\n                                    <tr *matNoDataRow>\n                                        <td colspan=\"{{ displayedColumns.length }}\">\n                                            No data matching the filter \"{{ input }}\"\n                                        </td>\n                                    </tr>\n                                </mat-table>\n\n                                <div *ngIf=\"dataSource.data.length === 0\" class=\"tbl-spinner\">\n                                    <mat-progress-spinner color=\"primary\" [diameter]=\"40\" mode=\"indeterminate\">\n                                    </mat-progress-spinner>\n                                </div>\n                                <mat-paginator [pageSize]=\"10\" [pageSizeOptions]=\"[2, 5, 10, 20, 30, 40, 50, 100]\"\n                                    aria-label=\"Select page of users\">\n                                </mat-paginator>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</section>","import { Injectable } from '@angular/core';\nimport { Observable, AsyncSubject } from 'rxjs';\n\nexport interface SelectedFiles {\n  name: string;\n  file: any;\n  base64?: string;\n  url?: string;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FilesService {\n\n  constructor() { }\n\n  public toBase64(files: File[], selectedFiles: SelectedFiles[]): Observable<SelectedFiles[]> {\n    const result = new AsyncSubject<SelectedFiles[]>();\n    if (files?.length) {\n      Object.keys(files)?.forEach((file, i) => {\n        const url = URL.createObjectURL(files[i]);\n        const reader = new FileReader();\n        reader.readAsDataURL(files[i]);\n        reader.onload = (e) => {\n          selectedFiles = selectedFiles?.filter(f => f?.name != files[i]?.name);\n          selectedFiles.push({ name: files[i]?.name, file: files[i], base64: reader?.result as string, url: url});\n          result.next(selectedFiles);\n          if (files?.length === (i + 1)) {\n            result.complete(); // Hoàn tất toàn bộ quá trình convert, trả về mảng selectedFiles có chứa base64 \n          }\n        };\n      });\n      return result;\n    } else {\n      result.next([]);\n      result.complete();\n      return result;\n    }\n  }\n}\n","import { Subject } from './Subject';\nexport class AsyncSubject extends Subject {\n    constructor() {\n        super(...arguments);\n        this._value = null;\n        this._hasValue = false;\n        this._isComplete = false;\n    }\n    _checkFinalizedStatuses(subscriber) {\n        const { hasError, _hasValue, _value, thrownError, isStopped, _isComplete } = this;\n        if (hasError) {\n            subscriber.error(thrownError);\n        }\n        else if (isStopped || _isComplete) {\n            _hasValue && subscriber.next(_value);\n            subscriber.complete();\n        }\n    }\n    next(value) {\n        if (!this.isStopped) {\n            this._value = value;\n            this._hasValue = true;\n        }\n    }\n    complete() {\n        const { _hasValue, _value, _isComplete } = this;\n        if (!_isComplete) {\n            this._isComplete = true;\n            _hasValue && super.next(_value);\n            super.complete();\n        }\n    }\n}\n"],"names":[],"sourceRoot":"webpack:///"}