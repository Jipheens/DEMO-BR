{"version":3,"file":"src_app_erp-hr-self-service_modules_employee-payroll_employee-payroll_module_ts.js","mappings":"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","sources":["./src/app/erp-hr-self-service/modules/employee-payroll/employee-payroll-routing.module.ts","./src/app/erp-hr-self-service/modules/employee-payroll/employee-payroll.module.ts","./src/app/erp-hr-self-service/modules/employee-payroll/payroll-details-page/payroll-details-page.component.ts","./src/app/erp-hr-self-service/modules/employee-payroll/payroll-details-page/payroll-details-page.component.html"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { PayrollDetailsPageComponent } from './payroll-details-page/payroll-details-page.component';\nimport { RoutePrivilegeGuard } from 'src/app/erp-procurement/data/services/_AccessControlAuthGuard.service';\n\nconst routes: Routes = [\n  {\n    path: \"\",\n    component: PayrollDetailsPageComponent,\n    canActivate: [RoutePrivilegeGuard],\n    data: {\n      clientName: \"EmployeePortalModule\",\n      requiredPrivilege: [\"Dashboard\"],\n    },\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class EmployeePayrollRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { EmployeePayrollRoutingModule } from './employee-payroll-routing.module';\nimport { PayrollDetailsPageComponent } from './payroll-details-page/payroll-details-page.component';\nimport { ComponentsModule } from 'src/app/shared/components/components.module';\nimport { SharedModule } from 'src/app/shared/shared.module';\nimport { DashboardModule } from '../dashboard/dashboard.module';\n\n\n@NgModule({\n  declarations: [\n    PayrollDetailsPageComponent\n  ],\n  imports: [\n    CommonModule,\n    EmployeePayrollRoutingModule,\n\n    DashboardModule,\n    ComponentsModule,\n    SharedModule,\n  ]\n})\nexport class EmployeePayrollModule { }\n","import { SelectionModel } from \"@angular/cdk/collections\";\nimport { HttpParams } from \"@angular/common/http\";\nimport { Component, OnInit, ViewChild } from \"@angular/core\";\nimport { FormGroup, FormBuilder, Validators } from \"@angular/forms\";\nimport { MatDialog, MatDialogConfig } from \"@angular/material/dialog\";\nimport { MatPaginator } from \"@angular/material/paginator\";\nimport { MatSort } from \"@angular/material/sort\";\nimport { MatTableDataSource } from \"@angular/material/table\";\nimport { Subject, takeUntil, Subscription } from \"rxjs\";\nimport { NotificationServiceService } from \"src/@core/Models/Notification/notification-service.service\";\nimport { TokenStorageService } from \"src/app/core/service/token-storage.service\";\nimport { CcentreLookupComponent } from \"src/app/erp-finance/data/lookups/ccentre-lookup/ccentre-lookup.component\";\nimport { PayrollService } from \"src/app/erp-hr/data/payroll-services/payroll.service\";\nimport { ReportService } from \"src/app/erp-hr/data/payroll-services/report.service\";\nimport { ManageLeaveRequestsComponent } from \"src/app/erp-hr/modules/leave-management/leave-requests/manage-leave-requests/manage-leave-requests.component\";\nimport { SnackbarService } from \"src/app/shared/services/snackbar.service\";\nimport Swal from \"sweetalert2\";\n\n@Component({\n  selector: \"app-payroll-details-page\",\n  templateUrl: \"./payroll-details-page.component.html\",\n  styleUrls: [\"./payroll-details-page.component.sass\"],\n})\nexport class PayrollDetailsPageComponent implements OnInit {\n  displayedColumns: string[] = [\n   // \"select\",\n   // \"id\",\n    'payrollId',\n    //'employeeId',\n    'name',\n    'empStartDate',\n    'workingDays',\n    'basicSalary',\n    'grossSalary',\n    'nhif',\n    'nssf',\n    'chargeablePay',\n    'taxableCharge',\n    'insuranceRelief',\n    'personalRelief',\n    'paye',\n    'housingLevy',\n    'netSalary',\n    \"action\",\n  ];\n\n  loading: boolean = false;\n  data: any;\n  error: any;\n  dialogConfig: any;\n  destroy$: Subject<boolean> = new Subject<boolean>();\n\n  dataSource!: MatTableDataSource<any>;\n  @ViewChild(MatPaginator) paginator!: MatPaginator;\n  @ViewChild(MatSort) sort!: MatSort;\n\n  selection = new SelectionModel<any>(true, []);\n\n  downloadLoading: boolean = false;\n  posting: boolean = false;\n  showForm: boolean = false;\n\n  Form: FormGroup;\n  months: string[] = [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\",\n  ];\n\n  currentUser: any;\n  currentUserPf: any;\n\n  constructor(\n    private dialog: MatDialog,\n    private notificationAPI: NotificationServiceService,\n    private payrollService: PayrollService,\n    private snackbar: SnackbarService,\n    private fb: FormBuilder,\n    private tokenStorageService: TokenStorageService,\n    private reportAPI: ReportService,\n\n  ) {}\n\n  ngOnInit(): void {\n    const currentYear = new Date().getFullYear();\n    const currentMonthIndex = new Date().getMonth();\n    const currentMonthName = this.months[currentMonthIndex];\n\n    this.currentUser = this.tokenStorageService.getUser();\n    this.currentUserPf = this.tokenStorageService.getEmppf();\n\n    this.Form = this.fb.group({\n      year: [currentYear.toString(), Validators.required],\n      status: [\"ALL\"],\n    });\n    this.Form.valueChanges.subscribe(() => {\n      this.getData();\n    });\n\n    this.getData();\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next(true);\n    this.destroy$.complete();\n  }\n\n  //************************************************************************************************ */\n  reqStatuses: any[] = [\n    { name: \"ALL\" },\n    { name: \"PENDING\" },\n    { name: \"APPROVED\" },\n    { name: \"RETURNED\" },\n    { name: \"REJECTED\" },\n  ];\n  selectedStatus: string = \"ALL\";\n\n  getSelectSelectedStatus() {\n    this.getData();\n  }\n  getSelectedStatus(status: any) {\n    this.Form.patchValue({\n      status: status,\n    });\n\n    this.getData();\n  }\n  getData() {\n    this.loading = true;\n    this.dataSource = new MatTableDataSource([]);\n    this.dataSource.paginator = this.paginator;\n    this.dataSource.sort = this.sort;\n\n    this.selectedStatus = this.Form.value.status;\n\n    let params = {\n      periody: this.Form.value.year,\n      empPF: this.currentUserPf,\n    };\n\n    this.payrollService\n      .getPayslipPerEmpPF(params)\n\n      .pipe(takeUntil(this.destroy$))\n      .subscribe({\n        next: (res) => {\n          if (res.statusCode === 302) {\n            this.data = res.entity;\n            console.log(\"Leave Requests displayed on table\", this.data);\n\n            this.loading = false;\n            this.dataSource = new MatTableDataSource(this.data);\n            this.dataSource.paginator = this.paginator;\n            this.dataSource.sort = this.sort;\n          } else {\n            this.loading = false;\n          }\n        },\n        error: (err) => {\n          this.loading = false;\n          this.notificationAPI.alertWarning(\"Server Error:  \" + err.message);\n        },\n        complete: () => {},\n      });\n  }\n  refresh() {\n    this.getData();\n  }\n\n  mngRecord(action: any, record?: any) {\n    console.log(\"this.action:; \", action);\n    console.log(\"this.record:; \", record);\n\n    const dialogConfig = new MatDialogConfig();\n    dialogConfig.disableClose = false;\n    dialogConfig.disableClose = true;\n    dialogConfig.width = \"800px\";\n    dialogConfig.data = {\n      action: action,\n      record: record,\n    };\n    const dialogRef = this.dialog.open(\n      ManageLeaveRequestsComponent,\n      dialogConfig\n    );\n    dialogRef.afterClosed().subscribe((result) => {\n      console.log(\"result:::\", result);\n\n      this.getData();\n    });\n  }\n  deleteRecord(id: number) {\n    Swal.fire({\n      title: \"Are you sure?\",\n      text: \"HOLIDAY RECORD WILL BE DELETED PERMANENTLY!!\",\n      icon: \"warning\",\n      showCancelButton: true,\n      confirmButtonColor: \"#3085d6\",\n      cancelButtonColor: \"#d33\",\n      confirmButtonText: \"Yes, delete it!\",\n    }).then((result) => {\n      // if (result.isConfirmed) {\n      //   this.loading = true;\n      //   this.payrollService\n      //     .delete(id)\n      //     .pipe(takeUntil(this.destroy$))\n      //     .subscribe({\n      //       next: (res) => {\n      //         if (res.statusCode == 200) {\n      //           this.getData();\n      //           this.loading = false;\n      //           this.notificationAPI.alertSuccess(\n      //             \"HOLIDAY RECORD DELETED SUCCESSFULLY\"\n      //           );\n      //         } else {\n      //           this.getData();\n      //           this.loading = false;\n      //           this.notificationAPI.alertWarning(res.message);\n      //         }\n      //       },\n      //       error: (err) => {\n      //         this.loading = false;\n      //         this.notificationAPI.alertSuccess(\"Server Error: \" + err.message);\n      //       },\n      //       complete: () => {},\n      //     });\n      // }\n    });\n  }\n\n  input: any;\n  applyFilter(event: Event) {\n    const filterValue = (event.target as HTMLInputElement).value;\n    this.input = filterValue;\n    this.dataSource.filter = filterValue.trim().toLowerCase();\n    if (this.dataSource.paginator) {\n      this.dataSource.paginator.firstPage();\n    }\n  }\n  //******************************************************************************************************************************** */\n  onCostCenterLookup(type: any) {\n    if (type === \"Search\") {\n      const dialogConfig = new MatDialogConfig();\n      dialogConfig.disableClose = false;\n      dialogConfig.disableClose = true;\n      dialogConfig.width = \"800px\";\n      dialogConfig.data = {\n        action: \"SingleCostCenter\",\n      };\n      const dialogRef = this.dialog.open(CcentreLookupComponent, dialogConfig);\n      dialogRef.afterClosed().subscribe((res) => {\n        if (res && res.data && res.data.length > 0) {\n          this.Form.patchValue({\n            costCenterCode: res.data[0].costCenterCode,\n          });\n        }\n      });\n    } else if (type === \"All\") {\n      this.Form.patchValue({\n        costCenterCode: \"All\",\n      });\n\n      this.getData();\n    }\n  }\n  // ****************************************************************************************************************************\n  selectedRows: any[] = [];\n  atleastOneSelected: boolean = false;\n  isAllSelected() {\n    const numSelected = this.selection.selected.length;\n    const numRows = this.dataSource.data.length;\n    return numSelected === numRows;\n  }\n  masterToggle() {\n    if (this.isAllSelected()) {\n      this.selection.clear();\n      return;\n    }\n\n    this.selection.select(...this.dataSource.data);\n  }\n  checkboxLabel(row?: any): string {\n    if (!row) {\n      return `${this.isAllSelected() ? \"deselect\" : \"select\"} all`;\n    }\n    return `${this.selection.isSelected(row) ? \"deselect\" : \"select\"} row ${\n      row.position + 1\n    }`;\n  }\n\n  expSelected() {\n    this.atleastOneSelected = true;\n    this.selectedRows = this.selection.selected;\n\n    console.log(\"this.selectedRows: \", this.selectedRows);\n  }\n\n  hasAccess: boolean = true;\n  processMultipleRows(status: any) {\n    let privilege = \"Validate Expenses\";\n\n    // this.hasAccess = this.accessControlService.hasPrivilege(\"FinanceModule\", [\n    //   privilege,\n    // ]);\n\n    if (this.hasAccess) {\n      Swal.fire({\n    title: '<span style=\"font-size: 20px;\">Enter Verifier Remarks</span>',\n    input: \"textarea\",\n    inputPlaceholder: \"Type your remarks here...\",\n    confirmButtonText: \"Submit\",\n    showCancelButton: true,\n    cancelButtonText: \"Cancel\",\n    icon: \"info\",\n\n    inputValidator: (value) => {\n          if (!value) {\n            return \"Please enter your remarks\";\n          }\n        },\n      }).then((result) => {\n        if (result.isConfirmed) {\n          const verifierRemarks = result.value;\n\n          const processedRows = this.selectedRows.map((element) => {\n            return {\n              id: element.id,\n              status: status,\n              verifierRemarks: verifierRemarks,\n            };\n          });\n\n          console.log(\"LOG: \", processedRows);\n\n          // this.payrollService\n          //   .validateBulkLeaveRequests(processedRows)\n          //   .pipe(takeUntil(this.destroy$))\n          //   .subscribe({\n          //     next: (res) => {\n          //       console.log(\"res: \", res);\n          //       if (res.statusCode == 201 || 200 || 302) {\n          //         this.snackbar.showNotification(\n          //           \"snackbar-success\",\n          //           res.message\n          //         );\n\n          //         this.selection = new SelectionModel<any>(true, []);\n          //         this.selection.clear();\n          //       } else {\n          //         this.snackbar.showNotification(\n          //           \"snackbar-danger\",\n          //           res.message\n          //         );\n          //       }\n          //     },\n          //     error: (err) => {\n          //       this.snackbar.showNotification(\"snackbar-danger\", err.message);\n          //     },\n          //     complete: () => {\n          //       this.getData();\n          //     },\n          //   }),\n          //   Subscription;\n        } else {\n          this.selection = new SelectionModel<any>(true, []);\n          this.selection.clear();\n        }\n      });\n    }\n  }\n\n  //*************************************************************************************************************** */\n  downloadP9() {\n    this.loading = true;\n    let params = new HttpParams()\n      .set(\"period_y\", this.Form.value.year)\n      .set(\"empPF\", this.tokenStorageService.getUser().empPfNo);\n    this.reportAPI.generateEmployeeP9form(params).subscribe(\n      (res) => {\n        this.loading = false;\n      \n        if (res.statusCode == 404) {\n          this.notificationAPI.alertWarning(res.message);\n        } else {\n          this.notificationAPI.alertSuccess(\"Downloading Employee P9-FORM\");\n          let url = window.URL.createObjectURL(res.data);\n          let a = document.createElement(\"a\");\n          document.body.appendChild(a);\n          a.setAttribute(\"style\", \"display: none\");\n          a.setAttribute(\"target\", \"blank\");\n          a.href = url;\n          a.download = res.filename;\n          a.click();\n          window.URL.revokeObjectURL(url);\n          a.remove();\n        }\n      },\n      (err) => {\n        this.loading = false;\n        this.notificationAPI.alertWarning(err.message);\n      }\n    );\n  }\n  getPayslip(id: number) {\n    this.loading = true;\n    this.reportAPI.payslip(id).subscribe({\n      next: (value) => {\n        this.loading = false;\n        this.notificationAPI.alertSuccess(\"Downloading Payslip Report\");\n        let url = window.URL.createObjectURL(value.data);\n        let a = document.createElement(\"a\");\n        document.body.appendChild(a);\n        a.setAttribute(\"style\", \"display: none\");\n        a.setAttribute(\"target\", \"blank\");\n        a.href = url;\n        a.download = value.filename;\n        a.click();\n        window.URL.revokeObjectURL(url);\n        a.remove();\n      },\n      error: (err) => {\n        this.loading = false;\n        this.notificationAPI.alertWarning(\"NO PAYSLIP REPORT FOUND\");\n      },\n      complete: () => {},\n    });\n  }\n}\n","<section class=\"content\">\n    <div class=\"content-block\">\n        <div class=\"block-header\">\n            <!-- breadcrumb -->\n            <app-breadcrumb [title]=\"'Payroll Details'\" [items]=\"['Payroll Details']\" [active_item]=\"'Payroll Details'\">\n            </app-breadcrumb>\n        </div>\n\n        <app-gen-widgets></app-gen-widgets>\n\n        <div class=\"row\">\n            <div class=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\">\n                <div class=\"card\">\n\n                    <div class=\"body\">\n                        <div class=\"table-responsive\">\n                            <div class=\"materialTableHeader\">\n                                <div class=\"row\">\n                                    <div class=\"col-6\">\n                                        <ul class=\"header-buttons-left ms-0\">\n                                            <li class=\"dropdown\">\n                                                <h2>Payroll Details</h2>\n                                            </li>\n                                            <li class=\"dropdown m-l-20\">\n                                                <label for=\"search-input\"><i\n                                                        class=\"material-icons search-icon\">search</i></label>\n                                                <input placeholder=\"Filter...\" type=\"text\" (keyup)=\"applyFilter($event)\"\n                                                    #filter class=\"browser-default search-field\"\n                                                    aria-label=\"Search box\">\n                                            </li>\n                                            <li>\n                                                <div class=\"m-l-10\" matTooltip=\"DOWNLOAD P9\">\n                                                    <button mat-mini-fab color=\"primary\" (click)=\"downloadP9()\">\n                                                        <mat-icon class=\"col-white\">cloud_download</mat-icon>\n                                                    </button>\n                                                </div>\n                                            </li>\n\n\n                                            <li>\n                                                <div class=\"m-l-10\" matTooltip=\"REFRESH\">\n                                                    <button mat-mini-fab color=\"primary\" (click)=\"refresh()\">\n                                                        <mat-icon class=\"col-white\">refresh</mat-icon>\n                                                    </button>\n                                                </div>\n                                            </li>\n                                            <li *ngIf=\"selection.selected.length > 0\">\n                                                <div class=\"m-l-10\" matTooltip=\"APPROVE\">\n                                                    <button mat-mini-fab color=\"primary\"\n                                                        (click)=\"processMultipleRows('APPROVED')\"\n                                                        class=\"mat-button-custom\">\n                                                        <mat-icon class=\"col-white\">check</mat-icon>\n                                                    </button>\n                                                </div>\n                                            </li>\n                                            <li *ngIf=\"selection.selected.length > 0\">\n                                                <div class=\"m-l-10\" matTooltip=\"REJECT\">\n                                                    <button mat-mini-fab color=\"warn\"\n                                                        (click)=\"processMultipleRows('REJECTED')\"\n                                                        class=\"mat-button-custom\">\n                                                        <mat-icon class=\"col-white\">cancel</mat-icon>\n                                                    </button>\n                                                </div>\n                                            </li>\n                                            <li *ngIf=\"selection.selected.length > 0\">\n                                                <div class=\"m-l-10\" matTooltip=\"RETURN\">\n                                                    <button mat-mini-fab color=\"accent\"\n                                                        (click)=\"processMultipleRows('RETURNED')\"\n                                                        class=\"mat-button-custom\">\n                                                        <mat-icon class=\"col-white\">undo</mat-icon>\n                                                    </button>\n                                                </div>\n                                            </li>\n                                        </ul>\n                                    </div>\n                                    <div class=\"col-2\">\n                                        <form [formGroup]=\"Form\">\n                                            <div class=\"row\">\n\n                                                <mat-form-field class=\"example-full-width\" appearance=\"outline\">\n                                                    <mat-label>Year</mat-label>\n                                                    <input matInput formControlName=\"year\" />\n                                                    <mat-error *ngIf=\"Form.get('year').hasError('required')\">\n                                                        Please Enter Year\n                                                    </mat-error>\n                                                </mat-form-field>\n\n                                            </div>\n                                        </form>\n                                    </div>\n                                    <div class=\"col-4\">\n                                        <ul class=\"header-buttons\">\n                                            <li>\n                                                <div class=\"export-button m-l-10\" matTooltip=\"XLSX\">\n                                                    <img src=\"assets/images/icons/xlsx.png\" alt=\"\"\n                                                        (click)=\"exporter.exportTable('xlsx', {fileName:'assets-list', sheet: 'sheet1'})\" />\n                                                </div>\n                                            </li>\n                                            <li>\n                                                <div class=\"export-button m-l-10\" matTooltip=\"CSV\">\n                                                    <img src=\"assets/images/icons/csv.png\" alt=\"\"\n                                                        (click)=\"exporter.exportTable('csv')\" />\n                                                </div>\n                                            </li>\n                                            <li>\n                                                <div class=\"export-button m-l-10\" matTooltip=\"JSON\">\n                                                    <img src=\"assets/images/icons/json.png\" alt=\"\"\n                                                        (click)=\"exporter.exportTable('json')\" />\n                                                </div>\n                                            </li>\n                                            <li>\n                                                <div class=\"export-button m-l-10\" matTooltip=\"TXT\">\n                                                    <img src=\"assets/images/icons/txt.png\" alt=\"\"\n                                                        (click)=\"exporter.exportTable('txt')\" />\n                                                </div>\n                                            </li>\n                                        </ul>\n                                    </div>\n                                </div>\n                            </div>\n\n\n\n\n                            <mat-table #table matTableExporter [dataSource]=\"dataSource\" matSort class=\"mat-cell\"\n                                #exporter=\"matTableExporter\">\n\n                                <ng-container matColumnDef=\"select\">\n                                    <mat-header-cell *matHeaderCellDef [ngClass]=\"'tbl-col-width-per-4'\">\n                                        <mat-checkbox color=\"primary\" (change)=\"$event ? masterToggle() : null\"\n                                            [checked]=\"selection.hasValue() && isAllSelected()\"\n                                            [indeterminate]=\"selection.hasValue() && !isAllSelected()\"\n                                            [ngClass]=\"'tbl-checkbox'\" (change)=\"expSelected()\">\n                                        </mat-checkbox>\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" [ngClass]=\"'tbl-col-width-per-4'\">\n                                        <mat-checkbox color=\"primary\" (click)=\"$event.stopPropagation()\"\n                                            (change)=\"$event ? selection.toggle(row) : null\"\n                                            [checked]=\"selection.isSelected(row)\" [ngClass]=\"'tbl-checkbox'\"\n                                            [aria-label]=\"checkboxLabel(row)\" (change)=\"expSelected()\">\n                                        </mat-checkbox>\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"id\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-10\">\n                                        ID\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-10\">\n                                        {{ row.id }}\n                                    </mat-cell>\n                                </ng-container>\n\n\n                                <ng-container matColumnDef=\"payrollId\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Payroll ID\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        {{ row.payrollId }}\n                                    </mat-cell>\n                                </ng-container>\n                                \n                                <ng-container matColumnDef=\"employeeId\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Employee ID\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        {{ row.employeeId }}\n                                    </mat-cell>\n                                </ng-container>\n                                \n                                <ng-container matColumnDef=\"name\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Name\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        {{ row.firstName }} {{ row.middleName }} {{ row.lastName }}\n                                    </mat-cell>\n                                </ng-container>\n                                \n                                <ng-container matColumnDef=\"empStartDate\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Employee Start Date\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        {{ row.empStartDate }}\n                                    </mat-cell>\n                                </ng-container>\n                                \n                                <ng-container matColumnDef=\"workingDays\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Working Days\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        {{ row.workingDays }}\n                                    </mat-cell>\n                                </ng-container>\n                                \n                                <ng-container matColumnDef=\"basicSalary\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Basic Salary\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        {{ row.basicSalary }}\n                                    </mat-cell>\n                                </ng-container>\n                                \n                                <ng-container matColumnDef=\"grossSalary\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Gross Salary\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        {{ row.grossPay }}\n                                    </mat-cell>\n                                </ng-container>\n                                \n                                <ng-container matColumnDef=\"nhif\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        NHIF\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        {{ row.nhif }}\n                                    </mat-cell>\n                                </ng-container>\n                                \n                                <ng-container matColumnDef=\"nssf\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        NSSF\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        {{ row.nssfEmployee }}\n                                    </mat-cell>\n                                </ng-container>\n                                \n                                <ng-container matColumnDef=\"chargeablePay\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Chargeable Pay\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        {{ row.chargeablePay }}\n                                    </mat-cell>\n                                </ng-container>\n                                \n                                <ng-container matColumnDef=\"taxableCharge\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Taxable Charge\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        {{ row.taxCharge }}\n                                    </mat-cell>\n                                </ng-container>\n                                \n                                <ng-container matColumnDef=\"insuranceRelief\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Ins. Relief\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        {{ row.insuranceRelief }}\n                                    </mat-cell>\n                                </ng-container>\n                                \n                                <ng-container matColumnDef=\"personalRelief\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Pers. Relief\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        {{ row.personalRelief }}\n                                    </mat-cell>\n                                </ng-container>\n                                \n                                <ng-container matColumnDef=\"paye\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        PAYE\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        {{ row.paye }}\n                                    </mat-cell>\n                                </ng-container>\n                                \n                                <ng-container matColumnDef=\"housingLevy\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Hse Levy\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        {{ row.employeeHouseLevy }}\n                                    </mat-cell>\n                                </ng-container>\n                                \n                                <ng-container matColumnDef=\"netSalary\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Net Salary\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        {{ row.netSalary }}\n                                    </mat-cell>\n                                </ng-container>\n                                \n\n\n                                <ng-container matColumnDef=\"status\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-10\">\n                                        Status\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row; let i = index\"\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-10\"\n                                        (click)=\"$event.stopPropagation()\">\n                                        <ng-container [ngSwitch]=\"row.status\">\n                                            <button *ngSwitchCase=\"'APPROVED'\"\n                                                class=\"badge badge-solid-green btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-check-circle\"></i>&nbsp;\n                                                {{ row.status }}\n                                            </button>\n                                            <button *ngSwitchCase=\"'REJECTED'\"\n                                                class=\"badge badge-solid-red btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-times-circle\"></i>&nbsp;\n                                                {{ row.status }}\n                                            </button>\n                                            <button *ngSwitchCase=\"'RETURNED'\"\n                                                class=\"badge badge-solid-brown btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-undo-alt\"></i>&nbsp;\n                                                {{ row.status }}\n                                            </button>\n                                            <button *ngSwitchCase=\"'PENDING'\"\n                                                class=\"badge badge-solid-blue btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-exclamation-circle\"></i>&nbsp;\n                                                {{ row.status }}\n                                            </button>\n                                            <button *ngSwitchDefault class=\"badge badge-solid-brown btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-question-circle\"></i>&nbsp;\n                                                {{ row.status }}\n                                            </button>\n                                        </ng-container>\n                                    </mat-cell>\n                                </ng-container>\n\n\n\n\n                                <ng-container matColumnDef=\"action\">\n                                    <mat-header-cell class=\"column-nowrap psl-3 tbl-col-width-per-15 pr-0\"\n                                        *matHeaderCellDef>\n                                        Action\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row; let i = index\"\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-15 pr-0\">\n\n                                        <!-- <button mat-icon-button color=\"accent\" (click)=\"$event.stopPropagation()\"\n                                            (click)=\"mngRecord('Update',row)\" class=\"tbl-action-btn\">\n                                            <app-feather-icons [icon]=\"'edit'\" [class]=\"'tbl-fav-edit'\">\n                                            </app-feather-icons>\n                                        </button> -->\n\n                                        <!-- <button matTooltip=\"DOWNLOAD PAYSLIP\" mat-icon-button color=\"primary\" (click)=\"$event.stopPropagation()\"\n                                            (click)=\"getPayslip(row.id)\" class=\"tbl-action-btn\">\n                                            <mat-icon class=\"col-white\">cloud_download</mat-icon>\n                                        </button> -->\n\n                                        <button matTooltip=\"DOWNLOAD PAYSLIP\" mat-icon-button color=\"accent\" (click)=\"$event.stopPropagation()\"\n                                        (click)=\"getPayslip(row.id)\"\n                                            class=\"tbl-action-btn\">\n                                            <app-feather-icons [icon]=\"'download'\"\n                                                [class]=\"'tbl-download-pdf'\"></app-feather-icons>\n                                        </button>\n\n                                        <!-- \n                                        <button mat-icon-button color=\"primary\" (click)=\"$event.stopPropagation()\"\n                                            (click)=\"lockOrUnlockAccount(row)\" class=\"tbl-action-btn\">\n                                            <mat-icon>{{ row.isAcctActive === 'Y' ? 'lock' : 'lock_open' }}</mat-icon>\n                                        </button> -->\n\n                                        <!-- <button mat-icon-button color=\"accent\" (click)=\"$event.stopPropagation()\"\n                                            (click)=\"deleteRecord(row.id)\" class=\"tbl-action-btn\">\n                                            <app-feather-icons [icon]=\"'trash-2'\" [class]=\"'tbl-fav-delete'\">\n                                            </app-feather-icons>\n                                        </button> -->\n                                    </mat-cell>\n                                </ng-container>\n                                <mat-header-row *matHeaderRowDef=\"displayedColumns\">\n                                </mat-header-row>\n                                <mat-row *matRowDef=\"let row; columns: displayedColumns;\" (click)=\"viewRecord(row)\"\n                                    [style.cursor]=\"'pointer'\" matRipple>\n                                </mat-row>\n\n\n                                <tr *matNoDataRow>\n                                    <td colspan=\"{{ displayedColumns.length }}\"> No data matching the filter \"{{ input\n                                        }}\"</td>\n                                </tr>\n                            </mat-table>\n                            <div class=\"m-2 mx-2\" *ngIf=\"loading || downloadLoading\">\n                                <mat-progress-bar color=\"primary\" mode=\"indeterminate\">\n                                </mat-progress-bar>\n                            </div>\n                            <div *ngIf=\"loading\" class=\"tbl-spinner\">\n                                <mat-progress-spinner color=\"primary\" [diameter]=\"40\" mode=\"indeterminate\">\n                                </mat-progress-spinner>\n                            </div>\n\n                            <mat-paginator [pageSize]=\"10\" [pageSizeOptions]=\"[2, 5, 10, 20, 30, 40, 50, 100]\"\n                                aria-label=\"Select page of users\">\n                            </mat-paginator>\n\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</section>"],"names":[],"sourceRoot":"webpack:///"}