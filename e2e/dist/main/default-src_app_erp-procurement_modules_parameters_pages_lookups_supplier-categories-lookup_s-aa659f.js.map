{"version":3,"file":"default-src_app_erp-procurement_modules_parameters_pages_lookups_supplier-categories-lookup_s-aa659f.js","mappings":"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","sources":["./src/app/erp-procurement/modules/parameters/pages/lookups/supplier-categories-lookup/supplier-categories-lookup.component.ts","./src/app/erp-procurement/modules/parameters/pages/lookups/supplier-categories-lookup/supplier-categories-lookup.component.html","./src/app/erp-suppliersmanagement/data/supplier-maintenance.service.ts"],"sourcesContent":["import { SelectionModel } from '@angular/cdk/collections';\nimport { HttpParams } from '@angular/common/http';\nimport { Component, Inject, OnInit, ViewChild } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { MatMenuTrigger } from '@angular/material/menu';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { Subject, takeUntil, Subscription } from 'rxjs';\nimport { ManageRfqsComponent } from 'src/app/erp-procurement/modules/rfqs/pages/manage-rfqs/manage-rfqs.component';\nimport { SupplierCategoriesService } from 'src/app/erp-suppliersmanagement/data/supplier-categories.service';\nimport { SuppliersService } from 'src/app/erp-suppliersmanagement/data/supplier-maintenance.service';\nimport { SupplierProfileService } from 'src/app/erp-suppliersmanagement/data/supplier-profile.service';\nimport { SnackbarService } from 'src/app/shared/services/snackbar.service';\n\n@Component({\n  selector: 'app-supplier-categories-lookup',\n  templateUrl: './supplier-categories-lookup.component.html',\n  styleUrls: ['./supplier-categories-lookup.component.sass']\n})\nexport class SupplierCategoriesLookupComponent implements OnInit {\n\n \n\n  displayedColumns: string[] = [\n    \"select\",\n    \"id\",\n    \"supplierCategoryCode\",\n    \"supplierCategoryName\",\n    \"supplierCategoryDescription\",\n\n  ];\n\n  dataSource!: MatTableDataSource<any>;\n  @ViewChild(MatPaginator) paginator!: MatPaginator;\n  @ViewChild(MatSort) sort!: MatSort;\n\n  contextMenu: MatMenuTrigger;\n\n  selection = new SelectionModel<any>(false, []);\n\n  supplierDetails: any;\n  selectedRows: any[] = [];\n  atleastOneSelected: boolean = false;\n\n  dataSourceFilteredList: any[] = [];\n  suppliersArray: any[] = [];\n\n    destroy$: Subject<boolean> = new Subject<boolean>();\n\n  downloadLoading: boolean = false;\n\n  isLoading: boolean = true;\n\n  Form!: FormGroup;\n\n  reqCategories: any[] = [{ name: 'Electronics' }, { name: 'Furniture' }, { name: 'Telecommunication' }]\n\n  constructor(\n    public dialogRef: MatDialogRef<ManageRfqsComponent>,\n    @Inject(MAT_DIALOG_DATA) public data,\n    private fb: FormBuilder,\n    private snackbar: SnackbarService,\n    private supplierCategoriesService: SupplierCategoriesService\n  ) { }\n\n  ngOnInit(): void {\n    \n    console.log(\"data: \", this.data)\n    if (this.data.action === 'single supplier category') {\n      this.selection = new SelectionModel<any>(false, []);\n    } else {\n\n      this.selection = new SelectionModel<any>(true, []);\n\n    }\n\n    this.getData();\n\n  }\n  ngAfterViewInit() {\n\n    console.log(\"Finally: \", this.dataSourceFilteredList);\n\n\n  }\n\n\n  ngOnDestroy(): void {\n    this.destroy$.next(true);\n    this.destroy$.complete();\n  }\n\n  filter() {\n    //let storeId = [1, 2, 3];\n    this.dataSource.data.forEach((element) => {\n      this.suppliersArray.forEach((item) => {\n        if (item === element.id) {\n          // this.dataSourceFilteredList.push(this.dataSource.data.indexOf(element));\n          this.selection.select(element);\n        }\n      });\n    });\n\n    console.log(\"dataSourceFilteredList \", this.dataSourceFilteredList);\n  }\n\n\n  applyFilter(event: Event) {\n    const filterValue = (event.target as HTMLInputElement).value;\n    this.dataSource.filter = filterValue.trim().toLowerCase();\n    if (this.dataSource.paginator) {\n      this.dataSource.paginator.firstPage();\n    }\n  }\n  //******************************************************************************************************\n  //Select expense\n\n  /** Whether the number of selected elements matches the total number of rows. */\n  isAllSelected() {\n    const numSelected = this.selection.selected.length;\n    const numRows = this.dataSource.data.length;\n    return numSelected === numRows;\n  }\n\n  /** Selects all rows if they are not all selected; otherwise clear selection. */\n  masterToggle() {\n    if (this.isAllSelected()) {\n      this.selection.clear();\n      return;\n    }\n\n    this.selection.select(...this.dataSource.data);\n  }\n\n  /** The label for the checkbox on the passed row */\n  checkboxLabel(row?: any): string {\n    if (!row) {\n      return `${this.isAllSelected() ? \"deselect\" : \"select\"} all`;\n    }\n    return `${this.selection.isSelected(row) ? \"deselect\" : \"select\"} row ${row.position + 1\n      }`;\n  }\n\n  expSelected() {\n    this.atleastOneSelected = true;\n    this.selectedRows = this.selection.selected;\n\n    console.log(\"this.selectedRows: \", this.selectedRows);\n  }\n  proceed() {\n    this.dialogRef.close({ event: \"close\", data: this.selectedRows });\n\n    //   console.log(data);\n  }\n  //*************************************************************************************************************** */\n  onNoClick(): void {\n    this.dialogRef.close({ event: \"close\", data: this.selectedRows });\n  }\n  public confirmAdd(): void { }\n\n  getSelectedCategory(event: any) {\n\n    this.getData();\n  }\n\n  getData() {\n\n    this.dataSource = new MatTableDataSource<any>([]);\n    this.dataSource.paginator = this.paginator;\n    this.dataSource.sort = this.sort;\n    this.isLoading = true;\n\n    this.supplierCategoriesService.getCategories().pipe(takeUntil(this.destroy$)).subscribe(\n      {\n        next: (res) => {\n\n          console.log(\"this.suppliers categories: \", res);\n          if (res) {\n            this.data = res;\n\n            this.supplierDetails = res;\n            this.suppliersArray = this.data.selected;\n\n            console.log(\"this.suppliers categories: \", this.supplierDetails);\n\n            this.dataSource = new MatTableDataSource<any>(this.supplierDetails);\n            this.dataSource.paginator = this.paginator;\n            this.dataSource.sort = this.sort;\n\n\n            this.isLoading = false;\n\n          } else {\n\n            this.isLoading = false;\n            this.snackbar.showNotification(\n              \"snackbar-danger\", \"Error fetching suppliers\"\n            );\n\n          }\n\n        },\n        error: (err) => {\n          this.snackbar.showNotification(\n            \"snackbar-danger\", err\n          );\n        },\n        complete: () => {\n\n        }\n\n      }\n    ), Subscription;\n  }\n\n\n}\n","<div class=\"addContainer\">\n\n  <div class=\"contact-details\">\n    <div class=\"mb-3\" *ngIf=\"isLoading\">\n      <mat-progress-bar color=\"primary\" mode=\"indeterminate\">\n      </mat-progress-bar>\n    </div>\n    <div class=\"modalHeader\">\n      <div class=\"contact-details-name mb-1\">Select Supplier Category</div>\n      <button mat-icon-button (click)=\"dialogRef.close()\" aria-label=\"Close dialog\">\n        <mat-icon>close</mat-icon>\n      </button>\n    </div>\n    <div mat-dialog-content>\n      <mat-card-content>\n        <div *ngIf=\"isLoading\">\n          <div class=\"d-flex justify-content-center\">\n            <img src=\"assets/images/loading.gif\" style=\"display: block; margin: auto; width: 60px; height: 60px\" />\n          </div>\n        </div>\n\n        <div   class=\"body\">\n          <div class=\"table-responsi m-t-5\">\n            <ng-container *ngIf=\"!isLoading\">\n            <div class=\"table-header py-2 mx-3\" style=\"background-color: rgba(219, 218, 218, 0.836);\">\n              <div class=\"row\">\n                <div class=\"col-4 px-4\">\n                  <div class=\"mx-auto\">\n                    <input class=\"pull-left search form-control\" (keyup)=\"applyFilter($event)\" placeholder=\"Filter...\"\n                      #input />\n                  </div>\n                </div>\n\n                <div class=\"col-8 px-4\">\n                  <div class=\"mx-auto\">\n                    <div class=\"m-l-10\" [hidden]=\"!selection.hasValue()\">\n                      <button mat-mini-fab color=\"primary\" (click)=\"proceed()\" [class.auth-spinner]=\"multimodifyloading\"\n                        [disabled]=\"multimodifyloading\">\n                        <mat-icon class=\"col-white\">done_all </mat-icon>\n                      </button>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n          </ng-container>\n\n\n\n            <mat-table #table matTableExporter [dataSource]=\"dataSource\" matSort class=\"mat-cell\"\n              #exporter=\"matTableExporter\">\n\n              <ng-container matColumnDef=\"select\">\n                <mat-header-cell *matHeaderCellDef [ngClass]=\"'tbl-col-width-per-15'\">\n                  <mat-checkbox (change)=\"$event ? masterToggle() : null\"\n                    [checked]=\"selection.hasValue() && isAllSelected()\"\n                    [indeterminate]=\"selection.hasValue() && !isAllSelected()\" [ngClass]=\"'tbl-checkbox'\"\n                    (change)=\"expSelected()\">\n                  </mat-checkbox>\n                </mat-header-cell>\n                <mat-cell *matCellDef=\"let row\" [ngClass]=\"'tbl-col-width-per-15'\">\n                  <mat-checkbox (click)=\"$event.stopPropagation()\" (change)=\"$event ? selection.toggle(row) : null\"\n                    [checked]=\"selection.isSelected(row)\" [ngClass]=\"'tbl-checkbox'\" [aria-label]=\"checkboxLabel(row)\"\n                    (change)=\"expSelected()\">\n                  </mat-checkbox>\n                </mat-cell>\n              </ng-container>\n\n              <ng-container matColumnDef=\"id\">\n                <mat-header-cell *matHeaderCellDef mat-sort-header class=\"column-nowrap psl-3 tbl-col-width-per-10\">Id\n                </mat-header-cell>\n                <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-10\">{{ row.id }}</mat-cell>\n              </ng-container>\n\n              <ng-container matColumnDef=\"supplierCategoryCode\">\n                <mat-header-cell *matHeaderCellDef mat-sort-header class=\"column-nowrap psl-3 tbl-col-width-per-15\">\n                  Code\n                </mat-header-cell>\n                <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-15\">\n                  {{ row.supplierCategoryCode }}\n                </mat-cell>\n              </ng-container>\n              <ng-container matColumnDef=\"supplierCategoryName\">\n                <mat-header-cell *matHeaderCellDef mat-sort-header class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                  Name\n                </mat-header-cell>\n                <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                  {{ row.supplierCategoryName }}\n                </mat-cell>\n              </ng-container>\n              <ng-container matColumnDef=\"supplierCategoryDescription\">\n                <mat-header-cell *matHeaderCellDef mat-sort-header class=\"column-nowrap psl-3 tbl-col-width-per-50\">\n                  Description\n                </mat-header-cell>\n                <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-50\">\n                  {{ row.supplierCategoryDescription }}\n                </mat-cell>\n              </ng-container>\n\n\n              <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row>\n\n              <mat-row *matRowDef=\"let row; columns: displayedColumns\" [style.cursor]=\"'pointer'\" matRipple>\n              </mat-row>\n              <mat-cell *matNoDataRow colspan=\"4\">\n                No data matching the filter \"{{ input.value }}\"\n              </mat-cell>\n            </mat-table>\n\n            <!-- Loading spinner -->\n            <div *ngIf=\"isLoading\" class=\"tbl-spinner\">\n              <mat-progress-spinner color=\"primary\" [diameter]=\"40\" mode=\"indeterminate\">\n              </mat-progress-spinner>\n            </div>\n            <mat-paginator [pageSize]=\"8\" [pageSizeOptions]=\"[1,2, 5, 10, 20, 30, 40, 50, 100]\"\n              aria-label=\"Select page of users\"></mat-paginator>\n          </div>\n        </div>\n      </mat-card-content>\n    </div>\n  </div>\n</div>","import { HttpClient } from \"@angular/common/http\";\nimport { Injectable } from \"@angular/core\";\nimport { Observable } from \"rxjs\";\nimport { environment } from \"src/environments/environment.prod\";\n\n\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class SuppliersService {\n\n  constructor(private http: HttpClient) { }\n\n  getSuppliers(): Observable<any> {\n    const SupplierssUrl = `${environment.baseUrlProcurement}/api/v1/suppliers/all`;\n    return this.http.get<any[]>(SupplierssUrl);\n  }\n  getSuppliersByStatus(params: any): Observable<any> {\n    const SupplierssUrl = `${environment.baseUrlProcurement}/api/v1/suppliers/all/by/status`;\n    return this.http.get<any>(SupplierssUrl, {params});\n  }\n  \n  getSuppliersByCategory(params: any): Observable<any> {\n    const SupplierssUrl = `${environment.baseUrlProcurement}/api/v1/suppliers/category`;\n    return this.http.get<any>(SupplierssUrl, {params});\n  }\n  \n\n  getSuppliersById(params: any): Observable<any> {\n    const SupplierssUrl= `${environment.baseUrlProcurement}/api/v1/suppliers/find/by/id`;\n\n    return this.http.get<any>(SupplierssUrl, {params});\n  }\n\n  getSuppliersByCode(params: any): Observable<any> {\n    const SupplierssUrl= `${environment.baseUrlProcurement}/api/v1/suppliers/find/by/supplierCode`;\n\n    return this.http.get<any>(SupplierssUrl, {params});\n  }\n\n  addSuppliers(data: any): Observable<any> {\n    const SupplierssUrl = `${environment.baseUrlProcurement}/api/v1/suppliers/create`;\n    return this.http.post<any>(SupplierssUrl, data);\n  }\n\n  updateSuppliers(SuppliersDetails: any): Observable<any> {\n    const updateBillUrl = `${environment.baseUrlProcurement}/api/v1/suppliers/update`;\n    return this.http.put<any>(updateBillUrl, SuppliersDetails)\n  }\n\n  deleteSuppliersTemporarily(params: any): Observable<any> {\n    const SupplierssUrl = `${environment.baseUrlProcurement}/api/v1/suppliers/delete`;\n    return this.http.delete<any>(SupplierssUrl, {params});\n  }\n\n  validateSuppliers(dataToValidate: any): Observable<any> {\n    const updateBillUrl = `${environment.baseUrlProcurement}/api/v1/suppliers/update/state`;\n    return this.http.put<any>(updateBillUrl, dataToValidate)\n  }\n\n  addBulkSuppliers(data: any): Observable<any> {\n    const SupplierssUrl = `${environment.baseUrlProcurement}/api/v1/suppliers/create/bulk`;\n    return this.http.post<any>(SupplierssUrl, data);\n  }\n\n    // ********************************************************************************************************************\n\n\n\n}\n"],"names":[],"sourceRoot":"webpack:///"}