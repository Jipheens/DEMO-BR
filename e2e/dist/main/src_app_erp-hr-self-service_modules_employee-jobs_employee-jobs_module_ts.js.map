{"version":3,"file":"src_app_erp-hr-self-service_modules_employee-jobs_employee-jobs_module_ts.js","mappings":";;;;;;;;;;;;;;;;;AAiDO,MAAM,0BAA0B;IAcrC,YACU,QAAqB;QAArB,aAAQ,GAAR,QAAQ,CAAa;QAJ/B,uBAAkB,GAAkC,KAAK,CAAC;QAC1D,qBAAgB,GAAgC,KAAK,CAAC;IAKrD,CAAC;IAhBF,uBAAuB,CAAC,IAAY;QAClC,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC7C,CAAC;IACD,WAAW,CAAC,IAAY;QACtB,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC7C,CAAC;IACD,SAAS,CAAC,OAAY;QACpB,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC7C,CAAC;IASD,YAAY,CAAC,OAAW;QACtB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,EAAE;YAChC,kBAAkB,EAAE,IAAI,CAAC,kBAAkB;YAC3C,gBAAgB,EAAE,IAAI,CAAC,gBAAgB;YACvC,QAAQ,EAAE,IAAI;YACd,UAAU,EAAE,CAAC,aAAa,EAAE,kBAAkB,CAAC;SAChD,CAAC,CAAC;IACL,CAAC;IACD,YAAY,CAAC,OAAW;QACtB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,EAAE;YAC/B,kBAAkB,EAAE,IAAI,CAAC,kBAAkB;YAC3C,gBAAgB,EAAE,IAAI,CAAC,gBAAgB;YACvC,QAAQ,EAAE,IAAI;YACd,UAAU,EAAE,CAAC,aAAa,EAAE,iBAAiB,CAAC;SAC/C,CAAC,CAAC;IACL,CAAC;IACD,sBAAsB,CAAC,OAAW,EAAE,QAAe;QACjD,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,EAAE;YAC/B,kBAAkB,EAAE,IAAI,CAAC,kBAAkB;YAC3C,gBAAgB,EAAE,IAAI,CAAC,gBAAgB;YACvC,QAAQ,EAAE,QAAQ;YAClB,UAAU,EAAE,CAAC,aAAa,EAAE,iBAAiB,CAAC;SAC/C,CAAC,CAAC;IACL,CAAC;;oGAzCU,0BAA0B;2HAA1B,0BAA0B,WAA1B,0BAA0B,mBAFzB,MAAM;;;;;;;;;;;;;;;;;;;;AC9CmC;AACoC;AACiB;AACd;;;AAE9F,MAAM,MAAM,GAAW;IAGrB;QACE,IAAI,EAAE,UAAU;QAChB,SAAS,EAAE,uGAAyB;QACpC,WAAW,EAAE,CAAC,qHAAmB,CAAC;QAClC,IAAI,EAAE;YACJ,UAAU,EAAE,sBAAsB;YAClC,iBAAiB,EAAE,CAAC,WAAW,CAAC;SACjC;KACF;IAED;QACE,IAAI,EAAE,SAAS;QACf,SAAS,EAAE,oGAAwB;QACnC,WAAW,EAAE,CAAC,qHAAmB,CAAC;QAClC,IAAI,EAAE;YACJ,UAAU,EAAE,sBAAsB;YAClC,iBAAiB,EAAE,CAAC,WAAW,CAAC;SACjC;KACF;CAGF,CAAC;AAMK,MAAM,yBAAyB;;kGAAzB,yBAAyB;sHAAzB,yBAAyB;0HAH3B,CAAC,kEAAqB,CAAC,MAAM,CAAC,CAAC,EAC9B,yDAAY;mIAEX,yBAAyB,oFAF1B,yDAAY;;;;;;;;;;;;;;;;;;;;;;;;ACjCuB;AAE4B;AACmB;AACH;AACZ;AACnB;AACI;AAC8B;;AAkBvF,MAAM,kBAAkB;;oFAAlB,kBAAkB;+GAAlB,kBAAkB;mHATpB;YACP,yDAAY;YACZ,oFAAyB;YAEzB,wEAAe;YACf,yFAAgB;YAChB,sEAAY;SACb;mIAEU,kBAAkB,mBAb3B,uGAAyB;QACzB,oGAAwB;QACxB,uGAAyB,aAGzB,yDAAY;QACZ,oFAAyB;QAEzB,wEAAe;QACf,yFAAgB;QAChB,sEAAY;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxB0C;AACR;AAIS;AACV;AACY;AAEL;AAMzB;;;;;;;;;;;;;;;;;;;;;;;;;;;IC6Ba,qEAA0C;IAG9B,wSAAS,4BAAoB,UAAU,CAAC,IAAC;IAEzC,+EAA4B;IAAA,gEAAK;IAAA,4DAAW;;;;IAIxD,qEAA0C;IAG9B,wSAAS,4BAAoB,UAAU,CAAC,IAAC;IAEzC,+EAA4B;IAAA,iEAAM;IAAA,4DAAW;;;;IAIzD,qEAA0C;IAG9B,wSAAS,4BAAoB,UAAU,CAAC,IAAC;IAEzC,+EAA4B;IAAA,+DAAI;IAAA,4DAAW;;;;IAkG/D,sFAAqE;IACnC,4UAAmB,sBAAc,GAAG,IAAI,IAAC,qQAG9B,qBAAa,IAHiB;IAIvE,4DAAe;;;IALgB,0FAAiC;IAE5D,0DAAmD;IAAnD,0HAAmD;;;;IAK3D,+EAAkE;IAChC,wKAAS,wBAAwB,IAAC,wUACzC,iCAAqB,GAAG,IAAI,IADa,8PAGhB,qBAAa,IAHG;IAIhE,4DAAe;;;;IALa,0FAAiC;IAGzD,0DAAqC;IAArC,yGAAqC;;;IAO7C,sFACqD;IACjD,+DACJ;IAAA,4DAAkB;;;IAClB,+EAAiF;IAC7E,uDACJ;IAAA,4DAAW;;;IADP,0DACJ;IADI,sFACJ;;;IAIA,sFAAoG;IAChG,mEACJ;IAAA,4DAAkB;;;IAClB,+EAAiF;IAC7E,uDACJ;IAAA,4DAAW;;;IADP,0DACJ;IADI,0FACJ;;;IAIA,sFAAoG;IAChG,wEACJ;IAAA,4DAAkB;;;IAClB,+EAAiF;IAC7E,uDACJ;IAAA,4DAAW;;;IADP,0DACJ;IADI,8FACJ;;;IAIA,sFAAoG;IAChG,sEACJ;IAAA,4DAAkB;;;IAClB,+EAAiF;IAC7E,uDACJ;IAAA,4DAAW;;;IADP,0DACJ;IADI,4FACJ;;;IAIA,sFAAoG;IAChG,wEACJ;IAAA,4DAAkB;;;IAClB,+EAAiF;IAC7E,uDACJ;;IAAA,4DAAW;;;IADP,0DACJ;IADI,wKACJ;;;IAIA,sFAAoG;IAChG,2EACJ;IAAA,4DAAkB;;;IAClB,+EAAiF;IAC7E,uDACJ;IAAA,4DAAW;;;IADP,0DACJ;IADI,gGACJ;;;IAIA,sFAAoG;IAChG,+EACJ;IAAA,4DAAkB;;;IAClB,+EAAiF;IAC7E,uDACJ;IAAA,4DAAW;;;IADP,0DACJ;IADI,qGACJ;;;IAIA,sFAAoG;IAChG,uEACJ;IAAA,4DAAkB;;;IAClB,+EAAiF;IAC7E,uDACJ;IAAA,4DAAW;;;IADP,0DACJ;IADI,6FACJ;;;IAIA,sFAAoG;IAChG,sEACJ;IAAA,4DAAkB;;;IAClB,+EAAiF;IAC7E,uDACJ;IAAA,4DAAW;;;IADP,0DACJ;IADI,4FACJ;;;IAIA,sFAAoG;IAChG,wEACJ;IAAA,4DAAkB;;;IAClB,+EAAiF;IAC7E,uDACJ;IAAA,4DAAW;;;IADP,0DACJ;IADI,8FACJ;;;IAIA,sFAAoG;IAChG,0EACJ;IAAA,4DAAkB;;;IAClB,+EAAiF;IAC7E,uDACJ;IAAA,4DAAW;;;IADP,0DACJ;IADI,gGACJ;;;IAIA,sFAAoG;IAChG,yEACJ;IAAA,4DAAkB;;;IAClB,+EAAiF;IAC7E,uDACJ;IAAA,4DAAW;;;IADP,0DACJ;IADI,+FACJ;;;IAIA,sFAAoG;IAChG,wEACJ;IAAA,4DAAkB;;;IAClB,+EAAiF;IAC7E,uDACJ;IAAA,4DAAW;;;IADP,0DACJ;IADI,8FACJ;;;IAIA,sFAAoG;IAChG,sEACJ;IAAA,4DAAkB;;;IAClB,+EAAiF;IAC7E,uDACJ;IAAA,4DAAW;;;IADP,0DACJ;IADI,4FACJ;;;IAIA,sFAAoG;IAChG,6EACJ;IAAA,4DAAkB;;;IAClB,+EAAiF;IAC7E,uDACJ;IAAA,4DAAW;;;IADP,0DACJ;IADI,mGACJ;;;IAKA,sFACqD;IACjD,mEACJ;IAAA,4DAAkB;;;IAKV,6EACuD;IACnD,mEAAmC;IAAA,uDAEvC;IAAA,4DAAS;;;IAF8B,0DAEvC;IAFuC,gGAEvC;;;IACA,6EACqD;IACjD,mEAAmC;IAAA,uDAEvC;IAAA,4DAAS;;;IAF8B,0DAEvC;IAFuC,gGAEvC;;;IACA,6EACuD;IACnD,mEAA+B;IAAA,uDAEnC;IAAA,4DAAS;;;IAF0B,0DAEnC;IAFmC,gGAEnC;;;IACA,6EACsD;IAClD,mEAAyC;IAAA,uDAE7C;IAAA,4DAAS;;;IAFoC,0DAE7C;IAF6C,gGAE7C;;;IACA,6EACwD;IACpD,oEAA4B;IAAA,uDAEhC;IAAA,4DAAS;;;IAFuB,0DAEhC;IAFgC,gGAEhC;;;IAEA,8EACwD;IACpD,oEAAmC;IAAA,uDAEvC;IAAA,4DAAS;;;IAF8B,0DAEvC;IAFuC,gGAEvC;;;IAEA,6EAA4E;IACxE,oEAAsC;IAAA,uDAE1C;IAAA,4DAAS;;;IAFiC,0DAE1C;IAF0C,gGAE1C;;;IAvCR,+EAEuC;IAAnC,qKAAS,wBAAwB,IAAC;IAClC,4EAAsC;IAClC,wIAIS;IACT,wIAIS;IACT,wIAIS;IACT,wIAIS;IACT,wIAIS;IAET,wIAIS;IAET,wIAGS;IACb,qEAAe;IACnB,4DAAW;;;IAtCO,0DAAuB;IAAvB,oFAAuB;IACxB,0DAAwB;IAAxB,oFAAwB;IAKxB,0DAAwB;IAAxB,oFAAwB;IAKxB,0DAAwB;IAAxB,oFAAwB;IAKxB,0DAAuB;IAAvB,mFAAuB;IAKvB,0DAA2B;IAA3B,uFAA2B;IAM3B,0DAA4B;IAA5B,wFAA4B;;;IAc7C,sFACqD;IACjD,qEACJ;IAAA,4DAAkB;;;IAEd,wEAAiE;IAC7D,6EAA2D;IACvD,oEAA4B;IAAA,2EAChC;IAAA,4DAAS;IACb,qEAAe;;;IAEX,6EAAyD;IACrD,oEAA4B;IAAA,+EAChC;IAAA,4DAAS;;;IATjB,+EAAiF;IAC7E,qJAIe;IACf,+NAIc;IAClB,4DAAW;;;;IAVQ,0DAAgC;IAAhC,8FAAgC;;;IAcnD,sFACqD;IACjD,oEACJ;IAAA,4DAAkB;;;IAEd,wEAA+D;IAC3D,6EAAyD;IACrD,oEAA4B;IAAA,0EAChC;IAAA,4DAAS;IACb,qEAAe;;;IAEX,6EAA2D;IACvD,oEAA4B;IAAA,yEAChC;IAAA,4DAAS;;;IATjB,+EAAiF;IAC7E,qJAIe;IACf,+NAIc;IAClB,4DAAW;;;;IAVQ,0DAA+B;IAA/B,8FAA+B;;;IAoBlD,uFACsB;IAClB,mEACJ;IAAA,4DAAkB;;;;IAClB,gFAC0D;IAmBf,mKAAS,wBAAwB,IAAC,qTAC5D,kCAAoB,IADwC;IAErE,oFACoB;IACxB,4DAAS;;IAFiC,0DAA0B;IAA1B,0EAA0B;IAA7C,2EAAkB;;;IAKjD,4EACiB;;;;IACjB,+EACyC;IADiB,6WAAS,6BAAe,IAAC;IAEnF,4DAAU;;IADN,8EAA0B;;;IAI9B,qEAAkB;IAC+B,uDACtC;IAAA,4DAAK;;;IADR,0DAAuC;IAAvC,+GAAuC;IAAE,0DACtC;IADsC,wHACtC;;;IAGf,2EAAyD;IACrD,mFACmB;IACvB,4DAAM;;;IACN,2EAAyC;IACrC,uFACuB;IAC3B,4DAAM;;IAFoC,0DAAe;IAAf,wEAAe;;;;ADrb9E,MAAM,wBAAwB;IA0CnC,YACU,MAAiB,EACjB,eAA2C,EAC3C,wBAAkD,EAClD,QAAyB,EACzB,EAAe,EACf,MAAc,EACd,eAAgC,EAChC,mBAAuC;QAPvC,WAAM,GAAN,MAAM,CAAW;QACjB,oBAAe,GAAf,eAAe,CAA4B;QAC3C,6BAAwB,GAAxB,wBAAwB,CAA0B;QAClD,aAAQ,GAAR,QAAQ,CAAiB;QACzB,OAAE,GAAF,EAAE,CAAa;QACf,WAAM,GAAN,MAAM,CAAQ;QACd,oBAAe,GAAf,eAAe,CAAiB;QAChC,wBAAmB,GAAnB,mBAAmB,CAAoB;QAhDjD,qBAAgB,GAAa;YAC3B,YAAY;YACZ,IAAI;YACJ,UAAU;YACV,iBAAiB;YACjB,cAAc;YACd,mBAAmB;YACnB,gBAAgB;YAChB,cAAc;YACd,YAAY;YACZ,WAAW;YACX,UAAU;YACV,gBAAgB;YAChB,cAAc;YACd,aAAa;YACb,eAAe;YACf,QAAQ;YACR,QAAQ;SACT,CAAC;QAEF,YAAO,GAAY,KAAK,CAAC;QAIzB,aAAQ,GAAqB,IAAI,0CAAO,EAAW,CAAC;QAMpD,cAAS,GAAG,IAAI,qEAAc,CAAM,IAAI,EAAE,EAAE,CAAC,CAAC;QAE9C,oBAAe,GAAY,KAAK,CAAC;QACjC,YAAO,GAAY,KAAK,CAAC;QACzB,aAAQ,GAAY,KAAK,CAAC;QAkE1B,+FAA+F;QAC/F,gBAAW,GAAU;YACnB,EAAE,IAAI,EAAE,KAAK,EAAE;YACf,EAAE,IAAI,EAAE,SAAS,EAAE;YACnB,EAAE,IAAI,EAAE,aAAa,EAAE;YACvB,EAAE,IAAI,EAAE,cAAc,EAAE;YACxB,EAAE,IAAI,EAAE,UAAU,EAAE;YACpB,EAAE,IAAI,EAAE,UAAU,EAAE;YACpB,EAAE,IAAI,EAAE,UAAU,EAAE;SACrB,CAAC;QAEF,mBAAc,GAAW,KAAK,CAAC;QAqH/B,+HAA+H;QAC/H,iBAAY,GAAU,EAAE,CAAC;QACzB,uBAAkB,GAAY,KAAK,CAAC;QA6BpC,cAAS,GAAY,IAAI,CAAC;QAhNtB,IAAI,CAAC,iBAAiB,EAAE;IAAC,CAAC;IAE9B,QAAQ;QAEN,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,mBAAmB,CAAC,OAAO,EAAE,CAAC,OAAO,CAAC;QAGlE,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC;YACxB,UAAU,EAAE,CAAC,EAAE,CAAC;SACjB,CAAC,CAAC;QACH,2CAA2C;QAC3C,oBAAoB;QACpB,MAAM;QAGN,iBAAiB;IAEnB,CAAC;IAED,WAAW;QACT,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACzB,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC;IAC3B,CAAC;IAGD,iBAAiB;QACf,IAAI,KAAK,GAAG,IAAI,6DAAU,EAAE,CAAC,GAAG,CAAC,OAAO,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC;QAChE,IAAI,CAAC,eAAe;aACjB,gBAAgB,CAAC,KAAK,CAAC;aACvB,IAAI,CAAC,gDAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;aAC9B,SAAS,CAAC;YACT,IAAI,EAAE,CAAC,GAAG,EAAE,EAAE;gBACZ,IAAI,GAAG,CAAC,MAAM,EAAE;oBACd,IAAI,CAAC,WAAW,GAAG,GAAG,CAAC,MAAM,CAAC;oBAC9B,OAAO,CAAC,GAAG,CAAC,6BAA6B,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;oBAC7D,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC;wBACnB,UAAU,EAAE,IAAI,CAAC,WAAW,CAAC,UAAU;qBACxC,CAAC;oBACF,IAAI,CAAC,OAAO,EAAE,CAAC;iBAChB;qBAAM;oBACL,iEAAiE;iBAClE;YACH,CAAC;YACD,KAAK,EAAE,CAAC,GAAG,EAAE,EAAE;gBACb,iEAAiE;YACnE,CAAC;YACD,QAAQ,EAAE,GAAG,EAAE,GAAG,CAAC;SACpB,CAAC,CAAC;IACP,CAAC;IAaD,uBAAuB;QACrB,IAAI,CAAC,OAAO,EAAE,CAAC;IACjB,CAAC;IACD,iBAAiB,CAAC,MAAW;QAC3B,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC;YACnB,MAAM,EAAE,MAAM;SACf,CAAC,CAAC;QAEH,IAAI,CAAC,OAAO,EAAE,CAAC;IACjB,CAAC;IAGD,OAAO;QACL,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QACpB,IAAI,CAAC,UAAU,GAAG,IAAI,wEAAkB,CAAC,EAAE,CAAC,CAAC;QAC7C,IAAI,CAAC,UAAU,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;QAC3C,IAAI,CAAC,UAAU,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;QAEjC,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC;QAC7C,IAAI,MAAM,GAAG;YACX,UAAU,EAAE,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU;SACvC,CAAC;QAEF,IAAI,CAAC,wBAAwB;aAC1B,gBAAgB,CAAC,MAAM,CAAC;aACxB,IAAI,CAAC,gDAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;aAC9B,SAAS,CAAC;YACT,IAAI,EAAE,CAAC,GAAG,EAAE,EAAE;gBACZ,IAAI,GAAG,CAAC,UAAU,KAAK,GAAG,EAAE;oBAC1B,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC,MAAM,CAAC;oBACvB,OAAO,CAAC,GAAG,CAAC,yBAAyB,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;oBAElD,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;oBACrB,IAAI,CAAC,UAAU,GAAG,IAAI,wEAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;oBACpD,IAAI,CAAC,UAAU,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;oBAC3C,IAAI,CAAC,UAAU,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;iBAClC;qBAAM;oBACL,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;oBAErB,IAAI,CAAC,eAAe,CAAC,YAAY,CAC/B,GAAG,CAAC,OAAO,CACZ,CAAC;iBACH;YACH,CAAC;YACD,KAAK,EAAE,CAAC,GAAG,EAAE,EAAE;gBACb,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;gBACrB,IAAI,CAAC,eAAe,CAAC,YAAY,CAC/B,gBAAgB,GAAG,GAAG,CAAC,OAAO,CAC/B,CAAC;YACJ,CAAC;YACD,QAAQ,EAAE,GAAG,EAAE,GAAG,CAAC;SACpB,CAAC,CAAC;IACP,CAAC;IACD,OAAO;QACL,IAAI,CAAC,OAAO,EAAE,CAAC;IACjB,CAAC;IAED,SAAS,CAAC,MAAW,EAAE,MAAY;QACjC,IAAI,KAAK,GAAG,6CAA6C,CAAC;QAC1D,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,KAAK,CAAC,EAAE;YAC5B,WAAW,EAAE;gBACX,WAAW,EAAE,MAAM,CAAC,SAAS;gBAC7B,MAAM,EAAE,MAAM;aACf;SACF,CAAC,CAAC;IACL,CAAC;IACD,YAAY,CAAC,EAAU;QACrB,IAAI,MAAM,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE;QACvB,uDAAS,CAAC;YACR,KAAK,EAAE,eAAe;YACtB,IAAI,EAAE,2CAA2C;YACjD,IAAI,EAAE,SAAS;YACf,gBAAgB,EAAE,IAAI;YACtB,kBAAkB,EAAE,SAAS;YAC7B,iBAAiB,EAAE,MAAM;YACzB,iBAAiB,EAAE,iBAAiB;SACrC,CAAC,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE;YACjB,IAAI,MAAM,CAAC,WAAW,EAAE;gBACtB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;gBACpB,IAAI,CAAC,wBAAwB;qBAC1B,MAAM,CAAC,MAAM,CAAC;qBACd,IAAI,CAAC,gDAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;qBAC9B,SAAS,CAAC;oBACT,IAAI,EAAE,CAAC,GAAG,EAAE,EAAE;wBACZ,IAAI,GAAG,CAAC,UAAU,IAAI,GAAG,EAAE;4BACzB,IAAI,CAAC,OAAO,EAAE,CAAC;4BACf,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;4BACrB,IAAI,CAAC,eAAe,CAAC,YAAY,CAC/B,6BAA6B,CAC9B,CAAC;yBACH;6BAAM;4BACL,IAAI,CAAC,OAAO,EAAE,CAAC;4BACf,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;4BACrB,IAAI,CAAC,eAAe,CAAC,YAAY,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;yBAChD;oBACH,CAAC;oBACD,KAAK,EAAE,CAAC,GAAG,EAAE,EAAE;wBACb,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;wBACrB,IAAI,CAAC,eAAe,CAAC,YAAY,CAAC,gBAAgB,GAAG,GAAG,CAAC,OAAO,CAAC,CAAC;oBACpE,CAAC;oBACD,QAAQ,EAAE,GAAG,EAAE,GAAG,CAAC;iBACpB,CAAC,CAAC;aACN;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAGD,WAAW,CAAC,KAAY;QACtB,MAAM,WAAW,GAAI,KAAK,CAAC,MAA2B,CAAC,KAAK,CAAC;QAC7D,IAAI,CAAC,KAAK,GAAG,WAAW,CAAC;QACzB,IAAI,CAAC,UAAU,CAAC,MAAM,GAAG,WAAW,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;QAC1D,IAAI,IAAI,CAAC,UAAU,CAAC,SAAS,EAAE;YAC7B,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,SAAS,EAAE,CAAC;SACvC;IACH,CAAC;IAKD,aAAa;QACX,MAAM,WAAW,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,MAAM,CAAC;QACnD,MAAM,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC;QAC5C,OAAO,WAAW,KAAK,OAAO,CAAC;IACjC,CAAC;IACD,YAAY;QACV,IAAI,IAAI,CAAC,aAAa,EAAE,EAAE;YACxB,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC;YACvB,OAAO;SACR;QAED,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;IACjD,CAAC;IACD,aAAa,CAAC,GAAS;QACrB,IAAI,CAAC,GAAG,EAAE;YACR,OAAO,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,QAAQ,MAAM,CAAC;SAC9D;QACD,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,GAAG,CACrF,EAAE,CAAC;IACP,CAAC;IAED,WAAW;QACT,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC;QAC/B,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC;QAE5C,OAAO,CAAC,GAAG,CAAC,qBAAqB,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;IACxD,CAAC;IAGD,mBAAmB,CAAC,MAAW;QAC7B,IAAI,SAAS,GAAG,mBAAmB,CAAC;QAEpC,6EAA6E;QAC7E,eAAe;QACf,MAAM;QAEN,IAAI,IAAI,CAAC,SAAS,EAAE;YAClB,uDAAS,CAAC;gBACZ,KAAK,EAAE,8DAA8D;gBACrE,KAAK,EAAE,UAAU;gBACjB,gBAAgB,EAAE,2BAA2B;gBAC7C,iBAAiB,EAAE,QAAQ;gBAC3B,gBAAgB,EAAE,IAAI;gBACtB,gBAAgB,EAAE,QAAQ;gBAC1B,IAAI,EAAE,MAAM;gBAEZ,cAAc,EAAE,CAAC,KAAK,EAAE,EAAE;oBACpB,IAAI,CAAC,KAAK,EAAE;wBACV,OAAO,2BAA2B,CAAC;qBACpC;gBACH,CAAC;aACF,CAAC,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE;gBACjB,IAAI,MAAM,CAAC,WAAW,EAAE;oBACtB,MAAM,eAAe,GAAG,MAAM,CAAC,KAAK,CAAC;oBAErC,MAAM,aAAa,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,EAAE;wBACtD,OAAO;4BACL,EAAE,EAAE,OAAO,CAAC,EAAE;4BACd,MAAM,EAAE,MAAM;4BACd,eAAe,EAAE,eAAe;yBACjC,CAAC;oBACJ,CAAC,CAAC,CAAC;oBAEH,OAAO,CAAC,GAAG,CAAC,OAAO,EAAE,aAAa,CAAC,CAAC;oBAEpC,IAAI,CAAC,wBAAwB;yBAC1B,MAAM,CAAC,aAAa,CAAC;yBACrB,IAAI,CAAC,gDAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;yBAC9B,SAAS,CAAC;wBACT,IAAI,EAAE,CAAC,GAAG,EAAE,EAAE;4BACZ,OAAO,CAAC,GAAG,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC;4BAC1B,IAAI,GAAG,CAAC,UAAU,IAAI,GAAG,IAAI,GAAG,IAAI,CAAG,EAAE;gCACvC,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAC5B,kBAAkB,EAClB,GAAG,CAAC,OAAO,CACZ,CAAC;gCAEF,IAAI,CAAC,SAAS,GAAG,IAAI,qEAAc,CAAM,IAAI,EAAE,EAAE,CAAC,CAAC;gCACnD,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC;6BACxB;iCAAM,EAKN;wBACH,CAAC;wBACD,KAAK,EAAE,CAAC,GAAG,EAAE,EAAE;4BACb,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,iBAAiB,EAAE,GAAG,CAAC,OAAO,CAAC,CAAC;wBACjE,CAAC;wBACD,QAAQ,EAAE,GAAG,EAAE;4BACb,IAAI,CAAC,OAAO,EAAE,CAAC;wBACjB,CAAC;qBACF,CAAC;wBACF,+CAAY,CAAC;iBAChB;qBAAM;oBACL,IAAI,CAAC,SAAS,GAAG,IAAI,qEAAc,CAAM,IAAI,EAAE,EAAE,CAAC,CAAC;oBACnD,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC;iBACxB;YACH,CAAC,CAAC,CAAC;SACJ;IACH,CAAC;;gGA7UU,wBAAwB;sHAAxB,wBAAwB;kEA6BxB,sEAAY;kEACZ,4DAAO;;;;;;;QCpDpB,6EAAyB;QAIb,+EACiB;QACrB,4DAAM;QAEN,6EAAmC;QAEnC,yEAAiB;QAW2B,4EAAgB;QAAA,4DAAK;QAE7B,0EAA4B;QAEmB,kEAAM;QAAA,4DAAI;QACrD,iFAE4B;QAFe,sJAAS,uBAAmB,IAAC;QAAxE,4DAE4B;QAEhC,sEAAI;QAEyC,iJAAS,cAAU,KAAK,EAAC,EAAE,CAAC,IAAC;QAC9D,gFAA4B;QAAA,+DAAG;QAAA,4DAAW;QAItD,sEAAI;QAEyC,iJAAS,aAAS,IAAC;QACpD,gFAA4B;QAAA,mEAAO;QAAA,4DAAW;QAI1D,qHAQK;QACL,qHAQK;QACL,qHAQK;QACT,4DAAK;QAET,2EAAmB;QAKC,6RAAS,gBAAqB,MAAM,cAAY,aAAa,SAAS,QAAQ,GAAE,IAAC;QADrF,4DACwF;QAGhG,sEAAI;QAGQ,6RAAS,gBAAqB,KAAK,CAAC,IAAC;QADzC,4DAC4C;QAGpD,sEAAI;QAGQ,6RAAS,gBAAqB,MAAM,CAAC,IAAC;QAD1C,4DAC6C;QAGrD,sEAAI;QAGQ,6RAAS,gBAAqB,KAAK,CAAC,IAAC;QADzC,4DAC4C;QAiEpE,qFACiC;QAE7B,6EAAoC;QAChC,+IAMkB;QAClB,iIAMW;QACf,qEAAe;QAEf,6EAAgC;QAC5B,+IAGkB;QAClB,iIAEW;QACf,qEAAe;QAEf,6EAAoC;QAChC,+IAEkB;QAClB,iIAEW;QACf,qEAAe;QAEf,6EAAwC;QACpC,+IAEkB;QAClB,iIAEW;QACf,qEAAe;QAEf,6EAAsC;QAClC,+IAEkB;QAClB,iIAEW;QACf,qEAAe;QAEf,6EAAwC;QACpC,+IAEkB;QAClB,iIAEW;QACf,qEAAe;QAEf,6EAA0C;QACtC,+IAEkB;QAClB,iIAEW;QACf,qEAAe;QAEf,6EAA+C;QAC3C,+IAEkB;QAClB,iIAEW;QACf,qEAAe;QAEf,6EAAuC;QACnC,+IAEkB;QAClB,iIAEW;QACf,qEAAe;QAEf,6EAAsC;QAClC,+IAEkB;QAClB,iIAEW;QACf,qEAAe;QAEf,6EAAwC;QACpC,+IAEkB;QAClB,iIAEW;QACf,qEAAe;QAEf,6EAA0C;QACtC,+IAEkB;QAClB,iIAEW;QACf,qEAAe;QAEf,6EAAyC;QACrC,+IAEkB;QAClB,iIAEW;QACf,qEAAe;QAEf,6EAAwC;QACpC,+IAEkB;QAClB,iIAEW;QACf,qEAAe;QAEf,6EAAsC;QAClC,+IAEkB;QAClB,iIAEW;QACf,qEAAe;QAEf,6EAA6C;QACzC,+IAEkB;QAClB,mIAEW;QACf,qEAAe;QAGf,8EAAoC;QAChC,iJAGkB;QAClB,mIAyCW;QACf,qEAAe;QACf,8EAA0C;QACtC,iJAGkB;QAClB,mIAWW;QACf,qEAAe;QAEf,8EAAyC;QACrC,iJAGkB;QAClB,mIAWW;QACf,qEAAe;QAQf,8EAAoC;QAChC,iJAGkB;QAClB,mIAyBW;QACf,qEAAe;QACf,+IACiB;QACjB,iIAEU;QAGV,uHAGK;QACT,4DAAY;QACZ,yHAGM;QACN,yHAGM;QAEN,iFAEgB;QAEpB,4DAAM;;QA/cF,0DAAgC;QAAhC,yFAAgC;QAwCX,2DAAmC;QAAnC,mGAAmC;QASnC,0DAAmC;QAAnC,mGAAmC;QASnC,0DAAmC;QAAnC,mGAAmC;QAmGrB,2DAAyB;QAAzB,sFAAyB;QAyRvC,2DAAiC;QAAjC,iGAAiC;QAEpB,0DAA0B;QAA1B,kGAA0B;QAUrC,0DAAgC;QAAhC,oGAAgC;QAIjD,0DAAa;QAAb,6EAAa;QAKJ,0DAAe;QAAf,wEAAe;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/cA;AACR;AAGoB;AACX;AACV;AACY;AAEL;AAKzB;AACgE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IC6BnD,sEAA0C;IAG9B,4SAAS,4BAAoB,UAAU,CAAC,IAAC;IAEzC,gFAA4B;IAAA,iEAAK;IAAA,6DAAW;;;;IAIxD,sEAA0C;IAG9B,4SAAS,4BAAoB,UAAU,CAAC,IAAC;IAEzC,gFAA4B;IAAA,kEAAM;IAAA,6DAAW;;;;IAIzD,sEAA0C;IAG9B,4SAAS,4BAAoB,UAAU,CAAC,IAAC;IAEzC,gFAA4B;IAAA,gEAAI;IAAA,6DAAW;;;IAkD/C,kFAC6B;IAAA,wDAE7B;IAAA,6DAAa;;;IAFT,sFAAwB;IAAC,2DAE7B;IAF6B,8FAE7B;;;IAGJ,6EAA2D;IACvD,kFACJ;IAAA,6DAAY;;;IA2CR,kFAC8B;IAAA,wDAE9B;IAAA,6DAAa;;;IAFT,uFAAyB;IAAC,2DAE9B;IAF8B,+FAE9B;;;IAGJ,6EAA4D;IACxD,oFACJ;IAAA,6DAAY;;;;IAuCxB,uFAAqE;IACnC,gVAAmB,sBAAc,GAAG,IAAI,IAAC,wQAG9B,qBAAa,IAHiB;IAIvE,6DAAe;;;IALgB,2FAAiC;IAE5D,2DAAmD;IAAnD,6HAAmD;;;;IAK3D,gFAAkE;IAChC,0KAAS,wBAAwB,IAAC,2UACzC,iCAAqB,GAAG,IAAI,IADa,iQAGhB,qBAAa,IAHG;IAIhE,6DAAe;;;;IALa,2FAAiC;IAGzD,2DAAqC;IAArC,2GAAqC;;;IAO7C,uFACqD;IACjD,gEACJ;IAAA,6DAAkB;;;IAClB,gFAAiF;IAC7E,wDACJ;IAAA,6DAAW;;;IADP,2DACJ;IADI,uFACJ;;;IAIA,uFAAmF;IAC/E,wEACJ;IAAA,6DAAkB;;;IAClB,gFAAgF;IAC5E,wDACJ;IAAA,6DAAW;;;IADP,2DACJ;IADI,iGACJ;;;IAIA,uFAAoF;IAChF,mEACJ;IAAA,6DAAkB;;;IAClB,gFAAiF;IAC7E,wDACJ;IAAA,6DAAW;;;IADP,2DACJ;IADI,6FACJ;;;IASA,uFAAoF;IAChF,wEACJ;IAAA,6DAAkB;;;IAClB,gFAAiF;IAC7E,wDACJ;IAAA,6DAAW;;;IADP,2DACJ;IADI,oGACJ;;;IAIA,uFAAoF;IAChF,mEACJ;IAAA,6DAAkB;;;IAClB,gFAAiF;IAC7E,wDACJ;IAAA,6DAAW;;;IADP,2DACJ;IADI,6FACJ;;;IAIA,uFAAoF;IAChF,kEACJ;IAAA,6DAAkB;;;IAClB,gFAAiF;IAC7E,wDACJ;IAAA,6DAAW;;;IADP,2DACJ;IADI,4FACJ;;;IAIA,uFACqD;IACjD,oEACJ;IAAA,6DAAkB;;;IAKV,8EACuD;IACnD,oEAAmC;IAAA,wDAEvC;IAAA,6DAAS;;;IAF8B,2DAEvC;IAFuC,iGAEvC;;;IACA,8EACqD;IACjD,qEAAmC;IAAA,wDAEvC;IAAA,6DAAS;;;IAF8B,2DAEvC;IAFuC,iGAEvC;;;IACA,+EACuD;IACnD,qEAA+B;IAAA,wDAEnC;IAAA,6DAAS;;;IAF0B,2DAEnC;IAFmC,iGAEnC;;;IACA,+EACsD;IAClD,qEAAyC;IAAA,wDAE7C;IAAA,6DAAS;;;IAFoC,2DAE7C;IAF6C,iGAE7C;;;IACA,+EAA4E;IACxE,qEAAsC;IAAA,wDAE1C;IAAA,6DAAS;;;IAFiC,2DAE1C;IAF0C,iGAE1C;;;IA3BR,gFAEuC;IAAnC,uKAAS,wBAAwB,IAAC;IAClC,6EAAsC;IAClC,0IAIS;IACT,0IAIS;IACT,0IAIS;IACT,0IAIS;IACT,0IAGS;IACb,sEAAe;IACnB,6DAAW;;;IA1BO,2DAAuB;IAAvB,qFAAuB;IACxB,2DAAwB;IAAxB,qFAAwB;IAKxB,2DAAwB;IAAxB,qFAAwB;IAKxB,2DAAwB;IAAxB,qFAAwB;IAKxB,2DAAuB;IAAvB,oFAAuB;;;IAcxC,uFAAoF;IAChF,2EACJ;IAAA,6DAAkB;;;IAClB,gFAAiF;IAC7E,wDACJ;;IAAA,6DAAW;;;IADP,2DACJ;IADI,mKACJ;;;IAIA,uFAAoF;IAChF,mEAAM;IAAA,6DAAkB;;;;IAC5B,gFAAiF;IAItC,qKAAS,wBAAwB,IAAC,qTAC5D,kBAAU,QAAQ,UAAM,IADoC;IAErE,qFACoB;IACxB,6DAAS;;IAF8B,2DAAwB;IAAxB,yEAAwB;IAAxC,yEAAe;;;IAW1C,uFACqD;IAAA,qEAAS;IAAA,6DAAkB;;;;IAChF,gFAAiF;IACrC,8WAAS,kBAAU,MAAM,UAAM,IAAC;IACpE,4EAAU;IAAA,0EAAc;IAAA,6DAAW;IAEvC,+EAAoE;IAA/B,8WAAS,gCAAoB,IAAC;IAC/D,4EAAU;IAAA,kEAAM;IAAA,6DAAW;;;IAKvC,6EACiB;;;;IACjB,gFACyC;IADgB,8WAAS,2BAAe,IAAC;IAElF,6DAAU;;IADN,+EAA0B;;;IAG9B,sEAAkB;IAEV,wDACJ;IAAA,6DAAK;;;IAFD,2DAAuC;IAAvC,gHAAuC;IACvC,2DACJ;IADI,0HACJ;;;IAGR,4EAAyD;IACrD,oFACmB;IACvB,6DAAM;;;IACN,4EAAyC;IACrC,wFACuB;IAC3B,6DAAM;;IAFoC,2DAAe;IAAf,yEAAe;;;;AD3W9E,MAAM,yBAAyB;IAiCpC,YACU,MAAiB,EACjB,eAA2C,EAC3C,oBAA0C,EAC1C,QAAyB,EACzB,MAAc,EACd,EAAe,EACf,mBAAuC,EACvC,eAAgC;QAPhC,WAAM,GAAN,MAAM,CAAW;QACjB,oBAAe,GAAf,eAAe,CAA4B;QAC3C,yBAAoB,GAApB,oBAAoB,CAAsB;QAC1C,aAAQ,GAAR,QAAQ,CAAiB;QACzB,WAAM,GAAN,MAAM,CAAQ;QACd,OAAE,GAAF,EAAE,CAAa;QACf,wBAAmB,GAAnB,mBAAmB,CAAoB;QACvC,oBAAe,GAAf,eAAe,CAAiB;QAvC1C,qBAAgB,GAAa;YAC3B,YAAY;YACZ,cAAc;YACd,OAAO;YACP,iBAAiB;YACjB,UAAU;YACV,SAAS;YACT,QAAQ;YACR,cAAc;YACd,cAAc;YACd,QAAQ;SACT,CAAC;QACF,YAAO,GAAY,KAAK,CAAC;QAIzB,aAAQ,GAAqB,IAAI,0CAAO,EAAW,CAAC;QAMpD,cAAS,GAAG,IAAI,qEAAc,CAAM,IAAI,EAAE,EAAE,CAAC,CAAC;QAE9C,oBAAe,GAAY,KAAK,CAAC;QACjC,YAAO,GAAY,KAAK,CAAC;QACzB,aAAQ,GAAY,KAAK,CAAC;QA6D1B,+FAA+F;QAC/F,gBAAW,GAAU;YACnB,mBAAmB;YACnB,uBAAuB;YACvB,EAAE,IAAI,EAAE,UAAU,EAAE;YACpB,wBAAwB;YACxB,wBAAwB;SACzB,CAAC;QACF,gBAAW,GAAU;YACnB,mBAAmB;YACnB,wBAAwB;YACxB,EAAE,IAAI,EAAE,cAAc,EAAE;YACxB,EAAE,IAAI,EAAE,cAAc,EAAE;SAEzB,CAAC;QACF,mBAAc,GAAW,UAAU,CAAC;QACpC,oBAAe,GAAW,cAAc,CAAC;QAmIzC,+HAA+H;QAC/H,iBAAY,GAAU,EAAE,CAAC;QACzB,uBAAkB,GAAY,KAAK,CAAC;QA6BpC,cAAS,GAAY,IAAI,CAAC;IAhOtB,CAAC;IAEL,QAAQ;QACN,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,mBAAmB,CAAC,OAAO,EAAE,CAAC,OAAO,CAAC;QAGlE,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC;YACxB,MAAM,EAAE,CAAC,UAAU,CAAC;YACpB,OAAO,EAAE,CAAC,cAAc,CAAC;SAC1B,CAAC,CAAC;QACH,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,GAAG,EAAE;YACpC,IAAI,CAAC,OAAO,EAAE,CAAC;QACjB,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,OAAO,EAAE,CAAC;QACf,IAAI,CAAC,iBAAiB,EAAE;IAG1B,CAAC;IAED,WAAW;QACT,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACzB,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC;IAC3B,CAAC;IAGD,iBAAiB;QACf,IAAI,KAAK,GAAG,IAAI,6DAAU,EAAE,CAAC,GAAG,CAAC,OAAO,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC;QAChE,IAAI,CAAC,eAAe;aACjB,gBAAgB,CAAC,KAAK,CAAC;aACvB,IAAI,CAAC,gDAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;aAC9B,SAAS,CAAC;YACT,IAAI,EAAE,CAAC,GAAG,EAAE,EAAE;gBACZ,IAAI,GAAG,CAAC,MAAM,EAAE;oBACd,IAAI,CAAC,WAAW,GAAG,GAAG,CAAC,MAAM,CAAC;oBAC9B,OAAO,CAAC,GAAG,CAAC,6BAA6B,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;iBAC9D;qBAAM;oBACL,iEAAiE;iBAClE;YACH,CAAC;YACD,KAAK,EAAE,CAAC,GAAG,EAAE,EAAE;gBACb,iEAAiE;YACnE,CAAC;YACD,QAAQ,EAAE,GAAG,EAAE,GAAG,CAAC;SACpB,CAAC,CAAC;IACP,CAAC;IAoBD,uBAAuB;QACrB,IAAI,CAAC,OAAO,EAAE,CAAC;IACjB,CAAC;IACD,iBAAiB,CAAC,MAAW;QAC3B,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC;YACnB,MAAM,EAAE,MAAM;SACf,CAAC,CAAC;IACL,CAAC;IACD,eAAe,CAAC,IAAS;QACvB,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC;YACnB,OAAO,EAAE,IAAI;SACd,CAAC,CAAC;IACL,CAAC;IACD,OAAO;QACL,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QACpB,IAAI,CAAC,UAAU,GAAG,IAAI,wEAAkB,CAAC,EAAE,CAAC,CAAC;QAC7C,IAAI,CAAC,UAAU,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;QAC3C,IAAI,CAAC,UAAU,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;QAEjC,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC;QAC7C,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC;QAE/C,IAAI,MAAM,GAAG;YACX,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM;YAC9B,eAAe,EAAE,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO;SACzC,CAAC;QAEF,IAAI,CAAC,oBAAoB;aACtB,8BAA8B,CAAC,MAAM,CAAC;aACtC,IAAI,CAAC,gDAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;aAC9B,SAAS,CAAC;YACT,IAAI,EAAE,CAAC,GAAG,EAAE,EAAE;gBACZ,IAAI,GAAG,CAAC,UAAU,KAAK,GAAG,EAAE;oBAC1B,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC,MAAM,CAAC;oBACvB,OAAO,CAAC,GAAG,CAAC,yBAAyB,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;oBAElD,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;oBACrB,IAAI,CAAC,UAAU,GAAG,IAAI,wEAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;oBACpD,IAAI,CAAC,UAAU,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;oBAC3C,IAAI,CAAC,UAAU,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;iBAClC;qBAAM;oBACL,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;iBACtB;YACH,CAAC;YACD,KAAK,EAAE,CAAC,GAAG,EAAE,EAAE;gBACb,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;gBACrB,IAAI,CAAC,eAAe,CAAC,YAAY,CAC/B,iBAAiB,GAAG,GAAG,CAAC,OAAO,CAChC,CAAC;YACJ,CAAC;YACD,QAAQ,EAAE,GAAG,EAAE,GAAG,CAAC;SACpB,CAAC,CAAC;IACP,CAAC;IACD,OAAO;QACL,IAAI,CAAC,OAAO,EAAE,CAAC;IACjB,CAAC;IAED,SAAS,CAAC,MAAW,EAAE,MAAY;QACjC,OAAO,CAAC,GAAG,CAAC,gBAAgB,EAAE,MAAM,CAAC,CAAC;QACtC,OAAO,CAAC,GAAG,CAAC,gBAAgB,EAAE,MAAM,CAAC,CAAC;QAEtC,MAAM,YAAY,GAAG,IAAI,sEAAe,EAAE,CAAC;QAC3C,YAAY,CAAC,YAAY,GAAG,KAAK,CAAC;QAClC,YAAY,CAAC,YAAY,GAAG,IAAI,CAAC;QACjC,YAAY,CAAC,KAAK,GAAG,OAAO,CAAC;QAC7B,YAAY,CAAC,IAAI,GAAG;YAClB,MAAM,EAAE,MAAM;YACd,MAAM,EAAE,MAAM;YACd,WAAW,EAAE,IAAI,CAAC,WAAW;SAC9B,CAAC;QACF,MAAM,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,uGAAyB,EAAE,YAAY,CAAC,CAAC;QAC5E,SAAS,CAAC,WAAW,EAAE,CAAC,SAAS,CAAC,CAAC,MAAM,EAAE,EAAE;YAC3C,OAAO,CAAC,GAAG,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC;YAEjC,IAAI,CAAC,OAAO,EAAE,CAAC;QACjB,CAAC,CAAC,CAAC;IACL,CAAC;IAED,YAAY,CAAC,EAAU;QACrB,IAAI,MAAM,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE;QACvB,uDAAS,CAAC;YACR,KAAK,EAAE,eAAe;YACtB,IAAI,EAAE,2CAA2C;YACjD,IAAI,EAAE,SAAS;YACf,gBAAgB,EAAE,IAAI;YACtB,kBAAkB,EAAE,SAAS;YAC7B,iBAAiB,EAAE,MAAM;YACzB,iBAAiB,EAAE,iBAAiB;SACrC,CAAC,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE;YACjB,IAAI,MAAM,CAAC,WAAW,EAAE;gBACtB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;gBACpB,IAAI,CAAC,oBAAoB;qBACtB,MAAM,CAAC,MAAM,CAAC;qBACd,IAAI,CAAC,gDAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;qBAC9B,SAAS,CAAC;oBACT,IAAI,EAAE,CAAC,GAAG,EAAE,EAAE;wBACZ,IAAI,GAAG,CAAC,UAAU,IAAI,GAAG,EAAE;4BACzB,IAAI,CAAC,OAAO,EAAE,CAAC;4BACf,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;4BACrB,IAAI,CAAC,eAAe,CAAC,YAAY,CAC/B,6BAA6B,CAC9B,CAAC;yBACH;6BAAM;4BACL,IAAI,CAAC,OAAO,EAAE,CAAC;4BACf,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;4BACrB,IAAI,CAAC,eAAe,CAAC,YAAY,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;yBAChD;oBACH,CAAC;oBACD,KAAK,EAAE,CAAC,GAAG,EAAE,EAAE;wBACb,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;wBACrB,IAAI,CAAC,eAAe,CAAC,YAAY,CAAC,gBAAgB,GAAG,GAAG,CAAC,OAAO,CAAC,CAAC;oBACpE,CAAC;oBACD,QAAQ,EAAE,GAAG,EAAE,GAAG,CAAC;iBACpB,CAAC,CAAC;aACN;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAGD,WAAW,CAAC,KAAY;QACtB,MAAM,WAAW,GAAI,KAAK,CAAC,MAA2B,CAAC,KAAK,CAAC;QAC7D,IAAI,CAAC,KAAK,GAAG,WAAW,CAAC;QACzB,IAAI,CAAC,UAAU,CAAC,MAAM,GAAG,WAAW,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;QAC1D,IAAI,IAAI,CAAC,UAAU,CAAC,SAAS,EAAE;YAC7B,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,SAAS,EAAE,CAAC;SACvC;IACH,CAAC;IAKD,aAAa;QACX,MAAM,WAAW,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,MAAM,CAAC;QACnD,MAAM,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC;QAC5C,OAAO,WAAW,KAAK,OAAO,CAAC;IACjC,CAAC;IACD,YAAY;QACV,IAAI,IAAI,CAAC,aAAa,EAAE,EAAE;YACxB,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC;YACvB,OAAO;SACR;QAED,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;IACjD,CAAC;IACD,aAAa,CAAC,GAAS;QACrB,IAAI,CAAC,GAAG,EAAE;YACR,OAAO,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,QAAQ,MAAM,CAAC;SAC9D;QACD,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,GAAG,CACrF,EAAE,CAAC;IACP,CAAC;IAED,WAAW;QACT,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC;QAC/B,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC;QAE5C,OAAO,CAAC,GAAG,CAAC,qBAAqB,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;IACxD,CAAC;IAGD,mBAAmB,CAAC,MAAW;QAC7B,IAAI,SAAS,GAAG,mBAAmB,CAAC;QAEpC,6EAA6E;QAC7E,eAAe;QACf,MAAM;QAEN,IAAI,IAAI,CAAC,SAAS,EAAE;YAClB,uDAAS,CAAC;gBACZ,KAAK,EAAE,8DAA8D;gBACrE,KAAK,EAAE,UAAU;gBACjB,gBAAgB,EAAE,2BAA2B;gBAC7C,iBAAiB,EAAE,QAAQ;gBAC3B,gBAAgB,EAAE,IAAI;gBACtB,gBAAgB,EAAE,QAAQ;gBAC1B,IAAI,EAAE,MAAM;gBAEZ,cAAc,EAAE,CAAC,KAAK,EAAE,EAAE;oBACpB,IAAI,CAAC,KAAK,EAAE;wBACV,OAAO,2BAA2B,CAAC;qBACpC;gBACH,CAAC;aACF,CAAC,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE;gBACjB,IAAI,MAAM,CAAC,WAAW,EAAE;oBACtB,MAAM,eAAe,GAAG,MAAM,CAAC,KAAK,CAAC;oBAErC,MAAM,aAAa,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,EAAE;wBACtD,OAAO;4BACL,EAAE,EAAE,OAAO,CAAC,EAAE;4BACd,MAAM,EAAE,MAAM;4BACd,eAAe,EAAE,eAAe;yBACjC,CAAC;oBACJ,CAAC,CAAC,CAAC;oBAEH,OAAO,CAAC,GAAG,CAAC,OAAO,EAAE,aAAa,CAAC,CAAC;oBAEpC,IAAI,CAAC,oBAAoB;yBACtB,MAAM,CAAC,aAAa,CAAC;yBACrB,IAAI,CAAC,gDAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;yBAC9B,SAAS,CAAC;wBACT,IAAI,EAAE,CAAC,GAAG,EAAE,EAAE;4BACZ,OAAO,CAAC,GAAG,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC;4BAC1B,IAAI,GAAG,CAAC,UAAU,IAAI,GAAG,IAAI,GAAG,IAAI,CAAG,EAAE;gCACvC,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAC5B,kBAAkB,EAClB,GAAG,CAAC,OAAO,CACZ,CAAC;gCAEF,IAAI,CAAC,SAAS,GAAG,IAAI,qEAAc,CAAM,IAAI,EAAE,EAAE,CAAC,CAAC;gCACnD,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC;6BACxB;iCAAM,EAKN;wBACH,CAAC;wBACD,KAAK,EAAE,CAAC,GAAG,EAAE,EAAE;4BACb,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,iBAAiB,EAAE,GAAG,CAAC,OAAO,CAAC,CAAC;wBACjE,CAAC;wBACD,QAAQ,EAAE,GAAG,EAAE;4BACb,IAAI,CAAC,OAAO,EAAE,CAAC;wBACjB,CAAC;qBACF,CAAC;wBACF,+CAAY,CAAC;iBAChB;qBAAM;oBACL,IAAI,CAAC,SAAS,GAAG,IAAI,qEAAc,CAAM,IAAI,EAAE,EAAE,CAAC,CAAC;oBACnD,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC;iBACxB;YACH,CAAC,CAAC,CAAC;SACJ;IACH,CAAC;;kGAnVU,yBAAyB;wHAAzB,yBAAyB;mEAqBzB,sEAAY;mEACZ,4DAAO;;;;;;;QC7CpB,8EAAyB;QAIb,gFAEiB;QACrB,6DAAM;QAEN,8EAAmC;QAEnC,0EAAiB;QAU2B,yEAAY;QAAA,6DAAK;QAEzB,2EAA4B;QAEmB,mEAAM;QAAA,6DAAI;QACrD,kFAE8B;QAFa,wJAAS,uBAAmB,IAAC;QAAxE,6DAE8B;QASlC,uEAAI;QAEyC,mJAAS,aAAS,IAAC;QACpD,iFAA4B;QAAA,oEAAO;QAAA,6DAAW;QAI1D,uHAQK;QACL,uHAQK;QACL,uHAQK;QACT,6DAAK;QAET,4EAAmB;QAI4C,gSAEnG,gBAAqB,MAAM,cACX,aAAa,SACP,QAAQ,GACA,IAAD;QALuB,6DAKpB;QAGY,uEAAI;QAGQ,gSAAS,gBAAqB,KAAK,CAAC,IAAC;QADzC,6DAC4C;QAGpD,uEAAI;QAGQ,gSAAS,gBAAqB,MAAM,CAAC,IAAC;QAD1C,6DAC6C;QAGrD,uEAAI;QAGQ,gSAAS,gBAAqB,KAAK,CAAC,IAAC;QADzC,6DAC4C;QAQpE,4EAAsC;QAMP,mEAAM;QAAA,6DAAY;QAE7B,mFAAqC;QACjC,uIAGa;QACjB,6DAAa;QAEb,qIAEY;QAChB,6DAAiB;QAIzB,4EAAmB;QAeqB,mJAAS,sBAAkB,UAAU,CAAC,IAAC;QACnE,6EAAU;QAAA,qEAAQ;QAAA,6DAAW;QAC7B,uEACJ;QAAA,6DAAS;QAajB,4EAAmB;QAII,iEAAI;QAAA,6DAAY;QAE3B,mFAAsC;QAClC,uIAGa;QACjB,6DAAa;QAEb,qIAEY;QAChB,6DAAiB;QAIzB,4EAAmB;QAQqB,mJAAS,oBAAgB,UAAU,CAAC,IAAC;QACjE,6EAAU;QAAA,kEAAK;QAAA,6DAAW;QAC1B,uEACJ;QAAA,6DAAS;QAQT,+EAC0E;QAA1C,mJAAS,oBAAgB,cAAc,CAAC,IAAC;QACrE,6EAAU;QAAA,qEAAQ;QAAA,6DAAW;QAC7B,2EACJ;QAAA,6DAAS;QAQzB,sFACiC;QAC7B,8EAAoC;QAChC,iJAMkB;QAClB,mIAMW;QACf,sEAAe;QAEf,8EAAgC;QAC5B,iJAGkB;QAClB,mIAEW;QACf,sEAAe;QAEf,8EAA0C;QACtC,iJAEkB;QAClB,mIAEW;QACf,sEAAe;QAEf,8EAAmC;QAC/B,iJAEkB;QAClB,mIAEW;QACf,sEAAe;QAOf,8EAA6C;QACzC,iJAEkB;QAClB,mIAEW;QACf,sEAAe;QAEf,8EAAsC;QAClC,iJAEkB;QAClB,mIAEW;QACf,sEAAe;QAEf,+EAAqC;QACjC,mJAEkB;QAClB,qIAEW;QACf,sEAAe;QAEf,+EAAoC;QAChC,mJAGkB;QAClB,qIA6BW;QACf,sEAAe;QAEf,+EAA0C;QACtC,mJAEkB;QAClB,qIAEW;QACf,sEAAe;QAEf,+EAAoC;QAChC,mJAC4B;QAC5B,qIAaW;QACf,sEAAe;QAEf,+EAAsC;QAClC,mJACgF;QAChF,qIAOW;QACf,sEAAe;QAEf,iJACiB;QACjB,mIAEU;QAEV,yHAIK;QACT,6DAAY;QACZ,2HAGM;QACN,2HAGM;QAEN,kFAEgB;QACpB,6DAAM;;QArYF,2DAA4B;QAA5B,sFAA4B;QAwCP,4DAAmC;QAAnC,oGAAmC;QASnC,2DAAmC;QAAnC,oGAAmC;QASnC,2DAAmC;QAAnC,oGAAmC;QAiDtC,4DAAkB;QAAlB,gFAAkB;QAMsB,2DAAc;QAAd,qFAAc;QAMxC,2DAA6C;QAA7C,8GAA6C;QAqBnC,2DAA8C;QAA9C,uGAA8C;QAkBtE,2DAAkB;QAAlB,gFAAkB;QAMuB,2DAAc;QAAd,qFAAc;QAMzC,2DAA8C;QAA9C,+GAA8C;QAcpC,2DAA+C;QAA/C,wGAA+C;QAY/C,2DAAmD;QAAnD,4GAAmD;QAY1D,2DAAyB;QAAzB,uFAAyB;QA6JvC,4DAAiC;QAAjC,kGAAiC;QAEpB,2DAAyB;QAAzB,mGAAyB;QAUpC,2DAAgC;QAAhC,qGAAgC;QAIjD,2DAAa;QAAb,8EAAa;QAKJ,2DAAe;QAAf,yEAAe;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtYA;AAGe;AACd;AACV;AAEO;;;;;;;;;;;;;ICNpD,yEAA0C;IAGtB,iFAAsB;IAAA,4DAAS;IAE3C,4EAA8E;IAAtD,uSAAS,wBAAiB,IAAC;IAC/C,2EAAU;IAAA,gEAAK;IAAA,4DAAW;IAGlC,yEAAwB;IAEhB,yEAAc;IAEV,0EAA4D;IAGtB,uEAAW;IAAA,4DAAM;IAC3C,2EAAmC;IAAA,wDAA2B;IAAA,4DAAM;IACpE,2EAA0B;IAAA,sEAAU;IAAA,4DAAM;IAC1C,2EAAmC;IAAA,wDAA0B;IAAA,4DAAM;IACnE,2EAA0B;IAAA,wEAAY;IAAA,4DAAM;IAC5C,2EAAmC;IAAA,wDAA4B;IAAA,4DAAM;IACrE,2EAA0B;IAAA,0EAAc;IAAA,4DAAM;IAC9C,2EAAmC;IAAA,wDAA+B;IAAA,4DAAM;IACxE,2EAA0B;IAAA,yEAAa;IAAA,4DAAM;IAC7C,2EAAmC;IAAA,wDAA+B;IAAA,4DAAM;IACxE,2EAA0B;IAAA,sEAAU;IAAA,4DAAM;IAC1C,2EAAmC;IAAA,wDAA4B;IAAA,4DAAM;IACrE,2EAA0B;IAAA,sEAAU;IAAA,4DAAM;IAC1C,2EAAmC;IAAA,wDAAmB;IAAA,4DAAM;IAC5D,2EAA0B;IAAA,wEAAY;IAAA,4DAAM;IAC5C,2EAAmC;IAC/B,wDACJ;IAAA,4DAAM;IAKlB,iEAAM;IACV,qEAAe;IAGf,2EAAkB;IAIT,wSAAS,eAAQ,IAAC;IACjB,gFACF;IAAA,4DAAS;IACT,8EAA2E;IAApC,wSAAS,kBAAW,IAAC;IAC1D,oEACF;IAAA,4DAAS;;;IAlCkC,2DAA2B;IAA3B,6FAA2B;IAE3B,0DAA0B;IAA1B,4FAA0B;IAE1B,0DAA4B;IAA5B,8FAA4B;IAE5B,0DAA+B;IAA/B,iGAA+B;IAE/B,0DAA+B;IAA/B,iGAA+B;IAE/B,0DAA4B;IAA5B,8FAA4B;IAE5B,0DAAmB;IAAnB,qFAAmB;IAGlD,0DACJ;IADI,oGACJ;IAYoD,0DAA8B;IAA9B,yFAA8B;;AD5B3G,MAAM,yBAAyB;IAgBpC,YACS,SAAkD,EACzB,IAAI,EAC5B,EAAe,EACf,QAAyB,EACzB,MAAuC,EACvC,wBAAkD;QALnD,cAAS,GAAT,SAAS,CAAyC;QACzB,SAAI,GAAJ,IAAI;QAC5B,OAAE,GAAF,EAAE,CAAa;QACf,aAAQ,GAAR,QAAQ,CAAiB;QACzB,WAAM,GAAN,MAAM,CAAiC;QACvC,6BAAwB,GAAxB,wBAAwB,CAA0B;QAnB5D,qBAAgB,GAAa,CAAC,OAAO,EAAE,UAAU,EAAE,UAAU,EAAE,QAAQ,CAAC,CAAC;QAMzE,aAAQ,GAAqB,IAAI,yCAAO,EAAW,CAAC;QAEpD,cAAS,GAAG,IAAI,oEAAc,CAAM,IAAI,EAAE,EAAE,CAAC,CAAC;QAE9C,oBAAe,GAAY,KAAK,CAAC;QACjC,iBAAY,GAAQ,KAAK,CAAC;QA+B1B,YAAO,GAAY,KAAK,CAAC;IAtBtB,CAAC;IAEJ,QAAQ;QACN,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC;QACrC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC;QAC7B,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC;QAEzC,OAAO,CAAC,GAAG,CAAC,qBAAqB,EAAE,IAAI,CAAC,WAAW,CAAE;QACrD,OAAO,CAAC,GAAG,CAAC,cAAc,EAAE,IAAI,CAAC,IAAI,CAAE;IAEzC,CAAC;IAGD,WAAW,CAAC,KAAY;QACtB,MAAM,WAAW,GAAI,KAAK,CAAC,MAA2B,CAAC,KAAK,CAAC;QAC7D,IAAI,CAAC,KAAK,GAAG,WAAW,CAAC;QACzB,IAAI,CAAC,UAAU,CAAC,MAAM,GAAG,WAAW,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;QAC1D,IAAI,IAAI,CAAC,UAAU,CAAC,SAAS,EAAE;YAC7B,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,SAAS,EAAE,CAAC;SACvC;IACH,CAAC;IAKD,MAAM;QAEL,IAAI,IAAI,GAAG;YACV,YAAY,EAAE,IAAI,CAAC,IAAI,CAAC,YAAY;YACpC,QAAQ,EAAE,IAAI,CAAC,IAAI,CAAC,QAAQ;YAE5B,SAAS,EAAE,IAAI,CAAC,WAAW,CAAC,SAAS;YACrC,QAAQ,EAAE,IAAI,CAAC,WAAW,CAAC,QAAQ;YACnC,UAAU,EAAE,IAAI,CAAC,WAAW,CAAC,UAAU;YACvC,YAAY,EAAE,IAAI,CAAC,WAAW,CAAC,aAAa;YAC5C,WAAW,EAAE,IAAI,CAAC,WAAW,CAAC,aAAa;YAC3C,UAAU,EAAE,IAAI,CAAC,WAAW,CAAC,UAAU;SAEvC;QACA,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QAElB,IAAI,CAAC,wBAAwB,CAAC,MAAM,CAAC,IAAI,CAAC;aACvC,IAAI,CAAC,+CAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;aAC9B,SAAS,CAAC;YACT,IAAI,EAAE,CAAC,GAAG,EAAE,EAAE;gBACZ,IAAI,CAAC,QAAQ,GAAG,GAAG,CAAC;gBACpB,OAAO,CAAC,GAAG,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC;gBAC1B,IAAI,GAAG,CAAC,UAAU,IAAI,GAAG,EAAE;oBACzB,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAC5B,kBAAkB,EAClB,GAAG,CAAC,OAAO,CACZ,CAAC;iBACH;qBAAM;oBACL,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAC5B,iBAAiB,EACjB,GAAG,CAAC,OAAO,CACZ,CAAC;iBACH;YACH,CAAC;YACD,KAAK,EAAE,CAAC,GAAG,EAAE,EAAE;gBACb,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,iBAAiB,EAAE,GAAG,CAAC,OAAO,CAAC,CAAC;YACjE,CAAC;YACD,QAAQ,EAAE,GAAG,EAAE;gBACb,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;gBACrB,UAAU,CAAC,GAAG,EAAE;oBACd,IAAI,CAAC,SAAS,EAAE,CAAC;gBACnB,CAAC,EAAE,IAAI,CAAC,CAAC;YACX,CAAC;SACF,CAAC;YACF,8CAAY,CAAC;IAEnB,CAAC;IACD,SAAS;QACP,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,EAAE,KAAK,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;IAChE,CAAC;;kGAjGU,yBAAyB,uMAkB1B,qEAAe;uHAlBd,yBAAyB;kEAMzB,sEAAY;kEACZ,4DAAO;;;;;;QCzBpB,yEAA0B;QACtB,uHAyDM;QACV,4DAAM;;QA1DI,0DAAU;QAAV,0EAAU;;;;;;;;;;;;;;;;;;;;;;ACGU;AAEgB;AACG;AACe;;;AAKzD,MAAM,eAAe;IAI1B,YAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;QAHpC,YAAO,GAAG,IAAI,6DAAW,EAAE,CAAC,GAAG,CAAC,cAAc,EAAE,kBAAkB,CAAC,CAAC;QACpE,YAAO,GAAG,GAAG,oFAAqB,kBAAkB,CAAC;IAEd,CAAC;IAExC,MAAM,CAAC,IAAS;QACd,IAAI,OAAO,GAAG,GAAG,IAAI,CAAC,OAAO,MAAM,CAAC;QACpC,sBAAsB;QAEtB,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,EAAE,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC,IAAI,CAClE,mDAAG,CAAC,CAAC,GAAG,EAAE,EAAE;YACV,OAAO,GAAG,IAAI,EAAE,CAAC;QACnB,CAAC,CAAC,EACF,0DAAU,CAAC,IAAI,CAAC,SAAS,CAAC,CAC3B,CAAC;IACJ,CAAC;IAED,cAAc,CAAC,IAAS;QACtB,IAAI,OAAO,GAAG,GAAG,IAAI,CAAC,OAAO,UAAU,CAAC;QACxC,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,EAAE,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC,IAAI,CAClE,mDAAG,CAAC,CAAC,GAAG,EAAE,EAAE;YACV,OAAO,GAAG,IAAI,EAAE,CAAC;QACnB,CAAC,CAAC,EACF,0DAAU,CAAC,IAAI,CAAC,SAAS,CAAC,CAC3B,CAAC;IACJ,CAAC;IAED,iBAAiB;QACf,IAAI,OAAO,GAAG,GAAG,IAAI,CAAC,OAAO,uBAAuB,CAAC;QACrD,OAAO,IAAI,CAAC,IAAI;aACb,GAAG,CAAC,OAAO,EAAE,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,eAAe,EAAE,KAAK,EAAE,CAAC;aAC/D,IAAI,CACH,mDAAG,CAAC,CAAC,GAAG,EAAE,EAAE;YACV,OAAO,GAAG,IAAI,EAAE,CAAC;QACnB,CAAC,CAAC,EACF,0DAAU,CAAC,IAAI,CAAC,SAAS,CAAC,CAC3B,CAAC;IACN,CAAC;IACD,IAAI;QACF,IAAI,OAAO,GAAG,GAAG,IAAI,CAAC,OAAO,MAAM,CAAC;QACpC,OAAO,IAAI,CAAC,IAAI;aACb,GAAG,CAAC,OAAO,EAAE,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,eAAe,EAAE,KAAK,EAAE,CAAC;aAC/D,IAAI,CACH,mDAAG,CAAC,CAAC,GAAG,EAAE,EAAE;YACV,OAAO,GAAG,IAAI,EAAE,CAAC;QACnB,CAAC,CAAC,EACF,0DAAU,CAAC,IAAI,CAAC,SAAS,CAAC,CAC3B,CAAC;IACN,CAAC;IACD,YAAY,CAAC,MAAW;QACtB,IAAI,OAAO,GAAG,GAAG,IAAI,CAAC,OAAO,gBAAgB,CAAC;QAC9C,OAAO,IAAI,CAAC,IAAI;aACb,GAAG,CAAC,OAAO,EAAE,EAAE,MAAM,EAAC,MAAM,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,eAAe,EAAE,KAAK,EAAE,CAAC;aAC9E,IAAI,CACH,mDAAG,CAAC,CAAC,GAAG,EAAE,EAAE;YACV,OAAO,GAAG,IAAI,EAAE,CAAC;QACnB,CAAC,CAAC,EACF,0DAAU,CAAC,IAAI,CAAC,SAAS,CAAC,CAC3B,CAAC;IACN,CAAC;IACD,UAAU;QACR,IAAI,OAAO,GAAG,GAAG,IAAI,CAAC,OAAO,eAAe,CAAC;QAC7C,OAAO,IAAI,CAAC,IAAI;aACb,GAAG,CAAC,OAAO,EAAE,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,eAAe,EAAE,KAAK,EAAE,CAAC;aAC/D,IAAI,CACH,mDAAG,CAAC,CAAC,GAAG,EAAE,EAAE;YACV,OAAO,GAAG,IAAI,EAAE,CAAC;QACnB,CAAC,CAAC,EACF,0DAAU,CAAC,IAAI,CAAC,SAAS,CAAC,CAC3B,CAAC;IACN,CAAC;IACD,gBAAgB,CAAC,MAAW;QAC1B,IAAI,OAAO,GAAG,GAAG,IAAI,CAAC,OAAO,iBAAiB,CAAC;QAC/C,OAAO,IAAI,CAAC,IAAI;aACb,GAAG,CAAC,OAAO,EAAE;YACZ,MAAM,EAAE,MAAM;YACd,OAAO,EAAE,IAAI,CAAC,OAAO;YACrB,eAAe,EAAE,KAAK;SACvB,CAAC;aACD,IAAI,CACH,mDAAG,CAAC,CAAC,GAAG,EAAE,EAAE;YACV,OAAO,GAAG,IAAI,EAAE,CAAC;QACnB,CAAC,CAAC,EACF,0DAAU,CAAC,IAAI,CAAC,SAAS,CAAC,CAC3B,CAAC;IACN,CAAC;IACD,kCAAkC;QAChC,IAAI,OAAO,GAAG,GAAG,IAAI,CAAC,OAAO,uBAAuB,CAAC;QACrD,OAAO,IAAI,CAAC,IAAI;aACb,GAAG,CAAC,OAAO,EAAE,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,eAAe,EAAE,KAAK,EAAE,CAAC;aAC/D,IAAI,CACH,mDAAG,CAAC,CAAC,GAAG,EAAE,EAAE;YACV,OAAO,GAAG,IAAI,EAAE,CAAC;QACnB,CAAC,CAAC,EACF,0DAAU,CAAC,IAAI,CAAC,SAAS,CAAC,CAC3B,CAAC;IACN,CAAC;IACD,WAAW;QACT,IAAI,OAAO,GAAG,GAAG,IAAI,CAAC,OAAO,cAAc,CAAC;QAC5C,OAAO,IAAI,CAAC,IAAI;aACb,GAAG,CAAC,OAAO,EAAE,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,eAAe,EAAE,KAAK,EAAE,CAAC;aAC/D,IAAI,CACH,mDAAG,CAAC,CAAC,GAAG,EAAE,EAAE;YACV,OAAO,GAAG,IAAI,EAAE,CAAC;QACnB,CAAC,CAAC,EACF,0DAAU,CAAC,IAAI,CAAC,SAAS,CAAC,CAC3B,CAAC;IACN,CAAC;IACD,WAAW;QACT,IAAI,OAAO,GAAG,GAAG,IAAI,CAAC,OAAO,cAAc,CAAC;QAC5C,OAAO,IAAI,CAAC,IAAI;aACb,GAAG,CAAC,OAAO,EAAE,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,eAAe,EAAE,KAAK,EAAE,CAAC;aAC/D,IAAI,CACH,mDAAG,CAAC,CAAC,GAAG,EAAE,EAAE;YACV,OAAO,GAAG,IAAI,EAAE,CAAC;QACnB,CAAC,CAAC,EACF,0DAAU,CAAC,IAAI,CAAC,SAAS,CAAC,CAC3B,CAAC;IACN,CAAC;IACD,QAAQ;QACN,IAAI,OAAO,GAAG,GAAG,IAAI,CAAC,OAAO,aAAa,CAAC;QAC3C,OAAO,IAAI,CAAC,IAAI;aACb,GAAG,CAAC,OAAO,EAAE,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,eAAe,EAAE,KAAK,EAAE,CAAC;aAC/D,IAAI,CACH,mDAAG,CAAC,CAAC,GAAG,EAAE,EAAE;YACV,OAAO,GAAG,IAAI,EAAE,CAAC;QACnB,CAAC,CAAC,EACF,0DAAU,CAAC,IAAI,CAAC,SAAS,CAAC,CAC3B,CAAC;IACN,CAAC;IACD,cAAc,CAAC,EAAO;QACpB,IAAI,OAAO,GAAG,GAAG,IAAI,CAAC,OAAO,mBAAmB,EAAE,EAAE,CAAC;QACrD,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,EAAE,eAAe,EAAE,KAAK,EAAE,CAAC,CAAC,IAAI,CAC5D,mDAAG,CAAC,CAAC,GAAG,EAAE,EAAE;YACV,OAAO,GAAG,IAAI,EAAE,CAAC;QACnB,CAAC,CAAC,EACF,0DAAU,CAAC,IAAI,CAAC,SAAS,CAAC,CAC3B,CAAC;IACJ,CAAC;IACD,cAAc,CAAC,EAAO;QACpB,IAAI,OAAO,GAAG,GAAG,IAAI,CAAC,OAAO,kBAAkB,EAAE,EAAE,CAAC;QACpD,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,EAAE,eAAe,EAAE,KAAK,EAAE,CAAC,CAAC,IAAI,CAC5D,mDAAG,CAAC,CAAC,GAAG,EAAE,EAAE;YACV,OAAO,GAAG,IAAI,EAAE,CAAC;QACnB,CAAC,CAAC,EACF,0DAAU,CAAC,IAAI,CAAC,SAAS,CAAC,CAC3B,CAAC;IACJ,CAAC;IACD,OAAO,CAAC,EAAO;QACb,IAAI,OAAO,GAAG,GAAG,IAAI,CAAC,OAAO,YAAY,EAAE,EAAE,CAAC;QAC9C,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,EAAE,eAAe,EAAE,KAAK,EAAE,CAAC,CAAC,IAAI,CAC5D,mDAAG,CAAC,CAAC,GAAG,EAAE,EAAE;YACV,OAAO,GAAG,IAAI,EAAE,CAAC;QACnB,CAAC,CAAC,EACF,0DAAU,CAAC,IAAI,CAAC,SAAS,CAAC,CAC3B,CAAC;IACJ,CAAC;IACD,WAAW,CAAC,EAAO;QACjB,IAAI,OAAO,GAAG,GAAG,IAAI,CAAC,OAAO,iBAAiB,EAAE,EAAE,CAAC;QACnD,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,EAAE,eAAe,EAAE,KAAK,EAAE,CAAC,CAAC,IAAI,CAC5D,mDAAG,CAAC,CAAC,GAAG,EAAE,EAAE;YACV,OAAO,GAAG,IAAI,EAAE,CAAC;QACnB,CAAC,CAAC,EACF,0DAAU,CAAC,IAAI,CAAC,SAAS,CAAC,CAC3B,CAAC;IACJ,CAAC;IACD,kBAAkB,CAAC,EAAO;QACxB,IAAI,OAAO,GAAG,GAAG,IAAI,CAAC,OAAO,wBAAwB,EAAE,EAAE,CAAC;QAC1D,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,EAAE,eAAe,EAAE,KAAK,EAAE,CAAC,CAAC,IAAI,CAC5D,mDAAG,CAAC,CAAC,GAAG,EAAE,EAAE;YACV,OAAO,GAAG,IAAI,EAAE,CAAC;QACnB,CAAC,CAAC,EACF,0DAAU,CAAC,IAAI,CAAC,SAAS,CAAC,CAC3B,CAAC;IACJ,CAAC;IACD,gBAAgB,CAAC,EAAO;QACtB,IAAI,OAAO,GAAG,GAAG,IAAI,CAAC,OAAO,sBAAsB,EAAE,EAAE,CAAC;QACxD,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,EAAE,eAAe,EAAE,KAAK,EAAE,CAAC,CAAC,IAAI,CAC5D,mDAAG,CAAC,CAAC,GAAG,EAAE,EAAE;YACV,OAAO,GAAG,IAAI,EAAE,CAAC;QACnB,CAAC,CAAC,EACF,0DAAU,CAAC,IAAI,CAAC,SAAS,CAAC,CAC3B,CAAC;IACJ,CAAC;IACD,UAAU,CAAC,EAAO;QAChB,IAAI,OAAO,GAAG,GAAG,IAAI,CAAC,OAAO,gBAAgB,EAAE,EAAE,CAAC;QAClD,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,EAAE,eAAe,EAAE,KAAK,EAAE,CAAC,CAAC,IAAI,CAC5D,mDAAG,CAAC,CAAC,GAAG,EAAE,EAAE;YACV,OAAO,GAAG,IAAI,EAAE,CAAC;QACnB,CAAC,CAAC,EACF,0DAAU,CAAC,IAAI,CAAC,SAAS,CAAC,CAC3B,CAAC;IACJ,CAAC;IACD,QAAQ,CAAC,EAAO;QACd,IAAI,OAAO,GAAG,GAAG,IAAI,CAAC,OAAO,cAAc,EAAE,EAAE,CAAC;QAChD,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,EAAE,eAAe,EAAE,KAAK,EAAE,CAAC,CAAC,IAAI,CAC5D,mDAAG,CAAC,CAAC,GAAG,EAAE,EAAE;YACV,OAAO,GAAG,IAAI,EAAE,CAAC;QACnB,CAAC,CAAC,EACF,0DAAU,CAAC,IAAI,CAAC,SAAS,CAAC,CAC3B,CAAC;IACJ,CAAC;IAED,wCAAwC;IAExC,eAAe,CAAC,EAAO;QACrB,IAAI,OAAO,GAAG,GAAG,IAAI,CAAC,OAAO,qBAAqB,EAAE,EAAE,CAAC;QACvD,OAAO,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,EAAE,eAAe,EAAE,KAAK,EAAE,CAAC,CAAC,IAAI,CAC/D,mDAAG,CAAC,CAAC,GAAG,EAAE,EAAE;YACV,OAAO,GAAG,IAAI,EAAE,CAAC;QACnB,CAAC,CAAC,EACF,0DAAU,CAAC,IAAI,CAAC,SAAS,CAAC,CAC3B,CAAC;IACJ,CAAC;IACD,cAAc;QACZ,IAAI,OAAO,GAAG,GAAG,IAAI,CAAC,OAAO,QAAQ,CAAC;QACtC,OAAO,IAAI,CAAC,IAAI;aACb,GAAG,CAAC,OAAO,EAAE,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,eAAe,EAAE,KAAK,EAAE,CAAC;aAC/D,IAAI,CACH,mDAAG,CAAC,CAAC,GAAG,EAAE,EAAE;YACV,OAAO,GAAG,IAAI,EAAE,CAAC;QACnB,CAAC,CAAC,EACF,0DAAU,CAAC,IAAI,CAAC,SAAS,CAAC,CAC3B,CAAC;IACN,CAAC;IACD,oBAAoB;QAClB,IAAI,OAAO,GAAG,GAAG,IAAI,CAAC,OAAO,sBAAsB,CAAC;QACpD,OAAO,IAAI,CAAC,IAAI;aACb,GAAG,CAAC,OAAO,EAAE,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,eAAe,EAAE,KAAK,EAAE,CAAC;aAC/D,IAAI,CACH,mDAAG,CAAC,CAAC,GAAG,EAAE,EAAE;YACV,OAAO,GAAG,IAAI,EAAE,CAAC;QACnB,CAAC,CAAC,EACF,0DAAU,CAAC,IAAI,CAAC,SAAS,CAAC,CAC3B,CAAC;IACN,CAAC;IACD,WAAW;QACT,IAAI,OAAO,GAAG,GAAG,oFAAqB,8BAA8B,CAAC;QACrE,OAAO,IAAI,CAAC,IAAI;aACb,GAAG,CAAC,OAAO,EAAE,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,eAAe,EAAE,KAAK,EAAE,CAAC;aAC/D,IAAI,CACH,mDAAG,CAAC,CAAC,GAAG,EAAE,EAAE;YACV,OAAO,GAAG,IAAI,EAAE,CAAC;QACnB,CAAC,CAAC,EACF,0DAAU,CAAC,IAAI,CAAC,SAAS,CAAC,CAC3B,CAAC;IACN,CAAC;IACD,QAAQ,CAAC,EAAO;QACd,IAAI,OAAO,GAAG,GAAG,IAAI,CAAC,OAAO,eAAe,EAAE,EAAE,CAAC;QACjD,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,EAAE,eAAe,EAAE,KAAK,EAAE,CAAC,CAAC,IAAI,CAC5D,mDAAG,CAAC,CAAC,GAAG,EAAE,EAAE;YACV,OAAO,GAAG,IAAI,EAAE,CAAC;QACnB,CAAC,CAAC,EACF,0DAAU,CAAC,IAAI,CAAC,SAAS,CAAC,CAC3B,CAAC;IACJ,CAAC;IACD,WAAW,CAAC,KAAU;QACpB,IAAI,OAAO,GAAG,GAAG,IAAI,CAAC,OAAO,0BAA0B,KAAK,EAAE,CAAC;QAC/D,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,EAAE,eAAe,EAAE,KAAK,EAAE,CAAC,CAAC,IAAI,CAC5D,mDAAG,CAAC,CAAC,GAAG,EAAE,EAAE;YACV,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YACjB,OAAO,CAAC,GAAG,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;YAC5B,OAAO,GAAG,IAAI,EAAE,CAAC;QACnB,CAAC,CAAC,EACF,0DAAU,CAAC,IAAI,CAAC,SAAS,CAAC,CAC3B,CAAC;IACJ,CAAC;IAED,MAAM,CAAC,IAAS;QACd,IAAI,OAAO,GAAG,GAAG,IAAI,CAAC,OAAO,SAAS,CAAC;QACvC,OAAO,IAAI,CAAC,IAAI;aACb,GAAG,CAAC,OAAO,EAAE,IAAI,EAAE,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,eAAe,EAAE,KAAK,EAAE,CAAC;aACrE,IAAI,CACH,mDAAG,CAAC,CAAC,GAAG,EAAE,EAAE;YACV,OAAO,CAAC,GAAG,CAAC,yBAAyB,EAAE,GAAG,CAAC,CAAC;YAE5C,OAAO,GAAG,IAAI,EAAE,CAAC;QACnB,CAAC,CAAC,EACF,0DAAU,CAAC,IAAI,CAAC,SAAS,CAAC,CAC3B,CAAC;IACN,CAAC;IACD,YAAY,CAAC,MAAW;QACtB,IAAI,OAAO,GAAG,GAAG,IAAI,CAAC,OAAO,gBAAgB,CAAC;QAC9C,OAAO,IAAI,CAAC,IAAI;aACb,GAAG,CACF,OAAO,EACP,EAAE,EACF,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,eAAe,EAAE,KAAK,EAAE,CAClE;aACA,IAAI,CAAC,0DAAU,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;IACtC,CAAC;IAED,MAAM,CAAC,MAAW;QAChB,IAAI,OAAO,GAAG,GAAG,IAAI,CAAC,OAAO,SAAS,CAAC;QACvC,OAAO,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,EAAC,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,eAAe,EAAE,KAAK,EAAE,CAAC,CAAC,IAAI,CAAC,mDAAG,CAAC,GAAG,CAAC,EAAE;YAChH,OAAO,GAAG,IAAI,EAAE;QAClB,CAAC,CAAC,EACA,0DAAU,CAAC,IAAI,CAAC,SAAS,CAAC,CAC3B,CAAC;IACJ,CAAC;IAED,qBAAqB,CAAC,aAAkB;QACtC,MAAM,UAAU,GAAG,GAAG,IAAI,CAAC,OAAO,eAAe,CAAC;QAClD,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,UAAU,EAAE,aAAa,CAAC,CAAC;IAClD,CAAC;IAEF,qCAAqC;IACrC,mBAAmB,CAAC,MAAW;QAC9B,IAAI,OAAO,GAAG,GAAG,IAAI,CAAC,OAAO,oBAAoB,CAAC;QAClD,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,EAAC,MAAM,EAAC,MAAM,EAAE,eAAe,EAAE,KAAK,EAAE,CAAC,CAAC,IAAI,CAC1E,mDAAG,CAAC,CAAC,GAAG,EAAE,EAAE;YACV,OAAO,GAAG,IAAI,EAAE,CAAC;QACnB,CAAC,CAAC,EACF,0DAAU,CAAC,IAAI,CAAC,SAAS,CAAC,CAC3B,CAAC;IACJ,CAAC;IACC,SAAS,CAAC,KAAwB;QAChC,IAAI,YAAY,GAAG,EAAE,CAAC;QACtB,IAAI,KAAK,CAAC,KAAK,YAAY,UAAU,EAAE;YACrC,wBAAwB;YACxB,YAAY,GAAG,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC;SACpC;aAAM;YACL,wBAAwB;YACxB,YAAY,GAAG,GAAG,KAAK,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC;SACzC;QACD,OAAO,gDAAU,CAAC,YAAY,CAAC,CAAC;IAClC,CAAC;;8EAvUU,eAAe;gHAAf,eAAe,WAAf,eAAe,mBAFd,MAAM","sources":["./src/@core/Models/Notification/notification-service.service.ts","./src/app/erp-hr-self-service/modules/employee-jobs/employee-jobs-routing.module.ts","./src/app/erp-hr-self-service/modules/employee-jobs/employee-jobs.module.ts","./src/app/erp-hr-self-service/modules/employee-jobs/jobs-applied-page/jobs-applied-page.component.ts","./src/app/erp-hr-self-service/modules/employee-jobs/jobs-applied-page/jobs-applied-page.component.html","./src/app/erp-hr-self-service/modules/employee-jobs/jobs-openings-page/jobs-openings-page.component.ts","./src/app/erp-hr-self-service/modules/employee-jobs/jobs-openings-page/jobs-openings-page.component.html","./src/app/erp-hr-self-service/modules/employee-jobs/manage-job-opening/manage-job-opening.component.ts","./src/app/erp-hr-self-service/modules/employee-jobs/manage-job-opening/manage-job-opening.component.html","./src/app/erp-hr/data/employee-services/employee-management.service.ts"],"sourcesContent":["// import { Injectable } from '@angular/core';\n// import { MatSnackBarHorizontalPosition, MatSnackBarVerticalPosition, MatSnackBar } from '@angular/material/snack-bar';\n\n// @Injectable({\n//   providedIn: 'root'\n// })\n// export class NotificationServiceService {\n//   showSuccessNotification(arg0: string) {\n//     throw new Error('Method not implemented.');\n//   }\n//   showSuccess(arg0: string) {\n//     throw new Error('Method not implemented.');\n//   }\n//   showError(message: any) {\n//     throw new Error('Method not implemented.');\n//   }\n\n//   horizontalPosition: MatSnackBarHorizontalPosition = 'end';\n//   verticalPosition: MatSnackBarVerticalPosition = 'top';\n\n//   constructor(\n//     private snackBar: MatSnackBar\n//   ) {\n//    }\n//   alertSuccess(message:any){\n//     this.snackBar.open(message, \"OK\", {\n//       horizontalPosition: this.horizontalPosition,\n//       verticalPosition: this.verticalPosition,\n//       duration: 5000,\n//       panelClass: ['mat-toolbar', 'green-snackbar']\n//     });\n//   }\n//   alertWarning(message:any){\n//     this.snackBar.open(message, \"X\", {\n//       horizontalPosition: this.horizontalPosition,\n//       verticalPosition: this.verticalPosition,\n//       duration: 5000,\n//       panelClass: ['mat-toolbar', 'red-snackbar']\n//     });\n//   }\n// }\n\n\nimport { Injectable } from '@angular/core';\nimport { MatSnackBarHorizontalPosition, MatSnackBarVerticalPosition, MatSnackBar } from '@angular/material/snack-bar';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NotificationServiceService {\n  showSuccessNotification(arg0: string) {\n    throw new Error('Method not implemented.');\n  }\n  showSuccess(arg0: string) {\n    throw new Error('Method not implemented.');\n  }\n  showError(message: any) {\n    throw new Error('Method not implemented.');\n  }\n\n  horizontalPosition: MatSnackBarHorizontalPosition = 'end';\n  verticalPosition: MatSnackBarVerticalPosition = 'top';\n\n  constructor(\n    private snackBar: MatSnackBar\n  ) {\n   }\n  alertSuccess(message:any){\n    this.snackBar.open(message, \"OK\", {\n      horizontalPosition: this.horizontalPosition,\n      verticalPosition: this.verticalPosition,\n      duration: 5000,\n      panelClass: ['mat-toolbar', 'snackbar-success']\n    });\n  }\n  alertWarning(message:any){\n    this.snackBar.open(message, \"X\", {\n      horizontalPosition: this.horizontalPosition,\n      verticalPosition: this.verticalPosition,\n      duration: 5000,\n      panelClass: ['mat-toolbar', 'snackbar-danger']\n    });\n  }\n  alertWarningByDuration(message:any, duration:number){\n    this.snackBar.open(message, \"X\", {\n      horizontalPosition: this.horizontalPosition,\n      verticalPosition: this.verticalPosition,\n      duration: duration,\n      panelClass: ['mat-toolbar', 'snackbar-danger']\n    });\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { JobsAppliedPageComponent } from './jobs-applied-page/jobs-applied-page.component';\nimport { RoutePrivilegeGuard } from 'src/app/erp-procurement/data/services/_AccessControlAuthGuard.service';\nimport { JobsOpeningsPageComponent } from './jobs-openings-page/jobs-openings-page.component';\n\nconst routes: Routes = [\n\n\n  {\n    path: \"openings\",\n    component: JobsOpeningsPageComponent,\n    canActivate: [RoutePrivilegeGuard],\n    data: {\n      clientName: \"EmployeePortalModule\",\n      requiredPrivilege: [\"Dashboard\"],\n    },\n  },\n\n  {\n    path: \"applied\",\n    component: JobsAppliedPageComponent,\n    canActivate: [RoutePrivilegeGuard],\n    data: {\n      clientName: \"EmployeePortalModule\",\n      requiredPrivilege: [\"Dashboard\"],\n    },\n  },\n\n \n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class EmployeeJobsRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { EmployeeJobsRoutingModule } from './employee-jobs-routing.module';\nimport { JobsOpeningsPageComponent } from './jobs-openings-page/jobs-openings-page.component';\nimport { JobsAppliedPageComponent } from './jobs-applied-page/jobs-applied-page.component';\nimport { ComponentsModule } from 'src/app/shared/components/components.module';\nimport { SharedModule } from 'src/app/shared/shared.module';\nimport { DashboardModule } from '../dashboard/dashboard.module';\nimport { ManageJobOpeningComponent } from './manage-job-opening/manage-job-opening.component';\n\n\n@NgModule({\n  declarations: [\n    JobsOpeningsPageComponent,\n    JobsAppliedPageComponent,\n    ManageJobOpeningComponent\n  ],\n  imports: [\n    CommonModule,\n    EmployeeJobsRoutingModule,\n\n    DashboardModule,\n    ComponentsModule,\n    SharedModule,\n  ]\n})\nexport class EmployeeJobsModule { }\n","import { SelectionModel } from '@angular/cdk/collections';\nimport { HttpParams } from '@angular/common/http';\nimport { Component, OnInit, ViewChild } from '@angular/core';\nimport { FormGroup, FormBuilder } from '@angular/forms';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { Router } from '@angular/router';\nimport { Subject, takeUntil, Subscription } from 'rxjs';\nimport { NotificationServiceService } from 'src/@core/Models/Notification/notification-service.service';\nimport { TokenCookieService } from 'src/app/core/service/token-storage-cookies.service';\nimport { EmployeeService } from 'src/app/erp-hr/data/employee-services/employee-management.service';\nimport { JobApplicationAPIService } from 'src/app/erp-hr/data/job-services/job-applications.service';\nimport { SnackbarService } from 'src/app/shared/services/snackbar.service';\nimport Swal from 'sweetalert2';\n\n@Component({\n  selector: 'app-jobs-applied-page',\n  templateUrl: './jobs-applied-page.component.html',\n  styleUrls: ['./jobs-applied-page.component.sass']\n})\nexport class JobsAppliedPageComponent implements OnInit {\n\n  displayedColumns: string[] = [\n    // \"select\",\n    \"id\",\n    'jobTitle',\n    'applicationType',\n    'jobRefNumber',\n    'applicationNumber',\n    // 'postedFlag',\n    // 'postedBy',\n    'postedTime',\n    'firstName',\n    'lastName',\n    // 'middleName',\n    'emailAddress',\n    'phoneNumber',\n    //'nationalId',\n    'status',\n    \"action\",\n  ];\n\n  loading: boolean = false;\n  data: any;\n  error: any;\n  dialogConfig: any;\n  destroy$: Subject<boolean> = new Subject<boolean>();\n\n  dataSource!: MatTableDataSource<any>;\n  @ViewChild(MatPaginator) paginator!: MatPaginator;\n  @ViewChild(MatSort) sort!: MatSort;\n\n  selection = new SelectionModel<any>(true, []);\n\n  downloadLoading: boolean = false;\n  posting: boolean = false;\n  showForm: boolean = false;\n\n  Form: FormGroup\n  currentUser: any;\n\n\n  constructor(\n    private dialog: MatDialog,\n    private notificationAPI: NotificationServiceService,\n    private jobApplicationAPIService: JobApplicationAPIService,\n    private snackbar: SnackbarService,\n    private fb: FormBuilder,\n    private router: Router,\n    private employeeService: EmployeeService,\n    private tokenStorageService: TokenCookieService,\n\n\n  ) { this.getDataByEmpfCode() }\n\n  ngOnInit(): void {\n\n    this.currentUserCode = this.tokenStorageService.getUser().empPfNo;\n\n\n    this.Form = this.fb.group({\n      nationalId: ['']\n    });\n    // this.Form.valueChanges.subscribe(() => {\n    //   this.getData();\n    // });\n\n\n    //this.getData();\n\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next(true);\n    this.destroy$.complete();\n  }\n  \n  currentUserCode: any\n  getDataByEmpfCode() {\n    let param = new HttpParams().set(\"empNo\", this.currentUserCode);\n    this.employeeService\n      .readByEmployeePf(param)\n      .pipe(takeUntil(this.destroy$))\n      .subscribe({\n        next: (res) => {\n          if (res.entity) {\n            this.currentUser = res.entity;\n            console.log(\"getDataById this.formData: \", this.currentUser);\n            this.Form.patchValue({\n              nationalId: this.currentUser.nationalId\n            })\n            this.getData();\n          } else {\n            //this.snackbar.showNotification(\"snackbar-danger\", res.message);\n          }\n        },\n        error: (err) => {\n          //this.snackbar.showNotification(\"snackbar-danger\", err.message);\n        },\n        complete: () => { },\n      });\n  }\n  //****************************************************************************************** */\n  reqStatuses: any[] = [\n    { name: \"ALL\" },\n    { name: \"PENDING\" },\n    { name: \"SHORTLISTED\" },\n    { name: \"INTERVIEWING\" },\n    { name: \"APPROVED\" },\n    { name: \"RETURNED\" },\n    { name: \"REJECTED\" },\n  ];\n\n  selectedStatus: string = \"ALL\";\n  getSelectSelectedStatus() {\n    this.getData();\n  }\n  getSelectedStatus(status: any) {\n    this.Form.patchValue({\n      status: status,\n    });\n\n    this.getData();\n  }\n\n\n  getData() {\n    this.loading = true;\n    this.dataSource = new MatTableDataSource([]);\n    this.dataSource.paginator = this.paginator;\n    this.dataSource.sort = this.sort;\n\n    this.selectedStatus = this.Form.value.status;\n    let params = {\n      nationalId: this.Form.value.nationalId,\n    };\n\n    this.jobApplicationAPIService\n      .readByNationalId(params)\n      .pipe(takeUntil(this.destroy$))\n      .subscribe({\n        next: (res) => {\n          if (res.statusCode === 302) {\n            this.data = res.entity;\n            console.log(\"Data displayed on table\", this.data);\n\n            this.loading = false;\n            this.dataSource = new MatTableDataSource(this.data);\n            this.dataSource.paginator = this.paginator;\n            this.dataSource.sort = this.sort;\n          } else {\n            this.loading = false;\n\n            this.notificationAPI.alertWarning(\n              res.message\n            );\n          }\n        },\n        error: (err) => {\n          this.loading = false;\n          this.notificationAPI.alertWarning(\n            \"Server Error: \" + err.message\n          );\n        },\n        complete: () => { },\n      });\n  }\n  refresh() {\n    this.getData();\n  }\n\n  mngRecord(action: any, record?: any) {\n    let route = \"/erp-hr-self-service/employee-jobs/openings\";\n    this.router.navigate([route], {\n      queryParams: {\n        requestCode: record.refNumber,\n        action: action,\n      },\n    });\n  }\n  deleteRecord(id: number) {\n    let params = { id: id }\n    Swal.fire({\n      title: \"Are you sure?\",\n      text: \"THIS RECORD WILL BE DELETED PERMANENTLY!!\",\n      icon: \"warning\",\n      showCancelButton: true,\n      confirmButtonColor: \"#3085d6\",\n      cancelButtonColor: \"#d33\",\n      confirmButtonText: \"Yes, delete it!\",\n    }).then((result) => {\n      if (result.isConfirmed) {\n        this.loading = true;\n        this.jobApplicationAPIService\n          .delete(params)\n          .pipe(takeUntil(this.destroy$))\n          .subscribe({\n            next: (res) => {\n              if (res.statusCode == 200) {\n                this.getData();\n                this.loading = false;\n                this.notificationAPI.alertSuccess(\n                  \"RECORD DELETED SUCCESSFULLY\"\n                );\n              } else {\n                this.getData();\n                this.loading = false;\n                this.notificationAPI.alertWarning(res.message);\n              }\n            },\n            error: (err) => {\n              this.loading = false;\n              this.notificationAPI.alertSuccess(\"Server Error: \" + err.message);\n            },\n            complete: () => { },\n          });\n      }\n    });\n  }\n\n  input: any;\n  applyFilter(event: Event) {\n    const filterValue = (event.target as HTMLInputElement).value;\n    this.input = filterValue;\n    this.dataSource.filter = filterValue.trim().toLowerCase();\n    if (this.dataSource.paginator) {\n      this.dataSource.paginator.firstPage();\n    }\n  }\n\n  // ****************************************************************************************************************************\n  selectedRows: any[] = [];\n  atleastOneSelected: boolean = false;\n  isAllSelected() {\n    const numSelected = this.selection.selected.length;\n    const numRows = this.dataSource.data.length;\n    return numSelected === numRows;\n  }\n  masterToggle() {\n    if (this.isAllSelected()) {\n      this.selection.clear();\n      return;\n    }\n\n    this.selection.select(...this.dataSource.data);\n  }\n  checkboxLabel(row?: any): string {\n    if (!row) {\n      return `${this.isAllSelected() ? \"deselect\" : \"select\"} all`;\n    }\n    return `${this.selection.isSelected(row) ? \"deselect\" : \"select\"} row ${row.position + 1\n      }`;\n  }\n\n  expSelected() {\n    this.atleastOneSelected = true;\n    this.selectedRows = this.selection.selected;\n\n    console.log(\"this.selectedRows: \", this.selectedRows);\n  }\n\n  hasAccess: boolean = true;\n  processMultipleRows(status: any) {\n    let privilege = \"Validate Expenses\";\n\n    // this.hasAccess = this.accessControlService.hasPrivilege(\"FinanceModule\", [\n    //   privilege,\n    // ]);\n\n    if (this.hasAccess) {\n      Swal.fire({\n    title: '<span style=\"font-size: 20px;\">Enter Verifier Remarks</span>',\n    input: \"textarea\",\n    inputPlaceholder: \"Type your remarks here...\",\n    confirmButtonText: \"Submit\",\n    showCancelButton: true,\n    cancelButtonText: \"Cancel\",\n    icon: \"info\",\n\n    inputValidator: (value) => {\n          if (!value) {\n            return \"Please enter your remarks\";\n          }\n        },\n      }).then((result) => {\n        if (result.isConfirmed) {\n          const verifierRemarks = result.value;\n\n          const processedRows = this.selectedRows.map((element) => {\n            return {\n              id: element.id,\n              status: status,\n              verifierRemarks: verifierRemarks,\n            };\n          });\n\n          console.log(\"LOG: \", processedRows);\n\n          this.jobApplicationAPIService\n            .verify(processedRows)\n            .pipe(takeUntil(this.destroy$))\n            .subscribe({\n              next: (res) => {\n                console.log(\"res: \", res);\n                if (res.statusCode == 201 || 200 || 302) {\n                  this.snackbar.showNotification(\n                    \"snackbar-success\",\n                    res.message\n                  );\n\n                  this.selection = new SelectionModel<any>(true, []);\n                  this.selection.clear();\n                } else {\n                  this.snackbar.showNotification(\n                    \"snackbar-danger\",\n                    res.message\n                  );\n                }\n              },\n              error: (err) => {\n                this.snackbar.showNotification(\"snackbar-danger\", err.message);\n              },\n              complete: () => {\n                this.getData();\n              },\n            }),\n            Subscription;\n        } else {\n          this.selection = new SelectionModel<any>(true, []);\n          this.selection.clear();\n        }\n      });\n    }\n  }\n}\n","<section class=\"content\">\n    <div class=\"content-block\">\n        <div class=\"block-header\">\n            <!-- breadcrumb -->\n            <app-breadcrumb [title]=\"'All Job Applications'\" [items]=\"['Job Applications']\" [active_item]=\"'All Job Applications'\">\n            </app-breadcrumb>\n        </div>\n\n        <app-gen-widgets></app-gen-widgets>\n\n        <div class=\"row\">\n            <div class=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\">\n                <div class=\"card\">\n\n                    <div class=\"body\">\n                        <div class=\"table-responsive\">\n                            <div class=\"materialTableHeader\">\n                                <div class=\"row\">\n                                    <div class=\"col-8\">\n                                        <ul class=\"header-buttons-left ms-0\">\n                                            <li class=\"dropdown\">\n                                                <h2>Job Applications</h2>\n                                            </li>\n                                            <li class=\"dropdown m-l-20\">\n                                                <label for=\"search-input\"><i\n                                                        class=\"material-icons search-icon\">search</i></label>\n                                                <input placeholder=\"Filter...\" type=\"text\" (keyup)=\"applyFilter($event)\"\n                                                    #filter class=\"browser-default search-field\"\n                                                    aria-label=\"Search box\">\n                                            </li>\n                                            <li>\n                                                <div class=\"m-l-10\" matTooltip=\"ADD\">\n                                                    <button mat-mini-fab color=\"primary\" (click)=\"mngRecord('Add','')\">\n                                                        <mat-icon class=\"col-white\">add</mat-icon>\n                                                    </button>\n                                                </div>\n                                            </li>\n                                            <li>\n                                                <div class=\"m-l-10\" matTooltip=\"REFRESH\">\n                                                    <button mat-mini-fab color=\"primary\" (click)=\"refresh()\">\n                                                        <mat-icon class=\"col-white\">refresh</mat-icon>\n                                                    </button>\n                                                </div>\n                                            </li>\n                                            <li *ngIf=\"selection.selected.length > 0\">\n                                                <div class=\"m-l-10\" matTooltip=\"APPROVE\">\n                                                    <button mat-mini-fab color=\"primary\"\n                                                        (click)=\"processMultipleRows('APPROVED')\"\n                                                        class=\"mat-button-custom\">\n                                                        <mat-icon class=\"col-white\">check</mat-icon>\n                                                    </button>\n                                                </div>\n                                            </li>\n                                            <li *ngIf=\"selection.selected.length > 0\">\n                                                <div class=\"m-l-10\" matTooltip=\"REJECT\">\n                                                    <button mat-mini-fab color=\"warn\"\n                                                        (click)=\"processMultipleRows('REJECTED')\"\n                                                        class=\"mat-button-custom\">\n                                                        <mat-icon class=\"col-white\">cancel</mat-icon>\n                                                    </button>\n                                                </div>\n                                            </li>\n                                            <li *ngIf=\"selection.selected.length > 0\">\n                                                <div class=\"m-l-10\" matTooltip=\"RETURN\">\n                                                    <button mat-mini-fab color=\"accent\"\n                                                        (click)=\"processMultipleRows('RETURNED')\"\n                                                        class=\"mat-button-custom\">\n                                                        <mat-icon class=\"col-white\">undo</mat-icon>\n                                                    </button>\n                                                </div>\n                                            </li>\n                                        </ul>\n                                    </div>\n                                    <div class=\"col-4\">\n                                        <ul class=\"header-buttons\">\n                                            <li>\n                                                <div class=\"export-button m-l-10\" matTooltip=\"XLSX\">\n                                                    <img src=\"assets/images/icons/xlsx.png\" alt=\"\"\n                                                        (click)=\"exporter.exportTable('xlsx', {fileName:'assets-list', sheet: 'sheet1'})\" />\n                                                </div>\n                                            </li>\n                                            <li>\n                                                <div class=\"export-button m-l-10\" matTooltip=\"CSV\">\n                                                    <img src=\"assets/images/icons/csv.png\" alt=\"\"\n                                                        (click)=\"exporter.exportTable('csv')\" />\n                                                </div>\n                                            </li>\n                                            <li>\n                                                <div class=\"export-button m-l-10\" matTooltip=\"JSON\">\n                                                    <img src=\"assets/images/icons/json.png\" alt=\"\"\n                                                        (click)=\"exporter.exportTable('json')\" />\n                                                </div>\n                                            </li>\n                                            <li>\n                                                <div class=\"export-button m-l-10\" matTooltip=\"TXT\">\n                                                    <img src=\"assets/images/icons/txt.png\" alt=\"\"\n                                                        (click)=\"exporter.exportTable('txt')\" />\n                                                </div>\n                                            </li>\n                                        </ul>\n                                    </div>\n                                </div>\n                            </div>\n\n                            <!-- <div class=\"materialTableHeader mt-2\" >\n                                <div class=\"row\">\n                                    <div class=\"col-2\">\n                                        <form [formGroup]=\"Form\">\n\n                                            <mat-form-field class=\"example-full-width\" appearance=\"fill\">\n                                                <mat-label>Status</mat-label>\n\n                                                <mat-select formControlName=\"status\"\n                                                    >\n                                                    <mat-option *ngFor=\"let reqStatus of reqStatuses\"\n                                                        [value]=\"reqStatus.name\">{{ reqStatus.name\n                                                        }}\n                                                    </mat-option>\n                                                </mat-select>\n\n                                                <mat-error *ngIf=\"Form.get('status').hasError('required')\">\n                                                    Please select Status\n                                                </mat-error>\n                                            </mat-form-field>\n\n                                        </form>\n                                    </div>\n                                    <div class=\"col-10\">\n                                        <div class=\"button-container mt-1\">\n                                            <button mat-raised-button [class.active]=\"selectedStatus === 'ALL'\"\n                                                class=\"mat-button verified\" (click)=\"getSelectedStatus('ALL')\">\n                                                <mat-icon>check_circle</mat-icon>\n                                                ALL\n                                            </button>\n\n                                            <button mat-raised-button [class.active]=\"selectedStatus === 'PENDING'\"\n                                                class=\"mat-button pending\" (click)=\"getSelectedStatus('PENDING')\">\n                                                <mat-icon>pending</mat-icon>\n                                                PENDING\n                                            </button>\n\n                                            <button mat-raised-button [class.active]=\"selectedStatus === 'APPROVED'\"\n                                                class=\"mat-button approved\" (click)=\"getSelectedStatus('APPROVED')\">\n                                                <mat-icon>thumb_up</mat-icon>\n                                                APPROVED\n                                            </button>\n                                            <button mat-raised-button [class.active]=\"selectedStatus === 'RETURNED'\"\n                                                class=\"mat-button returned\" (click)=\"getSelectedStatus('RETURNED')\">\n                                                <mat-icon>reply</mat-icon>\n                                                RETURNED\n                                            </button>\n                                            <button mat-raised-button [class.active]=\"selectedStatus === 'REJECTED'\"\n                                                class=\"mat-button rejected\" (click)=\"getSelectedStatus('REJECTED')\">\n                                                <mat-icon>cancel</mat-icon>\n                                                REJECTED\n                                            </button>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div> -->\n\n                            <mat-table #table matTableExporter [dataSource]=\"dataSource\" matSort class=\"mat-cell\"\n                                #exporter=\"matTableExporter\">\n\n                                <ng-container matColumnDef=\"select\">\n                                    <mat-header-cell *matHeaderCellDef [ngClass]=\"'tbl-col-width-per-4'\">\n                                        <mat-checkbox color=\"primary\" (change)=\"$event ? masterToggle() : null\"\n                                            [checked]=\"selection.hasValue() && isAllSelected()\"\n                                            [indeterminate]=\"selection.hasValue() && !isAllSelected()\"\n                                            [ngClass]=\"'tbl-checkbox'\" (change)=\"expSelected()\">\n                                        </mat-checkbox>\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" [ngClass]=\"'tbl-col-width-per-4'\">\n                                        <mat-checkbox color=\"primary\" (click)=\"$event.stopPropagation()\"\n                                            (change)=\"$event ? selection.toggle(row) : null\"\n                                            [checked]=\"selection.isSelected(row)\" [ngClass]=\"'tbl-checkbox'\"\n                                            [aria-label]=\"checkboxLabel(row)\" (change)=\"expSelected()\">\n                                        </mat-checkbox>\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"id\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-10\">\n                                        ID\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-10\">\n                                        {{ row.id }}\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"status\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Status\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        {{ row.status }}\n                                    </mat-cell>\n                                </ng-container>\n                                \n                                <ng-container matColumnDef=\"postedFlag\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Posted Flag\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        {{ row.postedFlag }}\n                                    </mat-cell>\n                                </ng-container>\n                                \n                                <ng-container matColumnDef=\"postedBy\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Posted By\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        {{ row.postedBy }}\n                                    </mat-cell>\n                                </ng-container>\n                                \n                                <ng-container matColumnDef=\"postedTime\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Posted Time\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        {{ row.postedTime | date:'short' }}\n                                    </mat-cell>\n                                </ng-container>\n                                \n                                <ng-container matColumnDef=\"jobRefNumber\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Job Ref Number\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        {{ row.jobRefNumber }}\n                                    </mat-cell>\n                                </ng-container>\n                                \n                                <ng-container matColumnDef=\"applicationNumber\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Application Number\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        {{ row.applicationNumber }}\n                                    </mat-cell>\n                                </ng-container>\n                                \n                                <ng-container matColumnDef=\"firstName\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        First Name\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        {{ row.firstName }}\n                                    </mat-cell>\n                                </ng-container>\n                                \n                                <ng-container matColumnDef=\"lastName\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Last Name\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        {{ row.lastName }}\n                                    </mat-cell>\n                                </ng-container>\n                                \n                                <ng-container matColumnDef=\"middleName\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Middle Name\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        {{ row.middleName }}\n                                    </mat-cell>\n                                </ng-container>\n                                \n                                <ng-container matColumnDef=\"emailAddress\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Email Address\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        {{ row.emailAddress }}\n                                    </mat-cell>\n                                </ng-container>\n                                \n                                <ng-container matColumnDef=\"phoneNumber\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Phone Number\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        {{ row.phoneNumber }}\n                                    </mat-cell>\n                                </ng-container>\n                                \n                                <ng-container matColumnDef=\"nationalId\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        National ID\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        {{ row.nationalId }}\n                                    </mat-cell>\n                                </ng-container>\n                                \n                                <ng-container matColumnDef=\"jobTitle\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Job Title\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        {{ row.jobTitle }}\n                                    </mat-cell>\n                                </ng-container>\n                                \n                                <ng-container matColumnDef=\"applicationType\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Application Type\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        {{ row.applicationType }}\n                                    </mat-cell>\n                                </ng-container>\n                                \n\n                                <ng-container matColumnDef=\"status\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Status\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row; let i = index\"\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-20\"\n                                        (click)=\"$event.stopPropagation()\">\n                                        <ng-container [ngSwitch]=\"row.status\">\n                                            <button *ngSwitchCase=\"'APPROVED'\"\n                                                class=\"badge badge-solid-green btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-check-circle\"></i>&nbsp;\n                                                {{ row.status }}\n                                            </button>\n                                            <button *ngSwitchCase=\"'REJECTED'\"\n                                                class=\"badge badge-solid-red btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-times-circle\"></i>&nbsp;\n                                                {{ row.status }}\n                                            </button>\n                                            <button *ngSwitchCase=\"'RETURNED'\"\n                                                class=\"badge badge-solid-brown btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-undo-alt\"></i>&nbsp;\n                                                {{ row.status }}\n                                            </button>\n                                            <button *ngSwitchCase=\"'PENDING'\"\n                                                class=\"badge badge-solid-blue btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-exclamation-circle\"></i>&nbsp;\n                                                {{ row.status }}\n                                            </button>\n                                            <button *ngSwitchCase=\"'SHORTLISTED'\"\n                                                class=\"badge badge-solid-orange btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-check\"></i>&nbsp;\n                                                {{ row.status }}\n                                            </button>\n\n                                            <button *ngSwitchCase=\"'INTERVIEWING'\"\n                                                class=\"badge badge-solid-purple btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-calendar-alt\"></i>&nbsp;\n                                                {{ row.status }}\n                                            </button>\n\n                                            <button *ngSwitchDefault class=\"badge badge-solid-brown btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-question-circle\"></i>&nbsp;\n                                                {{ row.status }}\n                                            </button>\n                                        </ng-container>\n                                    </mat-cell>\n                                </ng-container>\n                                <ng-container matColumnDef=\"verifiedFlag\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Verified\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        <ng-container *ngIf=\"row.verifiedFlag === 'Y'; else notVerified\">\n                                            <button class=\"badge badge-solid-green btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-check\"></i>&nbsp; Verified\n                                            </button>\n                                        </ng-container>\n                                        <ng-template #notVerified>\n                                            <button class=\"badge badge-solid-red btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-times\"></i>&nbsp; Not Verified\n                                            </button>\n                                        </ng-template>\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"deletedFlag\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Deleted\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        <ng-container *ngIf=\"row.deletedFlag === 'Y'; else notDeleted\">\n                                            <button class=\"badge badge-solid-red btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-trash\"></i>&nbsp; Deleted\n                                            </button>\n                                        </ng-container>\n                                        <ng-template #notDeleted>\n                                            <button class=\"badge badge-solid-green btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-check\"></i>&nbsp; Active\n                                            </button>\n                                        </ng-template>\n                                    </mat-cell>\n                                </ng-container>\n\n\n\n\n\n\n\n                                <ng-container matColumnDef=\"action\">\n                                    <mat-header-cell class=\"column-nowrap psl-3 tbl-col-width-per-15 pr-0\"\n                                        *matHeaderCellDef>\n                                        Action\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row; let i = index\"\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-15 pr-0\">\n\n                                        <!-- <button mat-icon-button color=\"accent\" (click)=\"$event.stopPropagation()\"\n                                            (click)=\"mngRecord('Update',row)\" class=\"tbl-action-btn\">\n                                            <app-feather-icons [icon]=\"'edit'\" [class]=\"'tbl-fav-edit'\">\n                                            </app-feather-icons>\n                                        </button>\n\n                                        <button mat-icon-button color=\"primary\" (click)=\"$event.stopPropagation()\"\n                                            (click)=\"mngRecord('View',row)\" class=\"tbl-action-btn\">\n                                            <app-feather-icons [icon]=\"'eye'\" [class]=\"'tbl-fav-eye'\">\n                                            </app-feather-icons>\n                                        </button> -->\n                                        <!-- \n                                        <button mat-icon-button color=\"primary\" (click)=\"$event.stopPropagation()\"\n                                            (click)=\"lockOrUnlockAccount(row)\" class=\"tbl-action-btn\">\n                                            <mat-icon>{{ row.isAcctActive === 'Y' ? 'lock' : 'lock_open' }}</mat-icon>\n                                        </button> -->\n\n                                        <button mat-icon-button color=\"accent\" (click)=\"$event.stopPropagation()\"\n                                            (click)=\"deleteRecord(row.id)\" class=\"tbl-action-btn\">\n                                            <app-feather-icons [icon]=\"'trash-2'\" [class]=\"'tbl-fav-delete'\">\n                                            </app-feather-icons>\n                                        </button>\n                                    </mat-cell>\n                                </ng-container>\n                                <mat-header-row *matHeaderRowDef=\"displayedColumns\">\n                                </mat-header-row>\n                                <mat-row *matRowDef=\"let row; columns: displayedColumns;\" (click)=\"viewRecord(row)\"\n                                    [style.cursor]=\"'pointer'\" matRipple>\n                                </mat-row>\n\n\n                                <tr *matNoDataRow>\n                                    <td colspan=\"{{ displayedColumns.length }}\"> No data matching the filter \"{{ input\n                                        }}\"</td>\n                                </tr>\n                            </mat-table>\n                            <div class=\"m-2 mx-2\" *ngIf=\"loading || downloadLoading\">\n                                <mat-progress-bar color=\"primary\" mode=\"indeterminate\">\n                                </mat-progress-bar>\n                            </div>\n                            <div *ngIf=\"loading\" class=\"tbl-spinner\">\n                                <mat-progress-spinner color=\"primary\" [diameter]=\"40\" mode=\"indeterminate\">\n                                </mat-progress-spinner>\n                            </div>\n\n                            <mat-paginator [pageSize]=\"10\" [pageSizeOptions]=\"[2, 5, 10, 20, 30, 40, 50, 100]\"\n                                aria-label=\"Select page of users\">\n                            </mat-paginator>\n\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</section>","import { SelectionModel } from '@angular/cdk/collections';\nimport { HttpParams } from '@angular/common/http';\nimport { Component, OnInit, ViewChild } from '@angular/core';\nimport { FormGroup, FormBuilder } from '@angular/forms';\nimport { MatDialog, MatDialogConfig } from '@angular/material/dialog';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { Router } from '@angular/router';\nimport { Subject, takeUntil, Subscription } from 'rxjs';\nimport { NotificationServiceService } from 'src/@core/Models/Notification/notification-service.service';\nimport { TokenCookieService } from 'src/app/core/service/token-storage-cookies.service';\nimport { JobManagementService } from 'src/app/erp-hr/data/job-services/job-management.service';\nimport { SnackbarService } from 'src/app/shared/services/snackbar.service';\nimport Swal from 'sweetalert2';\nimport { ManageJobOpeningComponent } from '../manage-job-opening/manage-job-opening.component';\nimport { EmployeeService } from 'src/app/erp-hr/data/employee-services/employee-management.service';\n\n@Component({\n  selector: 'app-jobs-openings-page',\n  templateUrl: './jobs-openings-page.component.html',\n  styleUrls: ['./jobs-openings-page.component.sass']\n})\nexport class JobsOpeningsPageComponent implements OnInit {\n\n  displayedColumns: string[] = [\n    // \"select\",\n    \"jobRefNumber\",\n    \"title\",\n    \"vacantPositions\",\n    \"jobLevel\",\n    \"jobTerm\",\n    \"status\",\n    \"deadlineDate\",\n    //\"hodAction\",\n    \"action\",\n  ];\n  loading: boolean = false;\n  data: any;\n  error: any;\n  dialogConfig: any;\n  destroy$: Subject<boolean> = new Subject<boolean>();\n\n  dataSource!: MatTableDataSource<any>;\n  @ViewChild(MatPaginator) paginator!: MatPaginator;\n  @ViewChild(MatSort) sort!: MatSort;\n\n  selection = new SelectionModel<any>(true, []);\n\n  downloadLoading: boolean = false;\n  posting: boolean = false;\n  showForm: boolean = false;\n\n  Form: FormGroup\n  currentUser: any;\n\n  constructor(\n    private dialog: MatDialog,\n    private notificationAPI: NotificationServiceService,\n    private jobManagementService: JobManagementService,\n    private snackbar: SnackbarService,\n    private router: Router,\n    private fb: FormBuilder,\n    private tokenStorageService: TokenCookieService,\n    private employeeService: EmployeeService,\n\n  ) { }\n\n  ngOnInit(): void {\n    this.currentUserCode = this.tokenStorageService.getUser().empPfNo;\n    \n    \n    this.Form = this.fb.group({\n      status: ['APPROVED'],\n      jobType: ['INTERNAL-JOB']\n    });\n    this.Form.valueChanges.subscribe(() => {\n      this.getData();\n    });\n\n    this.getData();\n    this.getDataByEmpfCode()\n\n\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next(true);\n    this.destroy$.complete();\n  }\n\n  currentUserCode: any\n  getDataByEmpfCode() {\n    let param = new HttpParams().set(\"empNo\", this.currentUserCode);\n    this.employeeService\n      .readByEmployeePf(param)\n      .pipe(takeUntil(this.destroy$))\n      .subscribe({\n        next: (res) => {\n          if (res.entity) {\n            this.currentUser = res.entity;\n            console.log(\"getDataById this.formData: \", this.currentUser);\n          } else {\n            //this.snackbar.showNotification(\"snackbar-danger\", res.message);\n          }\n        },\n        error: (err) => {\n          //this.snackbar.showNotification(\"snackbar-danger\", err.message);\n        },\n        complete: () => { },\n      });\n  }\n  //****************************************************************************************** */\n  reqStatuses: any[] = [\n    // { name: \"ALL\" },\n    // { name: \"PENDING\" },\n    { name: \"APPROVED\" },\n    // { name: \"RETURNED\" },\n    // { name: \"REJECTED\" },\n  ];\n  reqJobTypes: any[] = [\n    // { name: \"ALL\" },\n    // { name: \"OPEN-JOB\" },\n    { name: \"EXTERNAL-JOB\" },\n    { name: \"INTERNAL-JOB\" },\n\n  ];\n  selectedStatus: string = \"APPROVED\";\n  selectedJobType: string = \"INTERNAL-JOB\";\n\n\n  getSelectSelectedStatus() {\n    this.getData();\n  }\n  getSelectedStatus(status: any) {\n    this.Form.patchValue({\n      status: status,\n    });\n  }\n  getSelectedType(type: any) {\n    this.Form.patchValue({\n      jobType: type,\n    });\n  }\n  getData() {\n    this.loading = true;\n    this.dataSource = new MatTableDataSource([]);\n    this.dataSource.paginator = this.paginator;\n    this.dataSource.sort = this.sort;\n\n    this.selectedStatus = this.Form.value.status;\n    this.selectedJobType = this.Form.value.jobType;\n\n    let params = {\n      status: this.Form.value.status,\n      applicationType: this.Form.value.jobType,\n    };\n\n    this.jobManagementService\n      .readByStatusAndApplicationType(params)\n      .pipe(takeUntil(this.destroy$))\n      .subscribe({\n        next: (res) => {\n          if (res.statusCode === 302) {\n            this.data = res.entity;\n            console.log(\"Data displayed on table\", this.data);\n\n            this.loading = false;\n            this.dataSource = new MatTableDataSource(this.data);\n            this.dataSource.paginator = this.paginator;\n            this.dataSource.sort = this.sort;\n          } else {\n            this.loading = false;\n          }\n        },\n        error: (err) => {\n          this.loading = false;\n          this.notificationAPI.alertWarning(\n            \"Server Error:  \" + err.message\n          );\n        },\n        complete: () => { },\n      });\n  }\n  refresh() {\n    this.getData();\n  }\n\n  mngRecord(action: any, record?: any) {\n    console.log(\"this.action:; \", action);\n    console.log(\"this.record:; \", record);\n\n    const dialogConfig = new MatDialogConfig();\n    dialogConfig.disableClose = false;\n    dialogConfig.disableClose = true;\n    dialogConfig.width = \"500px\";\n    dialogConfig.data = {\n      action: action,\n      record: record,\n      currentUser: this.currentUser\n    };\n    const dialogRef = this.dialog.open(ManageJobOpeningComponent, dialogConfig);\n    dialogRef.afterClosed().subscribe((result) => {\n      console.log(\"result:::\", result);\n\n      this.getData();\n    });\n  }\n\n  deleteRecord(id: number) {\n    let params = { id: id }\n    Swal.fire({\n      title: \"Are you sure?\",\n      text: \"THIS RECORD WILL BE DELETED PERMANENTLY!!\",\n      icon: \"warning\",\n      showCancelButton: true,\n      confirmButtonColor: \"#3085d6\",\n      cancelButtonColor: \"#d33\",\n      confirmButtonText: \"Yes, delete it!\",\n    }).then((result) => {\n      if (result.isConfirmed) {\n        this.loading = true;\n        this.jobManagementService\n          .delete(params)\n          .pipe(takeUntil(this.destroy$))\n          .subscribe({\n            next: (res) => {\n              if (res.statusCode == 200) {\n                this.getData();\n                this.loading = false;\n                this.notificationAPI.alertSuccess(\n                  \"RECORD DELETED SUCCESSFULLY\"\n                );\n              } else {\n                this.getData();\n                this.loading = false;\n                this.notificationAPI.alertWarning(res.message);\n              }\n            },\n            error: (err) => {\n              this.loading = false;\n              this.notificationAPI.alertSuccess(\"Server Error: \" + err.message);\n            },\n            complete: () => { },\n          });\n      }\n    });\n  }\n\n  input: any;\n  applyFilter(event: Event) {\n    const filterValue = (event.target as HTMLInputElement).value;\n    this.input = filterValue;\n    this.dataSource.filter = filterValue.trim().toLowerCase();\n    if (this.dataSource.paginator) {\n      this.dataSource.paginator.firstPage();\n    }\n  }\n\n  // ****************************************************************************************************************************\n  selectedRows: any[] = [];\n  atleastOneSelected: boolean = false;\n  isAllSelected() {\n    const numSelected = this.selection.selected.length;\n    const numRows = this.dataSource.data.length;\n    return numSelected === numRows;\n  }\n  masterToggle() {\n    if (this.isAllSelected()) {\n      this.selection.clear();\n      return;\n    }\n\n    this.selection.select(...this.dataSource.data);\n  }\n  checkboxLabel(row?: any): string {\n    if (!row) {\n      return `${this.isAllSelected() ? \"deselect\" : \"select\"} all`;\n    }\n    return `${this.selection.isSelected(row) ? \"deselect\" : \"select\"} row ${row.position + 1\n      }`;\n  }\n\n  expSelected() {\n    this.atleastOneSelected = true;\n    this.selectedRows = this.selection.selected;\n\n    console.log(\"this.selectedRows: \", this.selectedRows);\n  }\n\n  hasAccess: boolean = true;\n  processMultipleRows(status: any) {\n    let privilege = \"Validate Expenses\";\n\n    // this.hasAccess = this.accessControlService.hasPrivilege(\"FinanceModule\", [\n    //   privilege,\n    // ]);\n\n    if (this.hasAccess) {\n      Swal.fire({\n    title: '<span style=\"font-size: 20px;\">Enter Verifier Remarks</span>',\n    input: \"textarea\",\n    inputPlaceholder: \"Type your remarks here...\",\n    confirmButtonText: \"Submit\",\n    showCancelButton: true,\n    cancelButtonText: \"Cancel\",\n    icon: \"info\",\n\n    inputValidator: (value) => {\n          if (!value) {\n            return \"Please enter your remarks\";\n          }\n        },\n      }).then((result) => {\n        if (result.isConfirmed) {\n          const verifierRemarks = result.value;\n\n          const processedRows = this.selectedRows.map((element) => {\n            return {\n              id: element.id,\n              status: status,\n              verifierRemarks: verifierRemarks,\n            };\n          });\n\n          console.log(\"LOG: \", processedRows);\n\n          this.jobManagementService\n            .verify(processedRows)\n            .pipe(takeUntil(this.destroy$))\n            .subscribe({\n              next: (res) => {\n                console.log(\"res: \", res);\n                if (res.statusCode == 201 || 200 || 302) {\n                  this.snackbar.showNotification(\n                    \"snackbar-success\",\n                    res.message\n                  );\n\n                  this.selection = new SelectionModel<any>(true, []);\n                  this.selection.clear();\n                } else {\n                  this.snackbar.showNotification(\n                    \"snackbar-danger\",\n                    res.message\n                  );\n                }\n              },\n              error: (err) => {\n                this.snackbar.showNotification(\"snackbar-danger\", err.message);\n              },\n              complete: () => {\n                this.getData();\n              },\n            }),\n            Subscription;\n        } else {\n          this.selection = new SelectionModel<any>(true, []);\n          this.selection.clear();\n        }\n      });\n    }\n  }\n}\n","<section class=\"content\">\n    <div class=\"content-block\">\n        <div class=\"block-header\">\n            <!-- breadcrumb -->\n            <app-breadcrumb [title]=\"'All Job Openings'\" [items]=\"['Jobs Openings']\"\n                [active_item]=\"'All Jobs Openings'\">\n            </app-breadcrumb>\n        </div>\n\n        <app-gen-widgets></app-gen-widgets>\n\n        <div class=\"row\">\n            <div class=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\">\n                <div class=\"card\">\n                    <div class=\"body\">\n                        <div class=\"table-responsive\">\n                            <div class=\"materialTableHeader\">\n                                <div class=\"row\">\n                                    <div class=\"col-8\">\n                                        <ul class=\"header-buttons-left ms-0\">\n                                            <li class=\"dropdown\">\n                                                <h2>Job Openings</h2>\n                                            </li>\n                                            <li class=\"dropdown m-l-20\">\n                                                <label for=\"search-input\"><i\n                                                        class=\"material-icons search-icon\">search</i></label>\n                                                <input placeholder=\"Filter...\" type=\"text\" (keyup)=\"applyFilter($event)\"\n                                                    #filter class=\"browser-default search-field\"\n                                                    aria-label=\"Search box\" />\n                                            </li>\n                                            <!-- <li>\n                                                <div class=\"m-l-10\" matTooltip=\"ADD\">\n                                                    <button mat-mini-fab color=\"primary\" (click)=\"mngRecord('Add', '')\">\n                                                        <mat-icon class=\"col-white\">add</mat-icon>\n                                                    </button>\n                                                </div>\n                                            </li> -->\n                                            <li>\n                                                <div class=\"m-l-10\" matTooltip=\"REFRESH\">\n                                                    <button mat-mini-fab color=\"primary\" (click)=\"refresh()\">\n                                                        <mat-icon class=\"col-white\">refresh</mat-icon>\n                                                    </button>\n                                                </div>\n                                            </li>\n                                            <li *ngIf=\"selection.selected.length > 0\">\n                                                <div class=\"m-l-10\" matTooltip=\"APPROVE\">\n                                                    <button mat-mini-fab color=\"primary\"\n                                                        (click)=\"processMultipleRows('APPROVED')\"\n                                                        class=\"mat-button-custom\">\n                                                        <mat-icon class=\"col-white\">check</mat-icon>\n                                                    </button>\n                                                </div>\n                                            </li>\n                                            <li *ngIf=\"selection.selected.length > 0\">\n                                                <div class=\"m-l-10\" matTooltip=\"REJECT\">\n                                                    <button mat-mini-fab color=\"warn\"\n                                                        (click)=\"processMultipleRows('REJECTED')\"\n                                                        class=\"mat-button-custom\">\n                                                        <mat-icon class=\"col-white\">cancel</mat-icon>\n                                                    </button>\n                                                </div>\n                                            </li>\n                                            <li *ngIf=\"selection.selected.length > 0\">\n                                                <div class=\"m-l-10\" matTooltip=\"RETURN\">\n                                                    <button mat-mini-fab color=\"accent\"\n                                                        (click)=\"processMultipleRows('RETURNED')\"\n                                                        class=\"mat-button-custom\">\n                                                        <mat-icon class=\"col-white\">undo</mat-icon>\n                                                    </button>\n                                                </div>\n                                            </li>\n                                        </ul>\n                                    </div>\n                                    <div class=\"col-4\">\n                                        <ul class=\"header-buttons\">\n                                            <li>\n                                                <div class=\"export-button m-l-10\" matTooltip=\"XLSX\">\n                                                    <img src=\"assets/images/icons/xlsx.png\" alt=\"\" (click)=\"\n                              exporter.exportTable('xlsx', {\n                                fileName: 'assets-list',\n                                sheet: 'sheet1'\n                              })\n                            \" />\n                                                </div>\n                                            </li>\n                                            <li>\n                                                <div class=\"export-button m-l-10\" matTooltip=\"CSV\">\n                                                    <img src=\"assets/images/icons/csv.png\" alt=\"\"\n                                                        (click)=\"exporter.exportTable('csv')\" />\n                                                </div>\n                                            </li>\n                                            <li>\n                                                <div class=\"export-button m-l-10\" matTooltip=\"JSON\">\n                                                    <img src=\"assets/images/icons/json.png\" alt=\"\"\n                                                        (click)=\"exporter.exportTable('json')\" />\n                                                </div>\n                                            </li>\n                                            <li>\n                                                <div class=\"export-button m-l-10\" matTooltip=\"TXT\">\n                                                    <img src=\"assets/images/icons/txt.png\" alt=\"\"\n                                                        (click)=\"exporter.exportTable('txt')\" />\n                                                </div>\n                                            </li>\n                                        </ul>\n                                    </div>\n                                </div>\n                            </div>\n\n                            <div class=\"materialTableHeader mt-2\">\n                                <div class=\"row\">\n                                    <div class=\"col-2\">\n                                        <form [formGroup]=\"Form\">\n\n                                            <mat-form-field class=\"example-full-width\" appearance=\"fill\">\n                                                <mat-label>Status</mat-label>\n\n                                                <mat-select formControlName=\"status\">\n                                                    <mat-option *ngFor=\"let reqStatus of reqStatuses\"\n                                                        [value]=\"reqStatus.name\">{{ reqStatus.name\n                                                        }}\n                                                    </mat-option>\n                                                </mat-select>\n\n                                                <mat-error *ngIf=\"Form.get('status').hasError('required')\">\n                                                    Please select Status\n                                                </mat-error>\n                                            </mat-form-field>\n\n                                        </form>\n                                    </div>\n                                    <div class=\"col-4\">\n                                        <div class=\"button-container mt-1\">\n                                            <!-- <button mat-raised-button [class.active]=\"selectedStatus === 'ALL'\"\n                                                class=\"mat-button verified\" (click)=\"getSelectedStatus('ALL')\">\n                                                <mat-icon>check_circle</mat-icon>\n                                                ALL\n                                            </button>\n\n                                            <button mat-raised-button [class.active]=\"selectedStatus === 'PENDING'\"\n                                                class=\"mat-button pending\" (click)=\"getSelectedStatus('PENDING')\">\n                                                <mat-icon>pending</mat-icon>\n                                                PENDING\n                                            </button> -->\n\n                                            <button mat-raised-button [class.active]=\"selectedStatus === 'APPROVED'\"\n                                                class=\"mat-button approved\" (click)=\"getSelectedStatus('APPROVED')\">\n                                                <mat-icon>thumb_up</mat-icon>\n                                                APPROVED\n                                            </button>\n                                            <!-- <button mat-raised-button [class.active]=\"selectedStatus === 'RETURNED'\"\n                                                class=\"mat-button returned\" (click)=\"getSelectedStatus('RETURNED')\">\n                                                <mat-icon>reply</mat-icon>\n                                                RETURNED\n                                            </button>\n                                            <button mat-raised-button [class.active]=\"selectedStatus === 'REJECTED'\"\n                                                class=\"mat-button rejected\" (click)=\"getSelectedStatus('REJECTED')\">\n                                                <mat-icon>cancel</mat-icon>\n                                                REJECTED\n                                            </button> -->\n                                        </div>\n                                    </div>\n                                    <div class=\"col-2\">\n                                        <form [formGroup]=\"Form\">\n\n                                            <mat-form-field class=\"example-full-width\" appearance=\"fill\">\n                                                <mat-label>Type</mat-label>\n\n                                                <mat-select formControlName=\"jobType\">\n                                                    <mat-option *ngFor=\"let reqJobType of reqJobTypes\"\n                                                        [value]=\"reqJobType.name\">{{ reqJobType.name\n                                                        }}\n                                                    </mat-option>\n                                                </mat-select>\n\n                                                <mat-error *ngIf=\"Form.get('jobType').hasError('required')\">\n                                                    Please select job type\n                                                </mat-error>\n                                            </mat-form-field>\n\n                                        </form>\n                                    </div>\n                                    <div class=\"col-4\">\n                                        <div class=\"button-container mt-1\">\n                                            <!-- <button mat-raised-button [class.active]=\"selectedJobType === 'ALL'\"\n                                                class=\"mat-button verified\" (click)=\"getSelectedType('ALL')\">\n                                                <mat-icon>check_circle</mat-icon>\n                                                ALL\n                                            </button> -->\n                                            <button mat-raised-button [class.active]=\"selectedJobType === 'OPEN-JOB'\"\n                                                class=\"mat-button returned\" (click)=\"getSelectedType('OPEN-JOB')\">\n                                                <mat-icon>reply</mat-icon>\n                                                OPEN-JOB\n                                            </button>\n                                            <!-- <button mat-raised-button\n                                                [class.active]=\"selectedJobType === 'EXTERNAL-JOB'\"\n                                                class=\"mat-button pending\" (click)=\"getSelectedType('EXTERNAL-JOB')\">\n                                                <mat-icon>pending</mat-icon>\n                                                EXTERNAL-JOB\n                                            </button> -->\n\n                                            <button mat-raised-button [class.active]=\"selectedJobType === 'INTERNAL-JOB'\"\n                                                class=\"mat-button approved\" (click)=\"getSelectedType('INTERNAL-JOB')\">\n                                                <mat-icon>thumb_up</mat-icon>\n                                                INTERNAL-JOB\n                                            </button>\n\n\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n\n                            <mat-table #table matTableExporter [dataSource]=\"dataSource\" matSort class=\"mat-cell\"\n                                #exporter=\"matTableExporter\">\n                                <ng-container matColumnDef=\"select\">\n                                    <mat-header-cell *matHeaderCellDef [ngClass]=\"'tbl-col-width-per-4'\">\n                                        <mat-checkbox color=\"primary\" (change)=\"$event ? masterToggle() : null\"\n                                            [checked]=\"selection.hasValue() && isAllSelected()\"\n                                            [indeterminate]=\"selection.hasValue() && !isAllSelected()\"\n                                            [ngClass]=\"'tbl-checkbox'\" (change)=\"expSelected()\">\n                                        </mat-checkbox>\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" [ngClass]=\"'tbl-col-width-per-4'\">\n                                        <mat-checkbox color=\"primary\" (click)=\"$event.stopPropagation()\"\n                                            (change)=\"$event ? selection.toggle(row) : null\"\n                                            [checked]=\"selection.isSelected(row)\" [ngClass]=\"'tbl-checkbox'\"\n                                            [aria-label]=\"checkboxLabel(row)\" (change)=\"expSelected()\">\n                                        </mat-checkbox>\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"id\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-10\">\n                                        ID\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-10\">\n                                        {{ row.id }}\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"jobRefNumber\">\n                                    <mat-header-cell *matHeaderCellDef class=\"column-nowrap psl-3 tbl-col-width-per-8\">\n                                        Ref Number\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-8\">\n                                        {{ row.jobRefNumber }}\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"title\">\n                                    <mat-header-cell *matHeaderCellDef class=\"column-nowrap psl-3 tbl-col-width-per-30\">\n                                        Title\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-30\">\n                                        {{ row.jobTitle }}\n                                    </mat-cell>\n                                </ng-container>\n\n                                <!-- <ng-container matColumnDef=\"department\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                    <mat-header-cell *matHeaderCellDef> Department </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\"> {{row.department}} </mat-cell>\n                                </ng-container> -->\n\n                                <ng-container matColumnDef=\"vacantPositions\">\n                                    <mat-header-cell *matHeaderCellDef class=\"column-nowrap psl-3 tbl-col-width-per-10\">\n                                        Vacant Pos\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-10\">\n                                        {{ row.vacantPositions }}\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"jobLevel\">\n                                    <mat-header-cell *matHeaderCellDef class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Level\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        {{ row.jobLevel }}\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"jobTerm\">\n                                    <mat-header-cell *matHeaderCellDef class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Term\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        {{ row.jobTerm }}\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"status\">\n                                    <mat-header-cell *matHeaderCellDef mat-sort-header\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Status\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row; let i = index\"\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-20\"\n                                        (click)=\"$event.stopPropagation()\">\n                                        <ng-container [ngSwitch]=\"row.status\">\n                                            <button *ngSwitchCase=\"'APPROVED'\"\n                                                class=\"badge badge-solid-green btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-check-circle\"></i>&nbsp;\n                                                {{ row.status }}\n                                            </button>\n                                            <button *ngSwitchCase=\"'REJECTED'\"\n                                                class=\"badge badge-solid-red btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-times-circle\"></i>&nbsp;\n                                                {{ row.status }}\n                                            </button>\n                                            <button *ngSwitchCase=\"'RETURNED'\"\n                                                class=\"badge badge-solid-brown btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-undo-alt\"></i>&nbsp;\n                                                {{ row.status }}\n                                            </button>\n                                            <button *ngSwitchCase=\"'PENDING'\"\n                                                class=\"badge badge-solid-blue btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-exclamation-circle\"></i>&nbsp;\n                                                {{ row.status }}\n                                            </button>\n                                            <button *ngSwitchDefault class=\"badge badge-solid-brown btn btn btn-sm m-1\">\n                                                <i class=\"fas fa-question-circle\"></i>&nbsp;\n                                                {{ row.status }}\n                                            </button>\n                                        </ng-container>\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"deadlineDate\">\n                                    <mat-header-cell *matHeaderCellDef class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Deadline Date\n                                    </mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        {{ row.deadlineDate | date }}\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"action\">\n                                    <mat-header-cell *matHeaderCellDef class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        Action</mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        <!-- <button mat-icon-button color=\"primary\" (click)=\"onView(row.refNumber)\">\n                                            <mat-icon matTooltip=\"SET UP INTERVIEW CYCLE\">schedule</mat-icon>\n                                        </button> -->\n                                        <button mat-icon-button color=\"accent\" (click)=\"$event.stopPropagation()\"\n                                            (click)=\"mngRecord('Update', row)\" class=\"tbl-action-btn\">\n                                            <app-feather-icons [icon]=\"'edit'\" [class]=\"'tbl-fav-edit'\">\n                                            </app-feather-icons>\n                                        </button>\n                                        <!-- <button mat-icon-button color=\"primary\"\n                                            (click)=\"onInterviewCycle(row.refNumber)\">\n                                            <mat-icon matTooltip=\"INTERVIEW CYCLE\">event</mat-icon>\n                                        </button> -->\n                                    </mat-cell>\n                                </ng-container>\n\n                                <ng-container matColumnDef=\"hrAction\">\n                                    <mat-header-cell *matHeaderCellDef\n                                        class=\"column-nowrap psl-3 tbl-col-width-per-20\">HR Action</mat-header-cell>\n                                    <mat-cell *matCellDef=\"let row\" class=\"column-nowrap psl-3 tbl-col-width-per-20\">\n                                        <button mat-icon-button color=\"primary\" (click)=\"mngRecord('View', row)\">\n                                            <mat-icon>remove_red_eye</mat-icon>\n                                        </button>\n                                        <button mat-icon-button color=\"warn\" (click)=\"deleteRecord(row.id)\">\n                                            <mat-icon>delete</mat-icon>\n                                        </button>\n                                    </mat-cell>\n                                </ng-container>\n\n                                <mat-header-row *matHeaderRowDef=\"displayedColumns\">\n                                </mat-header-row>\n                                <mat-row *matRowDef=\"let row; columns: displayedColumns\" (click)=\"viewRecord(row)\"\n                                    [style.cursor]=\"'pointer'\" matRipple>\n                                </mat-row>\n\n                                <tr *matNoDataRow>\n                                    <td colspan=\"{{ displayedColumns.length }}\">\n                                        No data matching the filter \"{{ input }}\"\n                                    </td>\n                                </tr>\n                            </mat-table>\n                            <div class=\"m-2 mx-2\" *ngIf=\"loading || downloadLoading\">\n                                <mat-progress-bar color=\"primary\" mode=\"indeterminate\">\n                                </mat-progress-bar>\n                            </div>\n                            <div *ngIf=\"loading\" class=\"tbl-spinner\">\n                                <mat-progress-spinner color=\"primary\" [diameter]=\"40\" mode=\"indeterminate\">\n                                </mat-progress-spinner>\n                            </div>\n\n                            <mat-paginator [pageSize]=\"10\" [pageSizeOptions]=\"[2, 5, 10, 20, 30, 40, 50, 100]\"\n                                aria-label=\"Select page of users\">\n                            </mat-paginator>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</section>","import { SelectionModel } from '@angular/cdk/collections';\nimport { Component, Inject, OnInit, ViewChild } from '@angular/core';\nimport { FormBuilder } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { Subject, takeUntil, Subscription } from 'rxjs';\nimport { DocumentManagementSystemService } from 'src/app/erp-hr/data/job-services/document-management-system.service';\nimport { JobApplicationAPIService } from 'src/app/erp-hr/data/job-services/job-applications.service';\nimport { SnackbarService } from 'src/app/shared/services/snackbar.service';\nimport { JobsOpeningsPageComponent } from '../jobs-openings-page/jobs-openings-page.component';\n\n@Component({\n  selector: 'app-manage-job-opening',\n  templateUrl: './manage-job-opening.component.html',\n  styleUrls: ['./manage-job-opening.component.sass']\n})\nexport class ManageJobOpeningComponent implements OnInit {\n  Data: any;\n\n  displayedColumns: string[] = [\"index\", \"filename\", \"filetype\", \"action\"];\n\n  dataSource!: MatTableDataSource<any>;\n  @ViewChild(MatPaginator) paginator!: MatPaginator;\n  @ViewChild(MatSort) sort!: MatSort;\n\n  destroy$: Subject<boolean> = new Subject<boolean>();\n\n  selection = new SelectionModel<any>(true, []);\n\n  downloadLoading: boolean = false;\n  pageFunction: any = \"Add\";\n  currentUser: any\n  constructor(\n    public dialogRef: MatDialogRef<JobsOpeningsPageComponent>,\n    @Inject(MAT_DIALOG_DATA) public data,\n    private fb: FormBuilder,\n    private snackbar: SnackbarService,\n    private dmsAPI: DocumentManagementSystemService,\n    private jobApplicationAPIService: JobApplicationAPIService\n  ) {}\n\n  ngOnInit(): void {\n    this.pageFunction = this.data.action;\n    this.Data = this.data.record;\n    this.currentUser = this.data.currentUser;\n\n    console.log(\"this.currentUser : \", this.currentUser )\n    console.log(\"this.Data : \", this.Data )\n\n  }\n\n  input: any;\n  applyFilter(event: Event) {\n    const filterValue = (event.target as HTMLInputElement).value;\n    this.input = filterValue;\n    this.dataSource.filter = filterValue.trim().toLowerCase();\n    if (this.dataSource.paginator) {\n      this.dataSource.paginator.firstPage();\n    }\n  }\n\n  posting: boolean = false;\n\n  response: any;\n  submit() {\n\n   let body = {\n    jobRefNumber: this.Data.jobRefNumber,\n    jobTitle: this.Data.jobTitle,\n\n    firstName: this.currentUser.firstName,\n    lastName: this.currentUser.lastName,\n    middleName: this.currentUser.middleName,\n    emailAddress: this.currentUser.personalEmail,\n    phoneNumber: this.currentUser.personalPhone,\n    nationalId: this.currentUser.nationalId,\n\n   }\n    this.posting = true;\n\n      this.jobApplicationAPIService.create(body)\n        .pipe(takeUntil(this.destroy$))\n        .subscribe({\n          next: (res) => {\n            this.response = res;\n            console.log(\"res: \", res);\n            if (res.statusCode == 201) {\n              this.snackbar.showNotification(\n                \"snackbar-success\",\n                res.message\n              );\n            } else {\n              this.snackbar.showNotification(\n                \"snackbar-danger\",\n                res.message\n              );\n            }\n          },\n          error: (err) => {\n            this.snackbar.showNotification(\"snackbar-danger\", err.message);\n          },\n          complete: () => {\n            this.posting = false;\n            setTimeout(() => {\n              this.onNoClick();\n            }, 3000);\n          },\n        }),\n        Subscription;\n  \n  }\n  onNoClick(): void {\n    this.dialogRef.close({ event: \"close\", data: this.response });\n  }\n}\n","<div class=\"addContainer\">\n    <div *ngIf=\"Data\" class=\"contact-details\">\n        <div class=\"modalHeader\">\n            <div class=\"contact-details-name mb-1\">\n                <strong>Submit Job Application</strong>\n            </div>\n            <button mat-icon-button (click)=\"dialogRef.close()\" aria-label=\"Close dialog\">\n                <mat-icon>close</mat-icon>\n            </button>\n        </div>\n        <div mat-dialog-content>\n            <mat-card-content>\n                <ng-container>\n                   \n                    <div class=\"row mt-1\" style=\"width: 98%; margin-left: 20px\">\n                        <div class=\"col-xl-12 col-lg-12 col-md-12 col-sm-12\">\n                            <div class=\"row justify-content-center\">\n                                <div class=\"col-5 m-b-10\">First Name:</div>\n                                <div class=\"col-7 pro-left m-b-10\">{{ currentUser.firstName }}</div>\n                                <div class=\"col-5 m-b-10\">Last Name:</div>\n                                <div class=\"col-7 pro-left m-b-10\">{{ currentUser.lastName }}</div>\n                                <div class=\"col-5 m-b-10\">Middle Name:</div>\n                                <div class=\"col-7 pro-left m-b-10\">{{ currentUser.middleName }}</div>\n                                <div class=\"col-5 m-b-10\">Email Address:</div>\n                                <div class=\"col-7 pro-left m-b-10\">{{ currentUser.personalEmail }}</div>\n                                <div class=\"col-5 m-b-10\">Phone Number:</div>\n                                <div class=\"col-7 pro-left m-b-10\">{{ currentUser.personalPhone }}</div>\n                                <div class=\"col-5 m-b-10\">ID Number:</div>\n                                <div class=\"col-7 pro-left m-b-10\">{{ currentUser.nationalId }}</div>\n                                <div class=\"col-5 m-b-10\">Job Title:</div>\n                                <div class=\"col-7 pro-left m-b-10\">{{ Data.jobTitle }}</div>\n                                <div class=\"col-5 m-b-10\">Job Ref Num:</div>\n                                <div class=\"col-7 pro-left m-b-10\">\n                                    {{ Data.jobRefNumber }}\n                                </div>\n                            </div>\n                        </div>\n                        \n                    </div>\n                    <hr />\n                </ng-container>\n                \n\n                <div class=\"row\" >\n                    <div class=\"col-xl-12 col-lg-12 col-md-12 col-sm-12 mb-1\">\n                      <div class=\"example-button-row\" align=\"end\">\n                        <button class=\"btn-space\" mat-raised-button color=\"primary\" [class.auth-spinner]=\"posting\"\n                         (click)=\"submit()\">\n                          Submit Application\n                        </button>\n                        <button mat-raised-button color=\"warn\" (click)=\"onNoClick()\" tabindex=\"-1\">\n                          Cancel\n                        </button>\n                      </div>\n                    </div>\n                  </div>\n            </mat-card-content>\n        </div>\n    </div>\n</div>","import {\n  HttpClient,\n  HttpErrorResponse,\n  HttpHeaders,\n} from \"@angular/common/http\";\nimport { Injectable } from \"@angular/core\";\nimport { Observable, throwError } from \"rxjs\";\nimport { catchError, map } from \"rxjs/operators\";\nimport { environment } from \"src/environments/environment.prod\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class EmployeeService {\n  headers = new HttpHeaders().set(\"Content-Type\", \"application/json\");\n  baseURL = `${environment.baseUrlHR}/api/v1/employee`;\n\n  constructor(private http: HttpClient) {}\n\n  create(data: any): Observable<any> {\n    let API_URL = `${this.baseURL}/add`;\n    ///api/v1/employee/add\n\n    return this.http.post(API_URL, data, { headers: this.headers }).pipe(\n      map((res) => {\n        return res || {};\n      }),\n      catchError(this.errorMgmt)\n    );\n  }\n\n  createMultiple(data: any): Observable<any> {\n    let API_URL = `${this.baseURL}/migrate`;\n    return this.http.post(API_URL, data, { headers: this.headers }).pipe(\n      map((res) => {\n        return res || {};\n      }),\n      catchError(this.errorMgmt)\n    );\n  }\n\n  headOfDepartments(): Observable<any> {\n    let API_URL = `${this.baseURL}/heads/of/departments`;\n    return this.http\n      .get(API_URL, { headers: this.headers, withCredentials: false })\n      .pipe(\n        map((res) => {\n          return res || {};\n        }),\n        catchError(this.errorMgmt)\n      );\n  }\n  read(): Observable<any> {\n    let API_URL = `${this.baseURL}/all`;\n    return this.http\n      .get(API_URL, { headers: this.headers, withCredentials: false })\n      .pipe(\n        map((res) => {\n          return res || {};\n        }),\n        catchError(this.errorMgmt)\n      );\n  }\n  readByStatus(params: any): Observable<any> {\n    let API_URL = `${this.baseURL}/fetchbyStatus`;\n    return this.http\n      .get(API_URL, { params:params, headers: this.headers, withCredentials: false })\n      .pipe(\n        map((res) => {\n          return res || {};\n        }),\n        catchError(this.errorMgmt)\n      );\n  }\n  readActive(): Observable<any> {\n    let API_URL = `${this.baseURL}/all/approved`;\n    return this.http\n      .get(API_URL, { headers: this.headers, withCredentials: false })\n      .pipe(\n        map((res) => {\n          return res || {};\n        }),\n        catchError(this.errorMgmt)\n      );\n  }\n  readByEmployeePf(params: any): Observable<any> {\n    let API_URL = `${this.baseURL}/find/by/emp_no`;\n    return this.http\n      .get(API_URL, {\n        params: params,\n        headers: this.headers,\n        withCredentials: false,\n      })\n      .pipe(\n        map((res) => {\n          return res || {};\n        }),\n        catchError(this.errorMgmt)\n      );\n  }\n  readActiveEmployeesWithMoreDetails(): Observable<any> {\n    let API_URL = `${this.baseURL}/all/active/employees`;\n    return this.http\n      .get(API_URL, { headers: this.headers, withCredentials: false })\n      .pipe(\n        map((res) => {\n          return res || {};\n        }),\n        catchError(this.errorMgmt)\n      );\n  }\n  readPending(): Observable<any> {\n    let API_URL = `${this.baseURL}/all/pending`;\n    return this.http\n      .get(API_URL, { headers: this.headers, withCredentials: false })\n      .pipe(\n        map((res) => {\n          return res || {};\n        }),\n        catchError(this.errorMgmt)\n      );\n  }\n  readDormant(): Observable<any> {\n    let API_URL = `${this.baseURL}/all/dormant`;\n    return this.http\n      .get(API_URL, { headers: this.headers, withCredentials: false })\n      .pipe(\n        map((res) => {\n          return res || {};\n        }),\n        catchError(this.errorMgmt)\n      );\n  }\n  readHold(): Observable<any> {\n    let API_URL = `${this.baseURL}/all/onHold`;\n    return this.http\n      .get(API_URL, { headers: this.headers, withCredentials: false })\n      .pipe(\n        map((res) => {\n          return res || {};\n        }),\n        catchError(this.errorMgmt)\n      );\n  }\n  restoreDormant(id: any): Observable<any> {\n    let API_URL = `${this.baseURL}/restoreDormant/${id}`;\n    return this.http.put(API_URL, { withCredentials: false }).pipe(\n      map((res) => {\n        return res || {};\n      }),\n      catchError(this.errorMgmt)\n    );\n  }\n  restoreRemoved(id: any): Observable<any> {\n    let API_URL = `${this.baseURL}/restoreOnHold/${id}`;\n    return this.http.put(API_URL, { withCredentials: false }).pipe(\n      map((res) => {\n        return res || {};\n      }),\n      catchError(this.errorMgmt)\n    );\n  }\n  approve(id: any): Observable<any> {\n    let API_URL = `${this.baseURL}/approve/${id}`;\n    return this.http.put(API_URL, { withCredentials: false }).pipe(\n      map((res) => {\n        return res || {};\n      }),\n      catchError(this.errorMgmt)\n    );\n  }\n  hrmApproval(id: any): Observable<any> {\n    let API_URL = `${this.baseURL}/hrm/approval/${id}`;\n    return this.http.put(API_URL, { withCredentials: false }).pipe(\n      map((res) => {\n        return res || {};\n      }),\n      catchError(this.errorMgmt)\n    );\n  }\n  supervisorApproval(id: any): Observable<any> {\n    let API_URL = `${this.baseURL}/supervisor/approval/${id}`;\n    return this.http.put(API_URL, { withCredentials: false }).pipe(\n      map((res) => {\n        return res || {};\n      }),\n      catchError(this.errorMgmt)\n    );\n  }\n  directorApproval(id: any): Observable<any> {\n    let API_URL = `${this.baseURL}/director/approval/${id}`;\n    return this.http.put(API_URL, { withCredentials: false }).pipe(\n      map((res) => {\n        return res || {};\n      }),\n      catchError(this.errorMgmt)\n    );\n  }\n  tempDelete(id: any): Observable<any> {\n    let API_URL = `${this.baseURL}/temp/delete/${id}`;\n    return this.http.put(API_URL, { withCredentials: false }).pipe(\n      map((res) => {\n        return res || {};\n      }),\n      catchError(this.errorMgmt)\n    );\n  }\n  tempHold(id: any): Observable<any> {\n    let API_URL = `${this.baseURL}/temp/hold/${id}`;\n    return this.http.put(API_URL, { withCredentials: false }).pipe(\n      map((res) => {\n        return res || {};\n      }),\n      catchError(this.errorMgmt)\n    );\n  }\n\n  //Permanently Delete Employee Completely\n\n  permanentDelete(id: any): Observable<any> {\n    let API_URL = `${this.baseURL}/permanent/delete/${id}`;\n    return this.http.delete(API_URL, { withCredentials: false }).pipe(\n      map((res) => {\n        return res || {};\n      }),\n      catchError(this.errorMgmt)\n    );\n  }\n  countEmployees() {\n    let API_URL = `${this.baseURL}/count`;\n    return this.http\n      .get(API_URL, { headers: this.headers, withCredentials: false })\n      .pipe(\n        map((res) => {\n          return res || {};\n        }),\n        catchError(this.errorMgmt)\n      );\n  }\n  countClosedEmployees() {\n    let API_URL = `${this.baseURL}/count/closed/salary`;\n    return this.http\n      .get(API_URL, { headers: this.headers, withCredentials: false })\n      .pipe(\n        map((res) => {\n          return res || {};\n        }),\n        catchError(this.errorMgmt)\n      );\n  }\n  countSalary() {\n    let API_URL = `${environment.baseUrlHR}/api/v1/payroll/count/salary`;\n    return this.http\n      .get(API_URL, { headers: this.headers, withCredentials: false })\n      .pipe(\n        map((res) => {\n          return res || {};\n        }),\n        catchError(this.errorMgmt)\n      );\n  }\n  findById(id: any): Observable<any> {\n    let API_URL = `${this.baseURL}/find/by/id/${id}`;\n    return this.http.get(API_URL, { withCredentials: false }).pipe(\n      map((res) => {\n        return res || {};\n      }),\n      catchError(this.errorMgmt)\n    );\n  }\n  findByEmpNo(empNo: any): Observable<any> {\n    let API_URL = `${this.baseURL}/find/by/emp_no/?empNo=${empNo}`;\n    return this.http.get(API_URL, { withCredentials: false }).pipe(\n      map((res) => {\n        console.log(res);\n        console.log(\"empno\", empNo);\n        return res || {};\n      }),\n      catchError(this.errorMgmt)\n    );\n  }\n\n  update(data: any): Observable<any> {\n    let API_URL = `${this.baseURL}/update`;\n    return this.http\n      .put(API_URL, data, { headers: this.headers, withCredentials: false })\n      .pipe(\n        map((res) => {\n          console.log(\"On Update Employee JSON\", res);\n\n          return res || {};\n        }),\n        catchError(this.errorMgmt)\n      );\n  }\n  createPortal(params: any): Observable<any> {\n    let API_URL = `${this.baseURL}/create/portal`;\n    return this.http\n      .put(\n        API_URL,\n        {},\n        { params: params, headers: this.headers, withCredentials: false }\n      )\n      .pipe(catchError(this.errorMgmt));\n  }\n\n  delete(params: any): Observable<any> {\n    let API_URL = `${this.baseURL}/delete`;\n    return this.http.delete(API_URL, {params: params, headers: this.headers, withCredentials: false }).pipe(map(res => {\n      return res || {}\n    }),\n      catchError(this.errorMgmt)\n    );\n  }\n  \n  validateBulkEmployees(processedRows: any): Observable<any> {\n    const expenseUrl = `${this.baseURL}/update/state`;\n    return this.http.put(expenseUrl, processedRows);\n  }\n\n // /api/v1/employee/get_org_structure\n readStructureByEmpf(params: any): Observable<any> {\n  let API_URL = `${this.baseURL}/get_org_structure`;\n  return this.http.get(API_URL, {params:params, withCredentials: false }).pipe(\n    map((res) => {\n      return res || {};\n    }),\n    catchError(this.errorMgmt)\n  );\n}\n  errorMgmt(error: HttpErrorResponse) {\n    let errorMessage = \"\";\n    if (error.error instanceof ErrorEvent) {\n      // Get client-side error\n      errorMessage = error.error.message;\n    } else {\n      // Get server-side error\n      errorMessage = `${error.error.message}`;\n    }\n    return throwError(errorMessage);\n  }\n}\n"],"names":[],"sourceRoot":"webpack:///"}